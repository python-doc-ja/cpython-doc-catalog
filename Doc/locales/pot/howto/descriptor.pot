# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-02 04:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../howto/descriptor.rst:5
msgid "Descriptor HowTo Guide"
msgstr ""

#: ../../howto/descriptor.rst:0
msgid "Author"
msgstr ""

#: ../../howto/descriptor.rst:7
msgid "Raymond Hettinger"
msgstr ""

#: ../../howto/descriptor.rst:0
msgid "Contact"
msgstr ""

#: ../../howto/descriptor.rst:8
msgid "<python at rcn dot com>"
msgstr ""

#: ../../howto/descriptor.rst:11
msgid "Contents"
msgstr ""

#: ../../howto/descriptor.rst:13
msgid ":term:`Descriptors <descriptor>` let objects customize attribute lookup, storage, and deletion."
msgstr ""

#: ../../howto/descriptor.rst:16
msgid "This guide has four major sections:"
msgstr ""

#: ../../howto/descriptor.rst:18
msgid "The \"primer\" gives a basic overview, moving gently from simple examples, adding one feature at a time.  It is a great place to start."
msgstr ""

#: ../../howto/descriptor.rst:21
msgid "The second section shows a complete, practical descriptor example.  If you already know the basics, start there."
msgstr ""

#: ../../howto/descriptor.rst:24
msgid "The third section provides a more technical tutorial that goes into the detailed mechanics of how descriptors work.  Most people don't need this level of detail."
msgstr ""

#: ../../howto/descriptor.rst:28
msgid "The last section has pure Python equivalents for built-in descriptors that are written in C.  Read this if you're curious about how functions turn into bound methods or about how to implement common tools like :func:`classmethod`, :func:`staticmethod`, and :func:`property`."
msgstr ""

#: ../../howto/descriptor.rst:35
msgid "Primer"
msgstr ""

#: ../../howto/descriptor.rst:37
msgid "In this primer, we start with the most basic possible example and then we'll add new capabilities one by one."
msgstr ""

#: ../../howto/descriptor.rst:42
msgid "Simple example: A descriptor that returns a constant"
msgstr ""

#: ../../howto/descriptor.rst:44
msgid "The :class:`Ten` class is a descriptor that always returns the constant ``10``::"
msgstr ""

#: ../../howto/descriptor.rst:51
msgid "To use the descriptor, it must be stored as a class variable in another class::"
msgstr ""

#: ../../howto/descriptor.rst:57
msgid "An interactive session shows the difference between normal attribute lookup and descriptor lookup::"
msgstr ""

#: ../../howto/descriptor.rst:66
msgid "In the ``a.x`` attribute lookup, the dot operator finds the value ``5`` stored in the class dictionary.  In the ``a.y`` descriptor lookup, the dot operator calls the descriptor's :meth:`__get__()` method.  That method returns ``10``. Note that the value ``10`` is not stored in either the class dictionary or the instance dictionary.  Instead, the value ``10`` is computed on demand."
msgstr ""

#: ../../howto/descriptor.rst:72
msgid "This example shows how a simple descriptor works, but it isn't very useful. For retrieving constants, normal attribute lookup would be better."
msgstr ""

#: ../../howto/descriptor.rst:75
msgid "In the next section, we'll create something more useful, a dynamic lookup."
msgstr ""

#: ../../howto/descriptor.rst:79
msgid "Dynamic lookups"
msgstr ""

#: ../../howto/descriptor.rst:81
msgid "Interesting descriptors typically run computations instead of doing lookups::"
msgstr ""

#: ../../howto/descriptor.rst:97
msgid "An interactive session shows that the lookup is dynamic â€” it computes different, updated answers each time::"
msgstr ""

#: ../../howto/descriptor.rst:111
msgid "Besides showing how descriptors can run computations, this example also reveals the purpose of the parameters to :meth:`__get__`.  The *self* parameter is *size*, an instance of *DirectorySize*.  The *obj* parameter is either *g* or *s*, an instance of *Directory*.  It is *obj* parameter that lets the :meth:`__get__` method learn the target directory.  The *objtype* parameter is the class *Directory*."
msgstr ""

#: ../../howto/descriptor.rst:120
msgid "Managed attributes"
msgstr ""

#: ../../howto/descriptor.rst:122
msgid "A popular use for descriptors is managing access to instance data.  The descriptor is assigned to a public attribute in the class dictionary while the actual data is stored as a private attribute in the instance dictionary.  The descriptor's :meth:`__get__` and :meth:`__set__` methods are triggered when the public attribute is accessed."
msgstr ""

#: ../../howto/descriptor.rst:128
msgid "In the following example, *age* is the public attribute and *_age* is the private attribute.  When the public attribute is accessed, the descriptor logs the lookup or update::"
msgstr ""

#: ../../howto/descriptor.rst:159
msgid "An interactive session shows that all access to the managed attribute *age* is logged, but that the regular attribute *name* is not logged::"
msgstr ""

#: ../../howto/descriptor.rst:185
msgid "One major issue with this example is the private name *_age* is hardwired in the *LoggedAgeAccess* class.  That means that each instance can only have one logged attribute and that its name is unchangeable.  In the next example, we'll fix that problem."
msgstr ""

#: ../../howto/descriptor.rst:192
msgid "Customized Names"
msgstr ""

#: ../../howto/descriptor.rst:194
msgid "When a class uses descriptors, it can inform each descriptor about what variable name was used."
msgstr ""

#: ../../howto/descriptor.rst:197
msgid "In this example, the :class:`Person` class has two descriptor instances, *name* and *age*.  When the :class:`Person` class is defined, it makes a callback to :meth:`__set_name__` in *LoggedAccess* so that the field names can be recorded, giving each descriptor its own *public_name* and *private_name*::"
msgstr ""

#: ../../howto/descriptor.rst:233
msgid "An interactive session shows that the :class:`Person` class has called :meth:`__set_name__` so that the field names would be recorded.  Here we call :func:`vars` to lookup the descriptor without triggering it::"
msgstr ""

#: ../../howto/descriptor.rst:242
msgid "The new class now logs access to both *name* and *age*::"
msgstr ""

#: ../../howto/descriptor.rst:251
msgid "The two *Person* instances contain only the private names::"
msgstr ""

#: ../../howto/descriptor.rst:260
msgid "Closing thoughts"
msgstr ""

#: ../../howto/descriptor.rst:262
msgid "A :term:`descriptor` is what we call any object that defines :meth:`__get__`, :meth:`__set__`, or :meth:`__delete__`."
msgstr ""

#: ../../howto/descriptor.rst:265
msgid "Optionally, descriptors can have a :meth:`__set_name__` method.  This is only used in cases where a descriptor needs to know either the class where it was created or the name of class variable it was assigned to."
msgstr ""

#: ../../howto/descriptor.rst:269
msgid "Descriptors get invoked by the dot operator during attribute lookup.  If a descriptor is accessed indirectly with ``vars(some_class)[descriptor_name]``, the descriptor instance is returned without invoking it."
msgstr ""

#: ../../howto/descriptor.rst:273
msgid "Descriptors only work when used as class variables.  When put in instances, they have no effect."
msgstr ""

#: ../../howto/descriptor.rst:276
msgid "The main motivation for descriptors is to provide a hook allowing objects stored in class variables to control what happens during dotted lookup."
msgstr ""

#: ../../howto/descriptor.rst:279
msgid "Traditionally, the calling class controls what happens during lookup. Descriptors invert that relationship and allow the data being looked-up to have a say in the matter."
msgstr ""

#: ../../howto/descriptor.rst:283
msgid "Descriptors are used throughout the language.  It is how functions turn into bound methods.  Common tools like :func:`classmethod`, :func:`staticmethod`, :func:`property`, and :func:`functools.cached_property` are all implemented as descriptors."
msgstr ""

#: ../../howto/descriptor.rst:290
msgid "Complete Practical Example"
msgstr ""

#: ../../howto/descriptor.rst:292
msgid "In this example, we create a practical and powerful tool for locating notoriously hard to find data corruption bugs."
msgstr ""

#: ../../howto/descriptor.rst:297
msgid "Validator class"
msgstr ""

#: ../../howto/descriptor.rst:299
msgid "A validator is a descriptor for managed attribute access.  Prior to storing any data, it verifies that the new value meets various type and range restrictions.  If those restrictions aren't met, it raises an exception to prevent data corruption at its source."
msgstr ""

#: ../../howto/descriptor.rst:304
msgid "This :class:`Validator` class is both an :term:`abstract base class` and a managed attribute descriptor::"
msgstr ""

#: ../../howto/descriptor.rst:325
msgid "Custom validators need to inherit from :class:`Validator` and must supply a :meth:`validate` method to test various restrictions as needed."
msgstr ""

#: ../../howto/descriptor.rst:330
msgid "Custom validators"
msgstr ""

#: ../../howto/descriptor.rst:332
msgid "Here are three practical data validation utilities:"
msgstr ""

#: ../../howto/descriptor.rst:334
msgid ":class:`OneOf` verifies that a value is one of a restricted set of options."
msgstr ""

#: ../../howto/descriptor.rst:336
msgid ":class:`Number` verifies that a value is either an :class:`int` or :class:`float`.  Optionally, it verifies that a value is between a given minimum or maximum."
msgstr ""

#: ../../howto/descriptor.rst:340
msgid ":class:`String` verifies that a value is a :class:`str`.  Optionally, it validates a given minimum or maximum length.  It can validate a user-defined `predicate <https://en.wikipedia.org/wiki/Predicate_(mathematical_logic)>`_ as well."
msgstr ""

#: ../../howto/descriptor.rst:399
msgid "Practical use"
msgstr ""

#: ../../howto/descriptor.rst:401
msgid "Here's how the data validators can be used in a real class::"
msgstr ""

#: ../../howto/descriptor.rst:414
msgid "The descriptors prevent invalid instances from being created::"
msgstr ""

#: ../../howto/descriptor.rst:424
msgid "Technical Tutorial"
msgstr ""

#: ../../howto/descriptor.rst:426
msgid "What follows is a more technical tutorial for the mechanics and details of how descriptors work."
msgstr ""

#: ../../howto/descriptor.rst:431
msgid "Abstract"
msgstr ""

#: ../../howto/descriptor.rst:433
msgid "Defines descriptors, summarizes the protocol, and shows how descriptors are called.  Provides an example showing how object relational mappings work."
msgstr ""

#: ../../howto/descriptor.rst:436
msgid "Learning about descriptors not only provides access to a larger toolset, it creates a deeper understanding of how Python works and an appreciation for the elegance of its design."
msgstr ""

#: ../../howto/descriptor.rst:442
msgid "Definition and Introduction"
msgstr ""

#: ../../howto/descriptor.rst:444
msgid "In general, a descriptor is an object attribute with \"binding behavior\", one whose attribute access has been overridden by methods in the descriptor protocol.  Those methods are :meth:`__get__`, :meth:`__set__`, and :meth:`__delete__`.  If any of those methods are defined for an object, it is said to be a :term:`descriptor`."
msgstr ""

#: ../../howto/descriptor.rst:450
msgid "The default behavior for attribute access is to get, set, or delete the attribute from an object's dictionary.  For instance, ``a.x`` has a lookup chain starting with ``a.__dict__['x']``, then ``type(a).__dict__['x']``, and continuing through the base classes of ``type(a)``. If the looked-up value is an object defining one of the descriptor methods, then Python may override the default behavior and invoke the descriptor method instead. Where this occurs in the precedence chain depends on which descriptor methods were defined."
msgstr ""

#: ../../howto/descriptor.rst:459
msgid "Descriptors are a powerful, general purpose protocol.  They are the mechanism behind properties, methods, static methods, class methods, and :func:`super()`.  They are used throughout Python itself.  Descriptors simplify the underlying C code and offer a flexible set of new tools for everyday Python programs."
msgstr ""

#: ../../howto/descriptor.rst:467
msgid "Descriptor Protocol"
msgstr ""

#: ../../howto/descriptor.rst:469
msgid "``descr.__get__(self, obj, type=None) -> value``"
msgstr ""

#: ../../howto/descriptor.rst:471
msgid "``descr.__set__(self, obj, value) -> None``"
msgstr ""

#: ../../howto/descriptor.rst:473
msgid "``descr.__delete__(self, obj) -> None``"
msgstr ""

#: ../../howto/descriptor.rst:475
msgid "That is all there is to it.  Define any of these methods and an object is considered a descriptor and can override default behavior upon being looked up as an attribute."
msgstr ""

#: ../../howto/descriptor.rst:479
msgid "If an object defines :meth:`__set__` or :meth:`__delete__`, it is considered a data descriptor.  Descriptors that only define :meth:`__get__` are called non-data descriptors (they are typically used for methods but other uses are possible)."
msgstr ""

#: ../../howto/descriptor.rst:484
msgid "Data and non-data descriptors differ in how overrides are calculated with respect to entries in an instance's dictionary.  If an instance's dictionary has an entry with the same name as a data descriptor, the data descriptor takes precedence.  If an instance's dictionary has an entry with the same name as a non-data descriptor, the dictionary entry takes precedence."
msgstr ""

#: ../../howto/descriptor.rst:490
msgid "To make a read-only data descriptor, define both :meth:`__get__` and :meth:`__set__` with the :meth:`__set__` raising an :exc:`AttributeError` when called.  Defining the :meth:`__set__` method with an exception raising placeholder is enough to make it a data descriptor."
msgstr ""

#: ../../howto/descriptor.rst:497
msgid "Overview of Descriptor Invocation"
msgstr ""

#: ../../howto/descriptor.rst:499
msgid "A descriptor can be called directly with ``desc.__get__(obj)`` or ``desc.__get__(None, cls)``."
msgstr ""

#: ../../howto/descriptor.rst:502
msgid "But it is more common for a descriptor to be invoked automatically from attribute access."
msgstr ""

#: ../../howto/descriptor.rst:505
msgid "The expression ``obj.x`` looks up the attribute ``x`` in the chain of namespaces for ``obj``.  If the search finds a descriptor, its :meth:`__get__` method is invoked according to the precedence rules listed below."
msgstr ""

#: ../../howto/descriptor.rst:509
msgid "The details of invocation depend on whether ``obj`` is an object, class, or instance of super."
msgstr ""

#: ../../howto/descriptor.rst:514
msgid "Invocation from an Instance"
msgstr ""

#: ../../howto/descriptor.rst:516
msgid "Instance lookup scans through a chain of namespaces giving data descriptors the highest priority, followed by instance variables, then non-data descriptors, then class variables, and lastly :meth:`__getattr__` if it is provided."
msgstr ""

#: ../../howto/descriptor.rst:521
msgid "If a descriptor is found for ``a.x``, then it is invoked with: ``desc.__get__(a, type(a))``."
msgstr ""

#: ../../howto/descriptor.rst:524
msgid "The logic for a dotted lookup is in :meth:`object.__getattribute__`.  Here is a pure Python equivalent::"
msgstr ""

#: ../../howto/descriptor.rst:548
msgid "The :exc:`TypeError` exception handler is needed because the instance dictionary doesn't exist when its class defines :term:`__slots__`."
msgstr ""

#: ../../howto/descriptor.rst:553
msgid "Invocation from a Class"
msgstr ""

#: ../../howto/descriptor.rst:555
msgid "The logic for a dotted lookup such as ``A.x`` is in :meth:`type.__getattribute__`.  The steps are similar to those for :meth:`object.__getattribute__` but the instance dictionary lookup is replaced by a search through the class's :term:`method resolution order`."
msgstr ""

#: ../../howto/descriptor.rst:560
msgid "If a descriptor is found, it is invoked with ``desc.__get__(None, A)``."
msgstr ""

#: ../../howto/descriptor.rst:562
msgid "The full C implementation can be found in :c:func:`type_getattro()` and :c:func:`_PyType_Lookup()` in :source:`Objects/typeobject.c`."
msgstr ""

#: ../../howto/descriptor.rst:567
msgid "Invocation from Super"
msgstr ""

#: ../../howto/descriptor.rst:569
msgid "The logic for super's dotted lookup is in the :meth:`__getattribute__` method for object returned by :class:`super()`."
msgstr ""

#: ../../howto/descriptor.rst:572
msgid "A dotted lookup such as ``super(A, obj).m`` searches ``obj.__class__.__mro__`` for the base class ``B`` immediately following ``A`` and then returns ``B.__dict__['m'].__get__(obj, A)``.  If not a descriptor, ``m`` is returned unchanged."
msgstr ""

#: ../../howto/descriptor.rst:577
msgid "The full C implementation can be found in :c:func:`super_getattro()` in :source:`Objects/typeobject.c`.  A pure Python equivalent can be found in `Guido's Tutorial <https://www.python.org/download/releases/2.2.3/descrintro/#cooperation>`_."
msgstr ""

#: ../../howto/descriptor.rst:584
msgid "Summary of Invocation Logic"
msgstr ""

#: ../../howto/descriptor.rst:586
msgid "The mechanism for descriptors is embedded in the :meth:`__getattribute__()` methods for :class:`object`, :class:`type`, and :func:`super`."
msgstr ""

#: ../../howto/descriptor.rst:589
msgid "The important points to remember are:"
msgstr ""

#: ../../howto/descriptor.rst:591
msgid "Descriptors are invoked by the :meth:`__getattribute__` method."
msgstr ""

#: ../../howto/descriptor.rst:593
msgid "Classes inherit this machinery from :class:`object`, :class:`type`, or :func:`super`."
msgstr ""

#: ../../howto/descriptor.rst:596
msgid "Overriding :meth:`__getattribute__` prevents automatic descriptor calls because all the descriptor logic is in that method."
msgstr ""

#: ../../howto/descriptor.rst:599
msgid ":meth:`object.__getattribute__` and :meth:`type.__getattribute__` make different calls to :meth:`__get__`.  The first includes the instance and may include the class.  The second puts in ``None`` for the instance and always includes the class."
msgstr ""

#: ../../howto/descriptor.rst:604
msgid "Data descriptors always override instance dictionaries."
msgstr ""

#: ../../howto/descriptor.rst:606
msgid "Non-data descriptors may be overridden by instance dictionaries."
msgstr ""

#: ../../howto/descriptor.rst:610
msgid "Automatic Name Notification"
msgstr ""

#: ../../howto/descriptor.rst:612
msgid "Sometimes it is desirable for a descriptor to know what class variable name it was assigned to.  When a new class is created, the :class:`type` metaclass scans the dictionary of the new class.  If any of the entries are descriptors and if they define :meth:`__set_name__`, that method is called with two arguments.  The *owner* is the class where the descriptor is used, the *name* is class variable the descriptor was assigned to."
msgstr ""

#: ../../howto/descriptor.rst:619
msgid "The implementation details are in :c:func:`type_new()` and :c:func:`set_names()` in :source:`Objects/typeobject.c`."
msgstr ""

#: ../../howto/descriptor.rst:622
msgid "Since the update logic is in :meth:`type.__new__`, notifications only take place at the time of class creation.  If descriptors are added to the class afterwards, :meth:`__set_name__` will need to be called manually."
msgstr ""

#: ../../howto/descriptor.rst:628
msgid "ORM Example"
msgstr ""

#: ../../howto/descriptor.rst:630
msgid "The following code is simplified skeleton showing how data descriptors could be used to implement an `object relational mapping <https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping>`_."
msgstr ""

#: ../../howto/descriptor.rst:634
msgid "The essential idea is that the data is stored in an external database.  The Python instances only hold keys to the database's tables.  Descriptors take care of lookups or updates::"
msgstr ""

#: ../../howto/descriptor.rst:651
msgid "We can use the :class:`Field` class to define \"models\" that describe the schema for each table in a database::"
msgstr ""

#: ../../howto/descriptor.rst:673
msgid "An interactive session shows how data is retrieved from the database and how it can be updated::"
msgstr ""

#: ../../howto/descriptor.rst:693
msgid "Pure Python Equivalents"
msgstr ""

#: ../../howto/descriptor.rst:695
msgid "The descriptor protocol is simple and offers exciting possibilities.  Several use cases are so common that they have been prepackaged into built-in tools. Properties, bound methods, static methods, and class methods are all based on the descriptor protocol."
msgstr ""

#: ../../howto/descriptor.rst:702
msgid "Properties"
msgstr ""

#: ../../howto/descriptor.rst:704
msgid "Calling :func:`property` is a succinct way of building a data descriptor that triggers function calls upon access to an attribute.  Its signature is::"
msgstr ""

#: ../../howto/descriptor.rst:709
msgid "The documentation shows a typical use to define a managed attribute ``x``::"
msgstr ""

#: ../../howto/descriptor.rst:717
msgid "To see how :func:`property` is implemented in terms of the descriptor protocol, here is a pure Python equivalent::"
msgstr ""

#: ../../howto/descriptor.rst:757
msgid "The :func:`property` builtin helps whenever a user interface has granted attribute access and then subsequent changes require the intervention of a method."
msgstr ""

#: ../../howto/descriptor.rst:761
msgid "For instance, a spreadsheet class may grant access to a cell value through ``Cell('b10').value``. Subsequent improvements to the program require the cell to be recalculated on every access; however, the programmer does not want to affect existing client code accessing the attribute directly.  The solution is to wrap access to the value attribute in a property data descriptor::"
msgstr ""

#: ../../howto/descriptor.rst:778
msgid "Functions and Methods"
msgstr ""

#: ../../howto/descriptor.rst:780
msgid "Python's object oriented features are built upon a function based environment. Using non-data descriptors, the two are merged seamlessly."
msgstr ""

#: ../../howto/descriptor.rst:783
msgid "Functions stored in class dictionaries get turned into methods when invoked. Methods only differ from regular functions in that the object instance is prepended to the other arguments.  By convention, the instance is called *self* but could be called *this* or any other variable name."
msgstr ""

#: ../../howto/descriptor.rst:788
msgid "Methods can be created manually with :class:`types.MethodType` which is roughly equivalent to::"
msgstr ""

#: ../../howto/descriptor.rst:803
msgid "To support automatic creation of methods, functions include the :meth:`__get__` method for binding methods during attribute access.  This means that functions are non-data descriptors which return bound methods during dotted lookup from an instance.  Here's how it works::"
msgstr ""

#: ../../howto/descriptor.rst:817
msgid "Running the following class in the interpreter shows how the function descriptor works in practice::"
msgstr ""

#: ../../howto/descriptor.rst:824
msgid "The function has a :term:`qualified name` attribute to support introspection::"
msgstr ""

#: ../../howto/descriptor.rst:829
msgid "Accessing the function through the class dictionary does not invoke :meth:`__get__`.  Instead, it just returns the underlying function object::"
msgstr ""

#: ../../howto/descriptor.rst:835
msgid "Dotted access from a class calls :meth:`__get__` which just returns the underlying function unchanged::"
msgstr ""

#: ../../howto/descriptor.rst:841
msgid "The interesting behavior occurs during dotted access from an instance.  The dotted lookup calls :meth:`__get__` which returns a bound method object::"
msgstr ""

#: ../../howto/descriptor.rst:848
msgid "Internally, the bound method stores the underlying function and the bound instance::"
msgstr ""

#: ../../howto/descriptor.rst:857
msgid "If you have ever wondered where *self* comes from in regular methods or where *cls* comes from in class methods, this is it!"
msgstr ""

#: ../../howto/descriptor.rst:862
msgid "Static Methods"
msgstr ""

#: ../../howto/descriptor.rst:864
msgid "Non-data descriptors provide a simple mechanism for variations on the usual patterns of binding functions into methods."
msgstr ""

#: ../../howto/descriptor.rst:867
msgid "To recap, functions have a :meth:`__get__` method so that they can be converted to a method when accessed as attributes.  The non-data descriptor transforms an ``obj.f(*args)`` call into ``f(obj, *args)``.  Calling ``cls.f(*args)`` becomes ``f(*args)``."
msgstr ""

#: ../../howto/descriptor.rst:872
msgid "This chart summarizes the binding and its two most useful variants:"
msgstr ""

#: ../../howto/descriptor.rst:875
msgid "Transformation"
msgstr ""

#: ../../howto/descriptor.rst:875
msgid "Called from an object"
msgstr ""

#: ../../howto/descriptor.rst:875
msgid "Called from a class"
msgstr ""

#: ../../howto/descriptor.rst:878
msgid "function"
msgstr ""

#: ../../howto/descriptor.rst:878
msgid "f(obj, \\*args)"
msgstr ""

#: ../../howto/descriptor.rst:878
#: ../../howto/descriptor.rst:880
#: ../../howto/descriptor.rst:880
msgid "f(\\*args)"
msgstr ""

#: ../../howto/descriptor.rst:880
msgid "staticmethod"
msgstr ""

#: ../../howto/descriptor.rst:882
msgid "classmethod"
msgstr ""

#: ../../howto/descriptor.rst:882
msgid "f(type(obj), \\*args)"
msgstr ""

#: ../../howto/descriptor.rst:882
msgid "f(cls, \\*args)"
msgstr ""

#: ../../howto/descriptor.rst:885
msgid "Static methods return the underlying function without changes.  Calling either ``c.f`` or ``C.f`` is the equivalent of a direct lookup into ``object.__getattribute__(c, \"f\")`` or ``object.__getattribute__(C, \"f\")``. As a result, the function becomes identically accessible from either an object or a class."
msgstr ""

#: ../../howto/descriptor.rst:891
msgid "Good candidates for static methods are methods that do not reference the ``self`` variable."
msgstr ""

#: ../../howto/descriptor.rst:894
msgid "For instance, a statistics package may include a container class for experimental data.  The class provides normal methods for computing the average, mean, median, and other descriptive statistics that depend on the data. However, there may be useful functions which are conceptually related but do not depend on the data.  For instance, ``erf(x)`` is handy conversion routine that comes up in statistical work but does not directly depend on a particular dataset. It can be called either from an object or the class:  ``s.erf(1.5) --> .9332`` or ``Sample.erf(1.5) --> .9332``."
msgstr ""

#: ../../howto/descriptor.rst:903
msgid "Since static methods return the underlying function with no changes, the example calls are unexciting::"
msgstr ""

#: ../../howto/descriptor.rst:916
msgid "Using the non-data descriptor protocol, a pure Python version of :func:`staticmethod` would look like this::"
msgstr ""

#: ../../howto/descriptor.rst:930
msgid "Class Methods"
msgstr ""

#: ../../howto/descriptor.rst:932
msgid "Unlike static methods, class methods prepend the class reference to the argument list before calling the function.  This format is the same for whether the caller is an object or a class::"
msgstr ""

#: ../../howto/descriptor.rst:946
msgid "This behavior is useful whenever the method only needs to have a class reference and does rely on data stored in a specific instance.  One use for class methods is to create alternate class constructors.  For example, the classmethod :func:`dict.fromkeys` creates a new dictionary from a list of keys.  The pure Python equivalent is::"
msgstr ""

#: ../../howto/descriptor.rst:963
msgid "Now a new dictionary of unique keys can be constructed like this::"
msgstr ""

#: ../../howto/descriptor.rst:968
msgid "Using the non-data descriptor protocol, a pure Python version of :func:`classmethod` would look like this::"
msgstr ""

#: ../../howto/descriptor.rst:984
msgid "The code path for ``hasattr(obj, '__get__')`` was added in Python 3.9 and makes it possible for :func:`classmethod` to support chained decorators. For example, a classmethod and property could be chained together::"
msgstr ""

#: ../../howto/descriptor.rst:995
msgid "Member Objects"
msgstr ""

#: ../../howto/descriptor.rst:997
msgid "When a class defines ``__slots__``, it replaces instance dictionaries with a fixed-length array of slot values.  From a user point of view that has several effects:"
msgstr ""

#: ../../howto/descriptor.rst:1001
msgid "1. Provides immediate detection of bugs due to misspelled attribute assignments.  Only attribute names specified in ``__slots__`` are allowed::"
msgstr ""

#: ../../howto/descriptor.rst:1013
msgid "2. Helps create immutable objects where descriptors manage access to private attributes stored in ``__slots__``::"
msgstr ""

#: ../../howto/descriptor.rst:1034
msgid "3. Saves memory.  On a 64-bit Linux build, an instance with two attributes takes 48 bytes with ``__slots__`` and 152 bytes without.  This `flyweight design pattern <https://en.wikipedia.org/wiki/Flyweight_pattern>`_ likely only matters when a large number of instances are going to be created."
msgstr ""

#: ../../howto/descriptor.rst:1039
msgid "4. Blocks tools like :func:`functools.cached_property` which require an instance dictionary to function correctly::"
msgstr ""

#: ../../howto/descriptor.rst:1057
msgid "It's not possible to create an exact drop-in pure Python version of ``__slots__`` because it requires direct access to C structures and control over object memory allocation.  However, we can build a mostly faithful simulation where the actual C structure for slots is emulated by a private ``_slotvalues`` list.  Reads and writes to that private structure are managed by member descriptors::"
msgstr ""

#: ../../howto/descriptor.rst:1086
msgid "The :meth:`type.__new__` method takes care of adding member objects to class variables.  The :meth:`object.__new__` method takes care of creating instances that have slots instead of a instance dictionary.  Here is a rough equivalent in pure Python::"
msgstr ""

#: ../../howto/descriptor.rst:1112
msgid "To use the simulation in a real class, just inherit from :class:`Object` and set the :term:`metaclass` to :class:`Type`::"
msgstr ""

#: ../../howto/descriptor.rst:1123
msgid "At this point, the metaclass has loaded member objects for *x* and *y*::"
msgstr ""

#: ../../howto/descriptor.rst:1134
msgid "When instances are created, they have a ``slot_values`` list where the attributes are stored::"
msgstr ""

#: ../../howto/descriptor.rst:1144
msgid "Unlike the real ``__slots__``, this simulation does have an instance dictionary just to hold the ``_slotvalues`` array.  So, unlike the real code, this simulation doesn't block assignments to misspelled attributes::"
msgstr ""

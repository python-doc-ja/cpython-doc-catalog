# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-01 15:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../using/cmdline.rst:9
msgid "Command line and environment"
msgstr ""

#: ../../using/cmdline.rst:11
msgid "The CPython interpreter scans the command line and the environment for various settings."
msgstr ""

#: ../../using/cmdline.rst:16
msgid "Other implementations' command line schemes may differ.  See :ref:`implementations` for further resources."
msgstr ""

#: ../../using/cmdline.rst:23
msgid "Command line"
msgstr ""

#: ../../using/cmdline.rst:25
msgid "When invoking Python, you may specify any of these options::"
msgstr ""

#: ../../using/cmdline.rst:29
msgid "The most common use case is, of course, a simple invocation of a script::"
msgstr ""

#: ../../using/cmdline.rst:37
msgid "Interface options"
msgstr ""

#: ../../using/cmdline.rst:39
msgid "The interpreter interface resembles that of the UNIX shell, but provides some additional methods of invocation:"
msgstr ""

#: ../../using/cmdline.rst:42
msgid "When called with standard input connected to a tty device, it prompts for commands and executes them until an EOF (an end-of-file character, you can produce that with :kbd:`Ctrl-D` on UNIX or :kbd:`Ctrl-Z, Enter` on Windows) is read."
msgstr ""

#: ../../using/cmdline.rst:45
msgid "When called with a file name argument or with a file as standard input, it reads and executes a script from that file."
msgstr ""

#: ../../using/cmdline.rst:47
msgid "When called with a directory name argument, it reads and executes an appropriately named script from that directory."
msgstr ""

#: ../../using/cmdline.rst:49
msgid "When called with ``-c command``, it executes the Python statement(s) given as *command*.  Here *command* may contain multiple statements separated by newlines. Leading whitespace is significant in Python statements!"
msgstr ""

#: ../../using/cmdline.rst:52
msgid "When called with ``-m module-name``, the given module is located on the Python module path and executed as a script."
msgstr ""

#: ../../using/cmdline.rst:55
msgid "In non-interactive mode, the entire input is parsed before it is executed."
msgstr ""

#: ../../using/cmdline.rst:57
msgid "An interface option terminates the list of options consumed by the interpreter, all consecutive arguments will end up in :data:`sys.argv` -- note that the first element, subscript zero (``sys.argv[0]``), is a string reflecting the program's source."
msgstr ""

#: ../../using/cmdline.rst:64
msgid "Execute the Python code in *command*.  *command* can be one or more statements separated by newlines, with significant leading whitespace as in normal module code."
msgstr ""

#: ../../using/cmdline.rst:68
msgid "If this option is given, the first element of :data:`sys.argv` will be ``\"-c\"`` and the current directory will be added to the start of :data:`sys.path` (allowing modules in that directory to be imported as top level modules)."
msgstr ""

#: ../../using/cmdline.rst:76
msgid "Search :data:`sys.path` for the named module and execute its contents as the :mod:`__main__` module."
msgstr ""

#: ../../using/cmdline.rst:79
msgid "Since the argument is a *module* name, you must not give a file extension (``.py``).  The ``module-name`` should be a valid Python module name, but the implementation may not always enforce this (e.g. it may allow you to use a name that includes a hyphen)."
msgstr ""

#: ../../using/cmdline.rst:84
msgid "Package names are also permitted. When a package name is supplied instead of a normal module, the interpreter will execute ``<pkg>.__main__`` as the main module. This behaviour is deliberately similar to the handling of directories and zipfiles that are passed to the interpreter as the script argument."
msgstr ""

#: ../../using/cmdline.rst:92
msgid "This option cannot be used with built-in modules and extension modules written in C, since they do not have Python module files. However, it can still be used for precompiled modules, even if the original source file is not available."
msgstr ""

#: ../../using/cmdline.rst:97
msgid "If this option is given, the first element of :data:`sys.argv` will be the full path to the module file. As with the :option:`-c` option, the current directory will be added to the start of :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:101
msgid "Many standard library modules contain code that is invoked on their execution as a script.  An example is the :mod:`timeit` module::"
msgstr ""

#: ../../using/cmdline.rst:109
msgid ":func:`runpy.run_module`"
msgstr ""

#: ../../using/cmdline.rst:109
#: ../../using/cmdline.rst:135
msgid "Equivalent functionality directly available to Python code"
msgstr ""

#: ../../using/cmdline.rst:111
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ""

#: ../../using/cmdline.rst:115
msgid "The named module can now be located inside a package."
msgstr ""

#: ../../using/cmdline.rst:118
msgid "Supply the package name to run a ``__main__`` submodule. sys.argv[0] is now set to ``\"-m\"`` while searching for the module (it was previously incorrectly set to ``\"-c\"``)"
msgstr ""

#: ../../using/cmdline.rst:126
msgid "Read commands from standard input (:data:`sys.stdin`).  If standard input is a terminal, :option:`-i` is implied."
msgstr ""

#: ../../using/cmdline.rst:129
msgid "If this option is given, the first element of :data:`sys.argv` will be ``\"-\"`` and the current directory will be added to the start of :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:134
msgid ":func:`runpy.run_path`"
msgstr ""

#: ../../using/cmdline.rst:140
msgid "Execute the Python code contained in *script*, which must be a filesystem path (absolute or relative) referring to either a Python file, a directory containing a ``__main__.py`` file, or a zipfile containing a ``__main__.py`` file."
msgstr ""

#: ../../using/cmdline.rst:145
msgid "If this option is given, the first element of :data:`sys.argv` will be the script name as given on the command line."
msgstr ""

#: ../../using/cmdline.rst:148
msgid "If the script name refers directly to a Python file, the directory containing that file is added to the start of :data:`sys.path`, and the file is executed as the :mod:`__main__` module."
msgstr ""

#: ../../using/cmdline.rst:152
msgid "If the script name refers to a directory or zipfile, the script name is added to the start of :data:`sys.path` and the ``__main__.py`` file in that location is executed as the :mod:`__main__` module."
msgstr ""

#: ../../using/cmdline.rst:156
msgid "Directories and zipfiles containing a ``__main__.py`` file at the top level are now considered valid Python scripts."
msgstr ""

#: ../../using/cmdline.rst:160
msgid "If no interface option is given, :option:`-i` is implied, ``sys.argv[0]`` is an empty string (``\"\"``) and the current directory will be added to the start of :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:164
msgid ":ref:`tut-invoking`"
msgstr ""

#: ../../using/cmdline.rst:168
msgid "Generic options"
msgstr ""

#: ../../using/cmdline.rst:174
msgid "Print a short description of all command line options."
msgstr ""

#: ../../using/cmdline.rst:176
msgid "The ``--help`` variant."
msgstr ""

#: ../../using/cmdline.rst:183
msgid "Print the Python version number and exit.  Example output could be::"
msgstr ""

#: ../../using/cmdline.rst:187
msgid "The ``--version`` variant."
msgstr ""

#: ../../using/cmdline.rst:192
msgid "Miscellaneous options"
msgstr ""

#: ../../using/cmdline.rst:196
msgid "Issue a warning when comparing :class:`unicode` with :class:`bytearray`. Issue an error when the option is given twice (:option:`!-bb`)."
msgstr ""

#: ../../using/cmdline.rst:199
msgid "Note that, unlike the corresponding Python 3.x flag, this will **not** emit warnings for comparisons between :class:`str` and :class:`unicode`. Instead, the ``str`` instance will be implicitly decoded to ``unicode`` and Unicode comparison used."
msgstr ""

#: ../../using/cmdline.rst:209
msgid "If given, Python won't try to write ``.pyc`` or ``.pyo`` files on the import of source modules.  See also :envvar:`PYTHONDONTWRITEBYTECODE`."
msgstr ""

#: ../../using/cmdline.rst:217
msgid "Turn on parser debugging output (for wizards only, depending on compilation options).  See also :envvar:`PYTHONDEBUG`."
msgstr ""

#: ../../using/cmdline.rst:223
msgid "Ignore all :envvar:`PYTHON*` environment variables, e.g. :envvar:`PYTHONPATH` and :envvar:`PYTHONHOME`, that might be set."
msgstr ""

#: ../../using/cmdline.rst:231
msgid "When a script is passed as first argument or the :option:`-c` option is used, enter interactive mode after executing the script or the command, even when :data:`sys.stdin` does not appear to be a terminal.  The :envvar:`PYTHONSTARTUP` file is not read."
msgstr ""

#: ../../using/cmdline.rst:236
msgid "This can be useful to inspect global variables or a stack trace when a script raises an exception.  See also :envvar:`PYTHONINSPECT`."
msgstr ""

#: ../../using/cmdline.rst:243
msgid "Turn on basic optimizations.  This changes the filename extension for compiled (:term:`bytecode`) files from ``.pyc`` to ``.pyo``.  See also :envvar:`PYTHONOPTIMIZE`."
msgstr ""

#: ../../using/cmdline.rst:250
msgid "Discard docstrings in addition to the :option:`-O` optimizations."
msgstr ""

#: ../../using/cmdline.rst:255
msgid "Division control. The argument must be one of the following:"
msgstr ""

#: ../../using/cmdline.rst:257
msgid "``old``"
msgstr ""

#: ../../using/cmdline.rst:258
msgid "division of int/int and long/long return an int or long (*default*)"
msgstr ""

#: ../../using/cmdline.rst:260
msgid "``new``"
msgstr ""

#: ../../using/cmdline.rst:260
msgid "new division semantics, i.e. division of int/int and long/long returns a float"
msgstr ""

#: ../../using/cmdline.rst:262
msgid "``warn``"
msgstr ""

#: ../../using/cmdline.rst:263
msgid "old division semantics with a warning for int/int and long/long"
msgstr ""

#: ../../using/cmdline.rst:265
msgid "``warnall``"
msgstr ""

#: ../../using/cmdline.rst:265
msgid "old division semantics with a warning for all uses of the division operator"
msgstr ""

#: ../../using/cmdline.rst:269
msgid ":file:`Tools/scripts/fixdiv.py`"
msgstr ""

#: ../../using/cmdline.rst:269
msgid "for a use of ``warnall``"
msgstr ""

#: ../../using/cmdline.rst:271
msgid ":pep:`238` -- Changing the division operator"
msgstr ""

#: ../../using/cmdline.rst:276
msgid "Turn on hash randomization, so that the :meth:`__hash__` values of str, bytes and datetime objects are \"salted\" with an unpredictable random value. Although they remain constant within an individual Python process, they are not predictable between repeated invocations of Python."
msgstr ""

#: ../../using/cmdline.rst:281
msgid "This is intended to provide protection against a denial-of-service caused by carefully-chosen inputs that exploit the worst case performance of a dict construction, O(n^2) complexity.  See http://www.ocert.org/advisories/ocert-2011-003.html for details."
msgstr ""

#: ../../using/cmdline.rst:286
msgid "Changing hash values affects the order in which keys are retrieved from a dict.  Although Python has never made guarantees about this ordering (and it typically varies between 32-bit and 64-bit builds), enough real-world code implicitly relies on this non-guaranteed behavior that the randomization is disabled by default."
msgstr ""

#: ../../using/cmdline.rst:292
msgid "See also :envvar:`PYTHONHASHSEED`."
msgstr ""

#: ../../using/cmdline.rst:299
msgid "Don't add the :data:`user site-packages directory <site.USER_SITE>` to :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:306
#: ../../using/cmdline.rst:600
#: ../../using/cmdline.rst:614
msgid ":pep:`370` -- Per user site-packages directory"
msgstr ""

#: ../../using/cmdline.rst:311
msgid "Disable the import of the module :mod:`site` and the site-dependent manipulations of :data:`sys.path` that it entails."
msgstr ""

#: ../../using/cmdline.rst:317
msgid "Issue a warning when a source file mixes tabs and spaces for indentation in a way that makes it depend on the worth of a tab expressed in spaces.  Issue an error when the option is given twice (:option:`!-tt`)."
msgstr ""

#: ../../using/cmdline.rst:324
msgid "Force stdin, stdout and stderr to be totally unbuffered.  On systems where it matters, also put stdin, stdout and stderr in binary mode."
msgstr ""

#: ../../using/cmdline.rst:327
msgid "Note that there is internal buffering in :meth:`file.readlines` and :ref:`bltin-file-objects` (``for line in sys.stdin``) which is not influenced by this option.  To work around this, you will want to use :meth:`file.readline` inside a ``while 1:`` loop."
msgstr ""

#: ../../using/cmdline.rst:332
msgid "See also :envvar:`PYTHONUNBUFFERED`."
msgstr ""

#: ../../using/cmdline.rst:337
msgid "Print a message each time a module is initialized, showing the place (filename or built-in module) from which it is loaded.  When given twice (:option:`!-vv`), print a message for each file that is checked for when searching for a module.  Also provides information on module cleanup at exit. See also :envvar:`PYTHONVERBOSE`."
msgstr ""

#: ../../using/cmdline.rst:346
msgid "Warning control.  Python's warning machinery by default prints warning messages to :data:`sys.stderr`.  A typical warning message has the following form::"
msgstr ""

#: ../../using/cmdline.rst:352
msgid "By default, each warning is printed once for each source line where it occurs.  This option controls how often warnings are printed."
msgstr ""

#: ../../using/cmdline.rst:355
msgid "Multiple :option:`-W` options may be given; when a warning matches more than one option, the action for the last matching option is performed.  Invalid :option:`-W` options are ignored (though, a warning message is printed about invalid options when the first warning is issued)."
msgstr ""

#: ../../using/cmdline.rst:360
msgid "Starting from Python 2.7, :exc:`DeprecationWarning` and its descendants are ignored by default.  The :option:`!-Wd` option can be used to re-enable them."
msgstr ""

#: ../../using/cmdline.rst:364
msgid "Warnings can also be controlled from within a Python program using the :mod:`warnings` module."
msgstr ""

#: ../../using/cmdline.rst:367
msgid "The simplest form of argument is one of the following action strings (or a unique abbreviation) by themselves:"
msgstr ""

#: ../../using/cmdline.rst:370
msgid "``ignore``"
msgstr ""

#: ../../using/cmdline.rst:371
msgid "Ignore all warnings."
msgstr ""

#: ../../using/cmdline.rst:373
msgid "``default``"
msgstr ""

#: ../../using/cmdline.rst:373
msgid "Explicitly request the default behavior (printing each warning once per source line)."
msgstr ""

#: ../../using/cmdline.rst:377
msgid "``all``"
msgstr ""

#: ../../using/cmdline.rst:376
msgid "Print a warning each time it occurs (this may generate many messages if a warning is triggered repeatedly for the same source line, such as inside a loop)."
msgstr ""

#: ../../using/cmdline.rst:379
msgid "``module``"
msgstr ""

#: ../../using/cmdline.rst:380
msgid "Print each warning only the first time it occurs in each module."
msgstr ""

#: ../../using/cmdline.rst:381
msgid "``once``"
msgstr ""

#: ../../using/cmdline.rst:382
msgid "Print each warning only the first time it occurs in the program."
msgstr ""

#: ../../using/cmdline.rst:384
msgid "``error``"
msgstr ""

#: ../../using/cmdline.rst:384
msgid "Raise an exception instead of printing a warning message."
msgstr ""

#: ../../using/cmdline.rst:386
msgid "The full form of argument is::"
msgstr ""

#: ../../using/cmdline.rst:390
msgid "Here, *action* is as explained above but only applies to messages that match the remaining fields.  Empty fields match all values; trailing empty fields may be omitted.  The *message* field matches the start of the warning message printed; this match is case-insensitive.  The *category* field matches the warning category.  This must be a class name; the match tests whether the actual warning category of the message is a subclass of the specified warning category.  The full class name must be given.  The *module* field matches the (fully-qualified) module name; this match is case-sensitive.  The *line* field matches the line number, where zero matches all line numbers and is thus equivalent to an omitted line number."
msgstr ""

#: ../../using/cmdline.rst:402
msgid ":mod:`warnings` -- the warnings module"
msgstr ""

#: ../../using/cmdline.rst:404
msgid ":pep:`230` -- Warning framework"
msgstr ""

#: ../../using/cmdline.rst:406
msgid ":envvar:`PYTHONWARNINGS`"
msgstr ""

#: ../../using/cmdline.rst:411
msgid "Skip the first line of the source, allowing use of non-Unix forms of ``#!cmd``.  This is intended for a DOS specific hack only."
msgstr ""

#: ../../using/cmdline.rst:416
msgid "Warn about Python 3.x possible incompatibilities by emitting a :exc:`DeprecationWarning` for features that are removed or significantly changed in Python 3 and can't be detected using static code analysis."
msgstr ""

#: ../../using/cmdline.rst:422
msgid "See :doc:`/howto/pyporting` for more details."
msgstr ""

#: ../../using/cmdline.rst:425
msgid "Options you shouldn't use"
msgstr ""

#: ../../using/cmdline.rst:429
msgid "Reserved for use by Jython_."
msgstr ""

#: ../../using/cmdline.rst:435
msgid "Turns all string literals into unicodes globally.  Do not be tempted to use this option as it will probably break your world.  It also produces ``.pyc`` files with a different magic number than normal.  Instead, you can enable unicode literals on a per-module basis by using::"
msgstr ""

#: ../../using/cmdline.rst:442
msgid "at the top of the file.  See :mod:`__future__` for details."
msgstr ""

#: ../../using/cmdline.rst:446
msgid "Reserved for alternative implementations of Python to use for their own purposes."
msgstr ""

#: ../../using/cmdline.rst:452
msgid "Environment variables"
msgstr ""

#: ../../using/cmdline.rst:454
msgid "These environment variables influence Python's behavior, they are processed before the command-line switches other than -E.  It is customary that command-line switches override environmental variables where there is a conflict."
msgstr ""

#: ../../using/cmdline.rst:461
msgid "Change the location of the standard Python libraries.  By default, the libraries are searched in :file:`{prefix}/lib/python{version}` and :file:`{exec_prefix}/lib/python{version}`, where :file:`{prefix}` and :file:`{exec_prefix}` are installation-dependent directories, both defaulting to :file:`/usr/local`."
msgstr ""

#: ../../using/cmdline.rst:467
msgid "When :envvar:`PYTHONHOME` is set to a single directory, its value replaces both :file:`{prefix}` and :file:`{exec_prefix}`.  To specify different values for these, set :envvar:`PYTHONHOME` to :file:`{prefix}:{exec_prefix}`."
msgstr ""

#: ../../using/cmdline.rst:474
msgid "Augment the default search path for module files.  The format is the same as the shell's :envvar:`PATH`: one or more directory pathnames separated by :data:`os.pathsep` (e.g. colons on Unix or semicolons on Windows). Non-existent directories are silently ignored."
msgstr ""

#: ../../using/cmdline.rst:479
msgid "In addition to normal directories, individual :envvar:`PYTHONPATH` entries may refer to zipfiles containing pure Python modules (in either source or compiled form). Extension modules cannot be imported from zipfiles."
msgstr ""

#: ../../using/cmdline.rst:483
msgid "The default search path is installation dependent, but generally begins with :file:`{prefix}/lib/python{version}` (see :envvar:`PYTHONHOME` above).  It is *always* appended to :envvar:`PYTHONPATH`."
msgstr ""

#: ../../using/cmdline.rst:487
msgid "An additional directory will be inserted in the search path in front of :envvar:`PYTHONPATH` as described above under :ref:`using-on-interface-options`. The search path can be manipulated from within a Python program as the variable :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:495
msgid "If this is the name of a readable file, the Python commands in that file are executed before the first prompt is displayed in interactive mode.  The file is executed in the same namespace where interactive commands are executed so that objects defined or imported in it can be used without qualification in the interactive session.  You can also change the prompts :data:`sys.ps1` and :data:`sys.ps2` in this file."
msgstr ""

#: ../../using/cmdline.rst:505
msgid "Set this to a non-empty string to cause the :mod:`time` module to require dates specified as strings to include 4-digit years, otherwise 2-digit years are converted based on rules described in the :mod:`time` module documentation."
msgstr ""

#: ../../using/cmdline.rst:513
msgid "If this is set to a non-empty string it is equivalent to specifying the :option:`-O` option.  If set to an integer, it is equivalent to specifying :option:`-O` multiple times."
msgstr ""

#: ../../using/cmdline.rst:520
msgid "If this is set to a non-empty string it is equivalent to specifying the :option:`-d` option.  If set to an integer, it is equivalent to specifying :option:`-d` multiple times."
msgstr ""

#: ../../using/cmdline.rst:527
msgid "If this is set to a non-empty string it is equivalent to specifying the :option:`-i` option."
msgstr ""

#: ../../using/cmdline.rst:530
msgid "This variable can also be modified by Python code using :data:`os.environ` to force inspect mode on program termination."
msgstr ""

#: ../../using/cmdline.rst:536
msgid "If this is set to a non-empty string it is equivalent to specifying the :option:`-u` option."
msgstr ""

#: ../../using/cmdline.rst:542
msgid "If this is set to a non-empty string it is equivalent to specifying the :option:`-v` option.  If set to an integer, it is equivalent to specifying :option:`-v` multiple times."
msgstr ""

#: ../../using/cmdline.rst:549
msgid "If this is set, Python ignores case in :keyword:`import` statements.  This only works on Windows, OS X, OS/2, and RiscOS."
msgstr ""

#: ../../using/cmdline.rst:555
msgid "If this is set, Python won't try to write ``.pyc`` or ``.pyo`` files on the import of source modules.  This is equivalent to specifying the :option:`-B` option."
msgstr ""

#: ../../using/cmdline.rst:563
msgid "If this variable is set to ``random``, the effect is the same as specifying the :option:`-R` option: a random value is used to seed the hashes of str, bytes and datetime objects."
msgstr ""

#: ../../using/cmdline.rst:567
msgid "If :envvar:`PYTHONHASHSEED` is set to an integer value, it is used as a fixed seed for generating the hash() of the types covered by the hash randomization."
msgstr ""

#: ../../using/cmdline.rst:571
msgid "Its purpose is to allow repeatable hashing, such as for selftests for the interpreter itself, or to allow a cluster of python processes to share hash values."
msgstr ""

#: ../../using/cmdline.rst:575
msgid "The integer must be a decimal number in the range [0,4294967295]. Specifying the value 0 will lead to the same hash values as when hash randomization is disabled."
msgstr ""

#: ../../using/cmdline.rst:584
msgid "Overrides the encoding used for stdin/stdout/stderr, in the syntax ``encodingname:errorhandler``.  The ``:errorhandler`` part is optional and has the same meaning as in :func:`str.encode`."
msgstr ""

#: ../../using/cmdline.rst:593
msgid "If this is set, Python won't add the :data:`user site-packages directory <site.USER_SITE>` to :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:605
msgid "Defines the :data:`user base directory <site.USER_BASE>`, which is used to compute the path of the :data:`user site-packages directory <site.USER_SITE>` and :ref:`Distutils installation paths <inst-alt-install-user>` for ``python setup.py install --user``."
msgstr ""

#: ../../using/cmdline.rst:619
msgid "If this environment variable is set, ``sys.argv[0]`` will be set to its value instead of the value got through the C runtime.  Only works on Mac OS X."
msgstr ""

#: ../../using/cmdline.rst:625
msgid "This is equivalent to the :option:`-W` option. If set to a comma separated string, it is equivalent to specifying :option:`-W` multiple times."
msgstr ""

#: ../../using/cmdline.rst:632
msgid "If this environment variable is set specifically to ``0``, then it is equivalent to implicitly calling :func:`ssl._https_verify_certificates` with ``enable=False`` when :mod:`ssl` is first imported."
msgstr ""

#: ../../using/cmdline.rst:636
msgid "Refer to the documentation of :func:`ssl._https_verify_certificates` for details."
msgstr ""

#: ../../using/cmdline.rst:642
msgid "Debug-mode variables"
msgstr ""

#: ../../using/cmdline.rst:644
msgid "Setting these variables only has an effect in a debug build of Python, that is, if Python was configured with the ``--with-pydebug`` build option."
msgstr ""

#: ../../using/cmdline.rst:649
msgid "If set, Python will print threading debug info."
msgstr ""

#: ../../using/cmdline.rst:651
msgid "Previously, this variable was called ``THREADDEBUG``."
msgstr ""

#: ../../using/cmdline.rst:656
msgid "If set, Python will dump objects and reference counts still alive after shutting down the interpreter."
msgstr ""

#: ../../using/cmdline.rst:662
msgid "If set, Python will print memory allocation statistics every time a new object arena is created, and on shutdown."
msgstr ""

#: ../../using/cmdline.rst:667
msgid "If set and Python was compiled with ``COUNT_ALLOCS`` defined, Python will dump allocations counts into stderr on shutdown."
msgstr ""

#: ../../using/cmdline.rst:674
msgid "If set, Python will print the total reference count when the program finishes or after each statement in the interactive interpreter."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-16 12:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:7
msgid "Using Python on Windows"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:12
msgid "This document aims to give an overview of Windows-specific behaviour you should know about when using Python on Microsoft Windows."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:15
msgid "Unlike most Unix systems and services, Windows does not include a system supported installation of Python. To make Python available, the CPython team has compiled Windows installers (MSI packages) with every `release <https://www.python.org/download/releases/>`_ for many years. These installers are primarily intended to add a per-user installation of Python, with the core interpreter and library being used by a single user. The installer is also able to install for all users of a single machine, and a separate ZIP file is available for application-local distributions."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:24
msgid "As specified in :pep:`11`, a Python release only supports a Windows platform while Microsoft considers the platform under extended support. This means that Python |version| supports Windows Vista and newer. If you require Windows XP support then please install Python 3.4."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:29
msgid "There are a number of different installers available for Windows, each with certain benefits and downsides."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:32
msgid ":ref:`windows-full` contains all components and is the best option for developers using Python for any kind of project."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:35
msgid ":ref:`windows-store` is a simple installation of Python that is suitable for running scripts and packages, and using IDLE or other development environments. It requires Windows 10, but can be safely installed without corrupting other programs. It also provides many convenient commands for launching Python and its tools."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:41
msgid ":ref:`windows-nuget` are lightweight installations intended for continuous integration systems. It can be used to build Python packages or run scripts, but is not updateable and has no user interface tools."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:45
msgid ":ref:`windows-embeddable` is a minimal package of Python suitable for embedding into a larger application."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:52
msgid "The full installer"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:55
msgid "Installation steps"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:57
msgid "Four Python |version| installers are available for download - two each for the 32-bit and 64-bit versions of the interpreter. The *web installer* is a small initial download, and it will automatically download the required components as necessary. The *offline installer* includes the components necessary for a default installation and only requires an internet connection for optional features. See :ref:`install-layout-option` for other ways to avoid downloading during installation."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:65
msgid "After starting the installer, one of two options may be selected:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:69
msgid "If you select \"Install Now\":"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:71
msgid "You will *not* need to be an administrator (unless a system update for the C Runtime Library is required or you install the :ref:`launcher` for all users)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:74
msgid "Python will be installed into your user directory"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:75
msgid "The :ref:`launcher` will be installed according to the option at the bottom of the first page"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:77
msgid "The standard library, test suite, launcher and pip will be installed"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:78
msgid "If selected, the install directory will be added to your :envvar:`PATH`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:79
msgid "Shortcuts will only be visible for the current user"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:81
msgid "Selecting \"Customize installation\" will allow you to select the features to install, the installation location and other options or post-install actions. To install debugging symbols or binaries, you will need to use this option."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:85
msgid "To perform an all-users installation, you should select \"Customize installation\". In this case:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:88
msgid "You may be required to provide administrative credentials or approval"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:89
msgid "Python will be installed into the Program Files directory"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:90
msgid "The :ref:`launcher` will be installed into the Windows directory"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:91
msgid "Optional features may be selected during installation"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:92
msgid "The standard library can be pre-compiled to bytecode"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:93
msgid "If selected, the install directory will be added to the system :envvar:`PATH`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:94
msgid "Shortcuts are available for all users"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:99
msgid "Removing the MAX_PATH Limitation"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:101
msgid "Windows historically has limited path lengths to 260 characters. This meant that paths longer than this would not resolve and errors would result."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:104
msgid "In the latest versions of Windows, this limitation can be expanded to approximately 32,000 characters. Your administrator will need to activate the \"Enable Win32 long paths\" group policy, or set the registry value ``HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem@LongPathsEnabled`` to ``1``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:110
msgid "This allows the :func:`open` function, the :mod:`os` module and most other path functionality to accept and return paths longer than 260 characters when using strings. (Use of bytes as paths is deprecated on Windows, and this feature is not available when using bytes.)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:115
msgid "After changing the above option, no further configuration is required."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:119
msgid "Support for long paths was enabled in Python."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:124
msgid "Installing Without UI"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:126
msgid "All of the options available in the installer UI can also be specified from the command line, allowing scripted installers to replicate an installation on many machines without user interaction.  These options may also be set without suppressing the UI in order to change some of the defaults."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:131
msgid "To completely hide the installer UI and install Python silently, pass the ``/quiet`` option. To skip past the user interaction but still display progress and errors, pass the ``/passive`` option. The ``/uninstall`` option may be passed to immediately begin removing Python - no prompt will be displayed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:137
msgid "All other options are passed as ``name=value``, where the value is usually ``0`` to disable a feature, ``1`` to enable a feature, or a path. The full list of available options is shown below."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:142
msgid "Name"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:142
msgid "Description"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:142
msgid "Default"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:144
msgid "InstallAllUsers"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:144
msgid "Perform a system-wide installation."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:144
#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:167
#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:170
#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:179
#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:197
#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:205
#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:208
msgid "0"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:146
msgid "TargetDir"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:146
msgid "The installation directory"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:146
msgid "Selected based on InstallAllUsers"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:149
msgid "DefaultAllUsersTargetDir"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:149
msgid "The default installation directory for all-user installs"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:149
msgid ":file:`%ProgramFiles%\\\\\\ Python X.Y` or :file:`\\ %ProgramFiles(x86)%\\\\\\ Python X.Y`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:154
msgid "DefaultJustForMeTargetDir"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:154
msgid "The default install directory for just-for-me installs"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:154
msgid ":file:`%LocalAppData%\\\\\\ Programs\\\\PythonXY` or :file:`%LocalAppData%\\\\\\ Programs\\\\PythonXY-32` or :file:`%LocalAppData%\\\\\\ Programs\\\\PythonXY-64`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:161
msgid "DefaultCustomTargetDir"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:161
msgid "The default custom install directory displayed in the UI"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:161
#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:210
msgid "(empty)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:164
msgid "AssociateFiles"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:164
msgid "Create file associations if the launcher is also installed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:164
#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:174
#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:177
#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:181
#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:184
#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:187
#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:189
#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:192
#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:195
#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:199
#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:201
#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:203
msgid "1"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:167
msgid "CompileAll"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:167
msgid "Compile all ``.py`` files to ``.pyc``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:170
msgid "PrependPath"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:170
msgid "Add install and Scripts directories to :envvar:`PATH` and ``.PY`` to :envvar:`PATHEXT`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:174
msgid "Shortcuts"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:174
msgid "Create shortcuts for the interpreter, documentation and IDLE if installed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:177
msgid "Include_doc"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:177
msgid "Install Python manual"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:179
msgid "Include_debug"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:179
msgid "Install debug binaries"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:181
msgid "Include_dev"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:181
msgid "Install developer headers and libraries"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:184
msgid "Include_exe"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:184
msgid "Install :file:`python.exe` and related files"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:187
msgid "Include_launcher"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:187
msgid "Install :ref:`launcher`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:189
msgid "InstallLauncherAllUsers"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:189
msgid "Installs :ref:`launcher` for all users."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:192
msgid "Include_lib"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:192
msgid "Install standard library and extension modules"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:195
msgid "Include_pip"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:195
msgid "Install bundled pip and setuptools"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:197
msgid "Include_symbols"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:197
msgid "Install debugging symbols (`*`.pdb)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:199
msgid "Include_tcltk"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:199
msgid "Install Tcl/Tk support and IDLE"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:201
msgid "Include_test"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:201
msgid "Install standard library test suite"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:203
msgid "Include_tools"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:203
msgid "Install utility scripts"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:205
msgid "LauncherOnly"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:205
msgid "Only installs the launcher. This will override most other options."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:208
msgid "SimpleInstall"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:208
msgid "Disable most install UI"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:210
msgid "SimpleInstallDescription"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:210
msgid "A custom message to display when the simplified install UI is used."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:214
msgid "For example, to silently install a default, system-wide Python installation, you could use the following command (from an elevated command prompt)::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:219
msgid "To allow users to easily install a personal copy of Python without the test suite, you could provide a shortcut with the following command. This will display a simplified initial page and disallow customization::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:226
msgid "(Note that omitting the launcher also omits file associations, and is only recommended for per-user installs when there is also a system-wide installation that included the launcher.)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:230
msgid "The options listed above can also be provided in a file named ``unattend.xml`` alongside the executable. This file specifies a list of options and values. When a value is provided as an attribute, it will be converted to a number if possible. Values provided as element text are always left as strings. This example file sets the same options as the previous example:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:249
msgid "Installing Without Downloading"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:251
msgid "As some features of Python are not included in the initial installer download, selecting those features may require an internet connection.  To avoid this need, all possible components may be downloaded on-demand to create a complete *layout* that will no longer require an internet connection regardless of the selected features. Note that this download may be bigger than required, but where a large number of installations are going to be performed it is very useful to have a locally cached copy."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:259
msgid "Execute the following command from Command Prompt to download all possible required files.  Remember to substitute ``python-3.8.0.exe`` for the actual name of your installer, and to create layouts in their own directories to avoid collisions between files with the same name."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:268
msgid "You may also specify the ``/quiet`` option to hide the progress display."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:271
msgid "Modifying an install"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:273
msgid "Once Python has been installed, you can add or remove features through the Programs and Features tool that is part of Windows. Select the Python entry and choose \"Uninstall/Change\" to open the installer in maintenance mode."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:277
msgid "\"Modify\" allows you to add or remove features by modifying the checkboxes - unchanged checkboxes will not install or remove anything. Some options cannot be changed in this mode, such as the install directory; to modify these, you will need to remove and then reinstall Python completely."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:282
msgid "\"Repair\" will verify all the files that should be installed using the current settings and replace any that have been removed or modified."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:285
msgid "\"Uninstall\" will remove Python entirely, with the exception of the :ref:`launcher`, which has its own entry in Programs and Features."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:292
msgid "The Microsoft Store package"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:296
msgid "The Microsoft Store package is an easily installable Python interpreter that is intended mainly for interactive use, for example, by students."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:299
msgid "To install the package, ensure you have the latest Windows 10 updates and search the Microsoft Store app for \"Python |version|\". Ensure that the app you select is published by the Python Software Foundation, and install it."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:304
msgid "Python will always be available for free on the Microsoft Store. If you are asked to pay for it, you have not selected the correct package."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:307
msgid "After installation, Python may be launched by finding it in Start. Alternatively, it will be available from any Command Prompt or PowerShell session by typing ``python``. Further, pip and IDLE may be used by typing ``pip`` or ``idle``. IDLE can also be found in Start."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:312
msgid "All three commands are also available with version number suffixes, for example, as ``python3.exe`` and ``python3.x.exe`` as well as ``python.exe`` (where ``3.x`` is the specific version you want to launch, such as |version|). Open \"Manage App Execution Aliases\" through Start to select which version of Python is associated with each command. It is recommended to make sure that ``pip`` and ``idle`` are consistent with whichever version of ``python`` is selected."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:320
msgid "Virtual environments can be created with ``python -m venv`` and activated and used as normal."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:323
msgid "If you have installed another version of Python and added it to your ``PATH`` variable, it will be available as ``python.exe`` rather than the one from the Microsoft Store. To access the new installation, use ``python3.exe`` or ``python3.x.exe``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:328
msgid "The ``py.exe`` launcher will detect this Python installation, but will prefer installations from the traditional installer."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:331
msgid "To remove Python, open Settings and use Apps and Features, or else find Python in Start and right-click to select Uninstall. Uninstalling will remove all packages you installed directly into this Python installation, but will not remove any virtual environments"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:337
msgid "Known Issues"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:339
msgid "Because of restrictions on Microsoft Store apps, Python scripts may not have full write access to shared locations such as ``TEMP`` and the registry. Instead, it will write to a private copy. If your scripts must modify the shared locations, you will need to install the full installer."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:348
msgid "The nuget.org packages"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:352
msgid "The nuget.org package is a reduced size Python environment intended for use on continuous integration and build systems that do not have a system-wide install of Python. While nuget is \"the package manager for .NET\", it also works perfectly fine for packages containing build-time tools."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:357
msgid "Visit `nuget.org <https://www.nuget.org/>`_ for the most up-to-date information on using nuget. What follows is a summary that is sufficient for Python developers."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:361
msgid "The ``nuget.exe`` command line tool may be downloaded directly from ``https://aka.ms/nugetclidl``, for example, using curl or PowerShell. With the tool, the latest version of Python for 64-bit or 32-bit machines is installed using::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:369
msgid "To select a particular version, add a ``-Version 3.x.y``. The output directory may be changed from ``.``, and the package will be installed into a subdirectory. By default, the subdirectory is named the same as the package, and without the ``-ExcludeVersion`` option this name will include the specific version installed. Inside the subdirectory is a ``tools`` directory that contains the Python installation::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:384
msgid "In general, nuget packages are not upgradeable, and newer versions should be installed side-by-side and referenced using the full path. Alternatively, delete the package directory manually and install it again. Many CI systems will do this automatically if they do not preserve files between builds."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:389
msgid "Alongside the ``tools`` directory is a ``build\\native`` directory. This contains a MSBuild properties file ``python.props`` that can be used in a C++ project to reference the Python install. Including the settings will automatically use the headers and import libraries in your build."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:394
msgid "The package information pages on nuget.org are `www.nuget.org/packages/python <https://www.nuget.org/packages/python>`_ for the 64-bit version and `www.nuget.org/packages/pythonx86 <https://www.nuget.org/packages/pythonx86>`_ for the 32-bit version."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:403
msgid "The embeddable package"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:407
msgid "The embedded distribution is a ZIP file containing a minimal Python environment. It is intended for acting as part of another application, rather than being directly accessed by end-users."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:411
msgid "When extracted, the embedded distribution is (almost) fully isolated from the user's system, including environment variables, system registry settings, and installed packages. The standard library is included as pre-compiled and optimized ``.pyc`` files in a ZIP, and ``python3.dll``, ``python37.dll``, ``python.exe`` and ``pythonw.exe`` are all provided. Tcl/tk (including all dependants, such as Idle), pip and the Python documentation are not included."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:420
msgid "The embedded distribution does not include the `Microsoft C Runtime <https://www.microsoft.com/en-us/download/details.aspx?id=48145>`_ and it is the responsibility of the application installer to provide this. The runtime may have already been installed on a user's system previously or automatically via Windows Update, and can be detected by finding ``ucrtbase.dll`` in the system directory."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:427
msgid "Third-party packages should be installed by the application installer alongside the embedded distribution. Using pip to manage dependencies as for a regular Python installation is not supported with this distribution, though with some care it may be possible to include and use pip for automatic updates. In general, third-party packages should be treated as part of the application (\"vendoring\") so that the developer can ensure compatibility with newer versions before providing updates to users."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:435
msgid "The two recommended use cases for this distribution are described below."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:438
msgid "Python Application"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:440
msgid "An application written in Python does not necessarily require users to be aware of that fact. The embedded distribution may be used in this case to include a private version of Python in an install package. Depending on how transparent it should be (or conversely, how professional it should appear), there are two options."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:446
msgid "Using a specialized executable as a launcher requires some coding, but provides the most transparent experience for users. With a customized launcher, there are no obvious indications that the program is running on Python: icons can be customized, company and version information can be specified, and file associations behave properly. In most cases, a custom launcher should simply be able to call ``Py_Main`` with a hard-coded command line."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:453
msgid "The simpler approach is to provide a batch file or generated shortcut that directly calls the ``python.exe`` or ``pythonw.exe`` with the required command-line arguments. In this case, the application will appear to be Python and not its actual name, and users may have trouble distinguishing it from other running Python processes or file associations."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:459
msgid "With the latter approach, packages should be installed as directories alongside the Python executable to ensure they are available on the path. With the specialized launcher, packages can be located in other locations as there is an opportunity to specify the search path before launching the application."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:465
msgid "Embedding Python"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:467
msgid "Applications written in native code often require some form of scripting language, and the embedded Python distribution can be used for this purpose. In general, the majority of the application is in native code, and some part will either invoke ``python.exe`` or directly use ``python3.dll``. For either case, extracting the embedded distribution to a subdirectory of the application installation is sufficient to provide a loadable Python interpreter."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:474
msgid "As with the application use, packages can be installed to any location as there is an opportunity to specify search paths before initializing the interpreter. Otherwise, there is no fundamental differences between using the embedded distribution and a regular installation."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:481
msgid "Alternative bundles"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:483
msgid "Besides the standard CPython distribution, there are modified packages including additional functionality.  The following is a list of popular versions and their key features:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:488
msgid "`ActivePython <https://www.activestate.com/activepython/>`_"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:488
msgid "Installer with multi-platform compatibility, documentation, PyWin32"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:492
msgid "`Anaconda <https://www.anaconda.com/download/>`_"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:491
msgid "Popular scientific modules (such as numpy, scipy and pandas) and the ``conda`` package manager."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:496
msgid "`Canopy <https://www.enthought.com/product/canopy/>`_"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:495
msgid "A \"comprehensive Python analysis environment\" with editors and other development tools."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:500
msgid "`WinPython <https://winpython.github.io/>`_"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:499
msgid "Windows-specific distribution with prebuilt scientific packages and tools for building packages."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:502
msgid "Note that these packages may not include the latest versions of Python or other libraries, and are not maintained or supported by the core Python team."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:508
msgid "Configuring Python"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:510
msgid "To run Python conveniently from a command prompt, you might consider changing some default environment variables in Windows.  While the installer provides an option to configure the PATH and PATHEXT variables for you, this is only reliable for a single, system-wide installation.  If you regularly use multiple versions of Python, consider using the :ref:`launcher`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:520
msgid "Excursus: Setting environment variables"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:522
msgid "Windows allows environment variables to be configured permanently at both the User level and the System level, or temporarily in a command prompt."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:525
msgid "To temporarily set environment variables, open Command Prompt and use the :command:`set` command:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:534
msgid "These changes will apply to any further commands executed in that console, and will be inherited by any applications started from the console."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:537
msgid "Including the variable name within percent signs will expand to the existing value, allowing you to add your new value at either the start or the end. Modifying :envvar:`PATH` by adding the directory containing :program:`python.exe` to the start is a common way to ensure the correct version of Python is launched."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:543
msgid "To permanently modify the default environment variables, click Start and search for 'edit environment variables', or open System properties, :guilabel:`Advanced system settings` and click the :guilabel:`Environment Variables` button. In this dialog, you can add or modify User and System variables. To change System variables, you need non-restricted access to your machine (i.e. Administrator rights)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:552
msgid "Windows will concatenate User variables *after* System variables, which may cause unexpected results when modifying :envvar:`PATH`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:555
msgid "The :envvar:`PYTHONPATH` variable is used by all versions of Python 2 and Python 3, so you should not permanently configure this variable unless it only includes code that is compatible with all of your installed Python versions."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:563
msgid "https://www.microsoft.com/en-us/wdsi/help/folder-variables"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:563
msgid "Environment variables in Windows NT"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:566
msgid "https://technet.microsoft.com/en-us/library/cc754250.aspx"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:566
msgid "The SET command, for temporarily modifying environment variables"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:569
msgid "https://technet.microsoft.com/en-us/library/cc755104.aspx"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:569
msgid "The SETX command, for permanently modifying environment variables"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:572
msgid "https://support.microsoft.com/en-us/help/310519/how-to-manage-environment-variables-in-windows-xp"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:572
msgid "How To Manage Environment Variables in Windows XP"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:574
msgid "https://www.chem.gla.ac.uk/~louis/software/faq/q1.html"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:575
msgid "Setting Environment variables, Louis J. Farrugia"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:580
msgid "Finding the Python executable"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:584
msgid "Besides using the automatically created start menu entry for the Python interpreter, you might want to start Python in the command prompt. The installer has an option to set that up for you."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:588
msgid "On the first page of the installer, an option labelled \"Add Python to PATH\" may be selected to have the installer add the install location into the :envvar:`PATH`.  The location of the :file:`Scripts\\\\` folder is also added. This allows you to type :command:`python` to run the interpreter, and :command:`pip` for the package installer. Thus, you can also execute your scripts with command line options, see :ref:`using-on-cmdline` documentation."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:595
msgid "If you don't enable this option at install time, you can always re-run the installer, select Modify, and enable it.  Alternatively, you can manually modify the :envvar:`PATH` using the directions in :ref:`setting-envvars`.  You need to set your :envvar:`PATH` environment variable to include the directory of your Python installation, delimited by a semicolon from other entries.  An example variable could look like this (assuming the first two entries already existed)::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:608
msgid "Python Launcher for Windows"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:612
msgid "The Python launcher for Windows is a utility which aids in locating and executing of different Python versions.  It allows scripts (or the command-line) to indicate a preference for a specific Python version, and will locate and execute that version."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:617
msgid "Unlike the :envvar:`PATH` variable, the launcher will correctly select the most appropriate version of Python. It will prefer per-user installations over system-wide ones, and orders by language version rather than using the most recently installed version."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:622
msgid "The launcher was originally specified in :pep:`397`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:625
msgid "Getting started"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:628
msgid "From the command-line"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:632
msgid "System-wide installations of Python 3.3 and later will put the launcher on your :envvar:`PATH`. The launcher is compatible with all available versions of Python, so it does not matter which version is installed. To check that the launcher is available, execute the following command in Command Prompt:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:641
msgid "You should find that the latest version of Python you have installed is started - it can be exited as normal, and any additional command-line arguments specified will be sent directly to Python."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:645
msgid "If you have multiple versions of Python installed (e.g., 2.7 and |version|) you will have noticed that Python |version| was started - to launch Python 2.7, try the command:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:653
msgid "If you want the latest version of Python 2.x you have installed, try the command:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:660
msgid "You should find the latest version of Python 2.x starts."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:662
msgid "If you see the following error, you do not have the launcher installed:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:669
msgid "Per-user installations of Python do not add the launcher to :envvar:`PATH` unless the option was selected on installation."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:673
msgid "Virtual environments"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:677
msgid "If the launcher is run with no explicit Python version specification, and a virtual environment (created with the standard library :mod:`venv` module or the external ``virtualenv`` tool) active, the launcher will run the virtual environment's interpreter rather than the global one.  To run the global interpreter, either deactivate the virtual environment, or explicitly specify the global Python version."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:685
msgid "From a script"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:687
msgid "Let's create a test Python script - create a file called ``hello.py`` with the following contents"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:696
msgid "From the directory in which hello.py lives, execute the command:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:702
msgid "You should notice the version number of your latest Python 2.x installation is printed.  Now try changing the first line to be:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:709
msgid "Re-executing the command should now print the latest Python 3.x information. As with the above command-line examples, you can specify a more explicit version qualifier.  Assuming you have Python 2.6 installed, try changing the first line to ``#! python2.6`` and you should find the 2.6 version information printed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:715
msgid "Note that unlike interactive use, a bare \"python\" will use the latest version of Python 2.x that you have installed.  This is for backward compatibility and for compatibility with Unix, where the command ``python`` typically refers to Python 2."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:721
msgid "From file associations"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:723
msgid "The launcher should have been associated with Python files (i.e. ``.py``, ``.pyw``, ``.pyc`` files) when it was installed.  This means that when you double-click on one of these files from Windows explorer the launcher will be used, and therefore you can use the same facilities described above to have the script specify the version which should be used."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:729
msgid "The key benefit of this is that a single launcher can support multiple Python versions at the same time depending on the contents of the first line."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:733
msgid "Shebang Lines"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:735
msgid "If the first line of a script file starts with ``#!``, it is known as a \"shebang\" line.  Linux and other Unix like operating systems have native support for such lines and they are commonly used on such systems to indicate how a script should be executed.  This launcher allows the same facilities to be used with Python scripts on Windows and the examples above demonstrate their use."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:742
msgid "To allow shebang lines in Python scripts to be portable between Unix and Windows, this launcher supports a number of 'virtual' commands to specify which interpreter to use.  The supported virtual commands are:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:746
msgid "``/usr/bin/env python``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:747
msgid "``/usr/bin/python``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:748
msgid "``/usr/local/bin/python``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:749
msgid "``python``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:751
msgid "For example, if the first line of your script starts with"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:757
msgid "The default Python will be located and used.  As many Python scripts written to work on Unix will already have this line, you should find these scripts can be used by the launcher without modification.  If you are writing a new script on Windows which you hope will be useful on Unix, you should use one of the shebang lines starting with ``/usr``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:763
msgid "Any of the above virtual commands can be suffixed with an explicit version (either just the major version, or the major and minor version). Furthermore the 32-bit version can be requested by adding \"-32\" after the minor version. I.e. ``/usr/bin/python2.7-32`` will request usage of the 32-bit python 2.7."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:771
msgid "Beginning with python launcher 3.7 it is possible to request 64-bit version by the \"-64\" suffix. Furthermore it is possible to specify a major and architecture without minor (i.e. ``/usr/bin/python3-64``)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:775
msgid "The ``/usr/bin/env`` form of shebang line has one further special property. Before looking for installed Python interpreters, this form will search the executable :envvar:`PATH` for a Python executable. This corresponds to the behaviour of the Unix ``env`` program, which performs a :envvar:`PATH` search."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:781
msgid "Arguments in shebang lines"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:783
msgid "The shebang lines can also specify additional options to be passed to the Python interpreter.  For example, if you have a shebang line:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:790
msgid "Then Python will be started with the ``-v`` option"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:793
msgid "Customization"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:796
msgid "Customization via INI files"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:798
msgid "Two .ini files will be searched by the launcher - ``py.ini`` in the current user's \"application data\" directory (i.e. the directory returned by calling the Windows function ``SHGetFolderPath`` with ``CSIDL_LOCAL_APPDATA``) and ``py.ini`` in the same directory as the launcher. The same .ini files are used for both the 'console' version of the launcher (i.e. py.exe) and for the 'windows' version (i.e. pyw.exe)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:805
msgid "Customization specified in the \"application directory\" will have precedence over the one next to the executable, so a user, who may not have write access to the .ini file next to the launcher, can override commands in that global .ini file."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:810
msgid "Customizing default Python versions"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:812
msgid "In some cases, a version qualifier can be included in a command to dictate which version of Python will be used by the command. A version qualifier starts with a major version number and can optionally be followed by a period ('.') and a minor version specifier. Furthermore it is possible to specify if a 32 or 64 bit implementation shall be requested by adding \"-32\" or \"-64\"."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:818
msgid "For example, a shebang line of ``#!python`` has no version qualifier, while ``#!python3`` has a version qualifier which specifies only a major version."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:821
msgid "If no version qualifiers are found in a command, the environment variable :envvar:`PY_PYTHON` can be set to specify the default version qualifier. If it is not set, the default is \"3\". The variable can specify any value that may be passed on the command line, such as \"3\", \"3.7\", \"3.7-32\" or \"3.7-64\". (Note that the \"-64\" option is only available with the launcher included with Python 3.7 or newer.)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:828
msgid "If no minor version qualifiers are found, the environment variable ``PY_PYTHON{major}`` (where ``{major}`` is the current major version qualifier as determined above) can be set to specify the full version. If no such option is found, the launcher will enumerate the installed Python versions and use the latest minor release found for the major version, which is likely, although not guaranteed, to be the most recently installed version in that family."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:836
msgid "On 64-bit Windows with both 32-bit and 64-bit implementations of the same (major.minor) Python version installed, the 64-bit version will always be preferred. This will be true for both 32-bit and 64-bit implementations of the launcher - a 32-bit launcher will prefer to execute a 64-bit Python installation of the specified version if available. This is so the behavior of the launcher can be predicted knowing only what versions are installed on the PC and without regard to the order in which they were installed (i.e., without knowing whether a 32 or 64-bit version of Python and corresponding launcher was installed last). As noted above, an optional \"-32\" or \"-64\" suffix can be used on a version specifier to change this behaviour."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:847
msgid "Examples:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:849
msgid "If no relevant options are set, the commands ``python`` and ``python2`` will use the latest Python 2.x version installed and the command ``python3`` will use the latest Python 3.x installed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:853
msgid "The commands ``python3.1`` and ``python2.7`` will not consult any options at all as the versions are fully specified."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:856
msgid "If ``PY_PYTHON=3``, the commands ``python`` and ``python3`` will both use the latest installed Python 3 version."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:859
msgid "If ``PY_PYTHON=3.1-32``, the command ``python`` will use the 32-bit implementation of 3.1 whereas the command ``python3`` will use the latest installed Python (PY_PYTHON was not considered at all as a major version was specified.)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:864
msgid "If ``PY_PYTHON=3`` and ``PY_PYTHON3=3.1``, the commands ``python`` and ``python3`` will both use specifically 3.1"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:867
msgid "In addition to environment variables, the same settings can be configured in the .INI file used by the launcher.  The section in the INI file is called ``[defaults]`` and the key name will be the same as the environment variables without the leading ``PY_`` prefix (and note that the key names in the INI file are case insensitive.)  The contents of an environment variable will override things specified in the INI file."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:874
msgid "For example:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:876
msgid "Setting ``PY_PYTHON=3.1`` is equivalent to the INI file containing:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:883
msgid "Setting ``PY_PYTHON=3`` and ``PY_PYTHON3=3.1`` is equivalent to the INI file containing:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:893
msgid "Diagnostics"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:895
msgid "If an environment variable ``PYLAUNCH_DEBUG`` is set (to any value), the launcher will print diagnostic information to stderr (i.e. to the console). While this information manages to be simultaneously verbose *and* terse, it should allow you to see what versions of Python were located, why a particular version was chosen and the exact command-line used to execute the target Python."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:907
msgid "Finding modules"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:909
msgid "Python usually stores its library (and thereby your site-packages folder) in the installation directory.  So, if you had installed Python to :file:`C:\\\\Python\\\\`, the default library would reside in :file:`C:\\\\Python\\\\Lib\\\\` and third-party modules should be stored in :file:`C:\\\\Python\\\\Lib\\\\site-packages\\\\`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:915
msgid "To completely override :data:`sys.path`, create a ``._pth`` file with the same name as the DLL (``python37._pth``) or the executable (``python._pth``) and specify one line for each path to add to :data:`sys.path`. The file based on the DLL name overrides the one based on the executable, which allows paths to be restricted for any program loading the runtime if desired."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:921
msgid "When the file exists, all registry and environment variables are ignored, isolated mode is enabled, and :mod:`site` is not imported unless one line in the file specifies ``import site``. Blank paths and lines starting with ``#`` are ignored. Each path may be absolute or relative to the location of the file. Import statements other than to ``site`` are not permitted, and arbitrary code cannot be specified."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:928
msgid "Note that ``.pth`` files (without leading underscore) will be processed normally by the :mod:`site` module when ``import site`` has been specified."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:931
msgid "When no ``._pth`` file is found, this is how :data:`sys.path` is populated on Windows:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:934
msgid "An empty entry is added at the start, which corresponds to the current directory."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:937
msgid "If the environment variable :envvar:`PYTHONPATH` exists, as described in :ref:`using-on-envvars`, its entries are added next.  Note that on Windows, paths in this variable must be separated by semicolons, to distinguish them from the colon used in drive identifiers (``C:\\`` etc.)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:942
msgid "Additional \"application paths\" can be added in the registry as subkeys of :samp:`\\\\SOFTWARE\\\\Python\\\\PythonCore\\\\{version}\\\\PythonPath` under both the ``HKEY_CURRENT_USER`` and ``HKEY_LOCAL_MACHINE`` hives.  Subkeys which have semicolon-delimited path strings as their default value will cause each path to be added to :data:`sys.path`.  (Note that all known installers only use HKLM, so HKCU is typically empty.)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:949
msgid "If the environment variable :envvar:`PYTHONHOME` is set, it is assumed as \"Python Home\".  Otherwise, the path of the main Python executable is used to locate a \"landmark file\" (either ``Lib\\os.py`` or ``pythonXY.zip``) to deduce the \"Python Home\".  If a Python home is found, the relevant sub-directories added to :data:`sys.path` (``Lib``, ``plat-win``, etc) are based on that folder.  Otherwise, the core Python path is constructed from the PythonPath stored in the registry."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:957
msgid "If the Python Home cannot be located, no :envvar:`PYTHONPATH` is specified in the environment, and no registry entries can be found, a default path with relative entries is used (e.g. ``.\\Lib;.\\plat-win``, etc)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:961
msgid "If a ``pyvenv.cfg`` file is found alongside the main executable or in the directory one level above the executable, the following variations apply:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:964
msgid "If ``home`` is an absolute path and :envvar:`PYTHONHOME` is not set, this path is used instead of the path to the main executable when deducing the home location."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:968
msgid "The end result of all this is:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:970
msgid "When running :file:`python.exe`, or any other .exe in the main Python directory (either an installed version, or directly from the PCbuild directory), the core path is deduced, and the core paths in the registry are ignored.  Other \"application paths\" in the registry are always read."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:975
msgid "When Python is hosted in another .exe (different directory, embedded via COM, etc), the \"Python Home\" will not be deduced, so the core path from the registry is used.  Other \"application paths\" in the registry are always read."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:979
msgid "If Python can't find its home and there are no registry value (frozen .exe, some very strange installation setup) you get a path with some default, but relative, paths."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:983
msgid "For those who want to bundle Python into their application or distribution, the following advice will prevent conflicts with other installations:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:986
msgid "Include a ``._pth`` file alongside your executable containing the directories to include. This will ignore paths listed in the registry and environment variables, and also ignore :mod:`site` unless ``import site`` is listed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:991
msgid "If you are loading :file:`python3.dll` or :file:`python37.dll` in your own executable, explicitly call :c:func:`Py_SetPath` or (at least) :c:func:`Py_SetProgramName` before :c:func:`Py_Initialize`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:995
msgid "Clear and/or overwrite :envvar:`PYTHONPATH` and set :envvar:`PYTHONHOME` before launching :file:`python.exe` from your application."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:998
msgid "If you cannot use the previous suggestions (for example, you are a distribution that allows people to run :file:`python.exe` directly), ensure that the landmark file (:file:`Lib\\\\os.py`) exists in your install directory. (Note that it will not be detected inside a ZIP file, but a correctly named ZIP file will be detected instead.)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1004
msgid "These will ensure that the files in a system-wide installation will not take precedence over the copy of the standard library bundled with your application. Otherwise, your users may experience problems using your application. Note that the first suggestion is the best, as the others may still be susceptible to non-standard paths in the registry and user site-packages."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1013
msgid "Adds ``._pth`` file support and removes ``applocal`` option from ``pyvenv.cfg``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1015
msgid "Adds ``pythonXX.zip`` as a potential landmark when directly adjacent to the executable."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1021
msgid "Modules specified in the registry under ``Modules`` (not ``PythonPath``) may be imported by :class:`importlib.machinery.WindowsRegistryFinder`. This finder is enabled on Windows in 3.6.0 and earlier, but may need to be explicitly added to :attr:`sys.meta_path` in the future."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1027
msgid "Additional modules"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1029
msgid "Even though Python aims to be portable among all platforms, there are features that are unique to Windows.  A couple of modules, both in the standard library and external, and snippets exist to use these features."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1033
msgid "The Windows-specific standard modules are documented in :ref:`mswin-specific-services`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1037
msgid "PyWin32"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1039
msgid "The `PyWin32 <https://pypi.org/project/pywin32>`_ module by Mark Hammond is a collection of modules for advanced Windows-specific support.  This includes utilities for:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1043
msgid "`Component Object Model <https://docs.microsoft.com/en-us/windows/desktop/com/component-object-model--com--portal>`_ (COM)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1046
msgid "Win32 API calls"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1047
msgid "Registry"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1048
msgid "Event log"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1049
msgid "`Microsoft Foundation Classes <https://msdn.microsoft.com/en-us/library/fe1cf721%28VS.80%29.aspx>`_ (MFC) user interfaces"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1052
msgid "`PythonWin <https://web.archive.org/web/20060524042422/ https://www.python.org/windows/pythonwin/>`_ is a sample MFC application shipped with PyWin32.  It is an embeddable IDE with a built-in debugger."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1059
msgid "`Win32 How Do I...? <http://timgolden.me.uk/python/win32_how_do_i.html>`_"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1059
msgid "by Tim Golden"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1061
msgid "`Python and COM <http://www.boddie.org.uk/python/COM.html>`_"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1062
msgid "by David and Paul Boddie"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1066
msgid "cx_Freeze"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1068
msgid "`cx_Freeze <https://anthony-tuininga.github.io/cx_Freeze/>`_ is a :mod:`distutils` extension (see :ref:`extending-distutils`) which wraps Python scripts into executable Windows programs (:file:`{*}.exe` files).  When you have done this, you can distribute your application without requiring your users to install Python."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1076
msgid "WConio"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1078
msgid "Since Python's advanced terminal handling layer, :mod:`curses`, is restricted to Unix-like systems, there is a library exclusive to Windows as well: Windows Console I/O for Python."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1082
msgid "`WConio <http://newcenturycomputers.net/projects/wconio.html>`_ is a wrapper for Turbo-C's :file:`CONIO.H`, used to create text user interfaces."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1088
msgid "Compiling Python on Windows"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1090
msgid "If you want to compile CPython yourself, first thing you should do is get the `source <https://www.python.org/downloads/source/>`_. You can download either the latest release's source or just grab a fresh `checkout <https://devguide.python.org/setup/#getting-the-source-code>`_."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1095
msgid "The source tree contains a build solution and project files for Microsoft Visual Studio 2015, which is the compiler used to build the official Python releases. These files are in the :file:`PCbuild` directory."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1099
msgid "Check :file:`PCbuild/readme.txt` for general information on the build process."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1102
msgid "For extension modules, consult :ref:`building-on-windows`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1109
msgid "`Python + Windows + distutils + SWIG + gcc MinGW <http://sebsauvage.net/python/mingw.html>`_"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1107
msgid "or \"Creating Python extensions in C/C++ with SWIG and compiling them with MinGW gcc under Windows\" or \"Installing Python extension with distutils and without Microsoft Visual C++\" by Sébastien Sauvage, 2003"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1111
msgid "`MingW -- Python extensions <http://www.mingw.org/wiki/FAQ#toc14>`_"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1115
msgid "Other Platforms"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1117
msgid "With ongoing development of Python, some platforms that used to be supported earlier are no longer supported (due to the lack of users or developers). Check :pep:`11` for details on all unsupported platforms."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1121
msgid "`Windows CE <http://pythonce.sourceforge.net/>`_ is still supported."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1122
msgid "The `Cygwin <https://cygwin.com/>`_ installer offers to install the Python interpreter as well (cf. `Cygwin package source <ftp://ftp.uni-erlangen.de/pub/pc/gnuwin32/cygwin/mirrors/cygnus/ release/python>`_, `Maintainer releases <http://www.tishler.net/jason/software/python/>`_)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/using/windows.rst:1128
msgid "See `Python for Windows <https://www.python.org/downloads/windows/>`_ for detailed information about platforms with pre-compiled installers."
msgstr ""

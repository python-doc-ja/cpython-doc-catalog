# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-21 01:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/email.encoders.rst:2
msgid ":mod:`email.encoders`: Encoders"
msgstr ""

#: ../../library/email.encoders.rst:8
msgid "When creating :class:`~email.message.Message` objects from scratch, you often need to encode the payloads for transport through compliant mail servers. This is especially true for :mimetype:`image/\\*` and :mimetype:`text/\\*` type messages containing binary data."
msgstr ""

#: ../../library/email.encoders.rst:13
msgid "The :mod:`email` package provides some convenient encodings in its :mod:`encoders` module.  These encoders are actually used by the :class:`~email.mime.audio.MIMEAudio` and :class:`~email.mime.image.MIMEImage` class constructors to provide default encodings.  All encoder functions take exactly one argument, the message object to encode.  They usually extract the payload, encode it, and reset the payload to this newly encoded value.  They should also set the :mailheader:`Content-Transfer-Encoding` header as appropriate."
msgstr ""

#: ../../library/email.encoders.rst:21
msgid "Note that these functions are not meaningful for a multipart message.  They must be applied to individual subparts instead, and will raise a :exc:`TypeError` if passed a message whose type is multipart."
msgstr ""

#: ../../library/email.encoders.rst:25
msgid "Here are the encoding functions provided:"
msgstr ""

#: ../../library/email.encoders.rst:30
msgid "Encodes the payload into quoted-printable form and sets the :mailheader:`Content-Transfer-Encoding` header to ``quoted-printable`` [#]_. This is a good encoding to use when most of your payload is normal printable data, but contains a few unprintable characters."
msgstr ""

#: ../../library/email.encoders.rst:38
msgid "Encodes the payload into base64 form and sets the :mailheader:`Content-Transfer-Encoding` header to ``base64``.  This is a good encoding to use when most of your payload is unprintable data since it is a more compact form than quoted-printable.  The drawback of base64 encoding is that it renders the text non-human readable."
msgstr ""

#: ../../library/email.encoders.rst:47
msgid "This doesn't actually modify the message's payload, but it does set the :mailheader:`Content-Transfer-Encoding` header to either ``7bit`` or ``8bit`` as appropriate, based on the payload data."
msgstr ""

#: ../../library/email.encoders.rst:54
msgid "This does nothing; it doesn't even set the :mailheader:`Content-Transfer-Encoding` header."
msgstr ""

#: ../../library/email.encoders.rst:58
msgid "Footnotes"
msgstr ""

#: ../../library/email.encoders.rst:59
msgid "Note that encoding with :meth:`encode_quopri` also encodes all tabs and space characters in the data."
msgstr ""


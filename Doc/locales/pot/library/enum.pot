# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-27 21:31+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/enum.rst:2
msgid ":mod:`enum` --- Support for enumerations"
msgstr ""

#: ../../library/enum.rst:14
msgid "**Source code:** :source:`Lib/enum.py`"
msgstr ""

#: ../../library/enum.rst:18
msgid "This page contains the API reference information. For tutorial information and discussion of more advanced topics, see"
msgstr ""

#: ../../library/enum.rst:21
msgid ":ref:`Basic Tutorial <enum-basic-tutorial>`"
msgstr ""

#: ../../library/enum.rst:22
msgid ":ref:`Advanced Tutorial <enum-advanced-tutorial>`"
msgstr ""

#: ../../library/enum.rst:23
msgid ":ref:`Enum Cookbook <enum-cookbook>`"
msgstr ""

#: ../../library/enum.rst:27
msgid "An enumeration:"
msgstr ""

#: ../../library/enum.rst:29
msgid "is a set of symbolic names (members) bound to unique values"
msgstr ""

#: ../../library/enum.rst:30
msgid "can be iterated over to return its members in definition order"
msgstr ""

#: ../../library/enum.rst:31
msgid "uses *call* syntax to return members by value"
msgstr ""

#: ../../library/enum.rst:32
msgid "uses *index* syntax to return members by name"
msgstr ""

#: ../../library/enum.rst:34
msgid "Enumerations are created either by using the :keyword:`class` syntax, or by using function-call syntax::"
msgstr ""

#: ../../library/enum.rst:48
msgid "Even though we can use the :keyword:`class` syntax to create Enums, Enums are not normal Python classes.  See :ref:`How are Enums different? <enum-class-differences>` for more details."
msgstr ""

#: ../../library/enum.rst:52
msgid "Nomenclature"
msgstr ""

#: ../../library/enum.rst:54
msgid "The class :class:`Color` is an *enumeration* (or *enum*)"
msgstr ""

#: ../../library/enum.rst:55
msgid "The attributes :attr:`Color.RED`, :attr:`Color.GREEN`, etc., are *enumeration members* (or *enum members*) and are functionally constants."
msgstr ""

#: ../../library/enum.rst:57
msgid "The enum members have *names* and *values* (the name of :attr:`Color.RED` is ``RED``, the value of :attr:`Color.BLUE` is ``3``, etc.)"
msgstr ""

#: ../../library/enum.rst:64
msgid "Module Contents"
msgstr ""

#: ../../library/enum.rst:66
msgid ":class:`EnumType`"
msgstr ""

#: ../../library/enum.rst:68
msgid "The ``type`` for Enum and its subclasses."
msgstr ""

#: ../../library/enum.rst:70
msgid ":class:`Enum`"
msgstr ""

#: ../../library/enum.rst:72
msgid "Base class for creating enumerated constants."
msgstr ""

#: ../../library/enum.rst:74
msgid ":class:`IntEnum`"
msgstr ""

#: ../../library/enum.rst:76
msgid "Base class for creating enumerated constants that are also subclasses of :class:`int`. (`Notes`_)"
msgstr ""

#: ../../library/enum.rst:79
msgid ":class:`StrEnum`"
msgstr ""

#: ../../library/enum.rst:81
msgid "Base class for creating enumerated constants that are also subclasses of :class:`str`. (`Notes`_)"
msgstr ""

#: ../../library/enum.rst:84
msgid ":class:`Flag`"
msgstr ""

#: ../../library/enum.rst:86
msgid "Base class for creating enumerated constants that can be combined using the bitwise operations without losing their :class:`Flag` membership."
msgstr ""

#: ../../library/enum.rst:89
msgid ":class:`IntFlag`"
msgstr ""

#: ../../library/enum.rst:91
msgid "Base class for creating enumerated constants that can be combined using the bitwise operators without losing their :class:`IntFlag` membership. :class:`IntFlag` members are also subclasses of :class:`int`. (`Notes`_)"
msgstr ""

#: ../../library/enum.rst:95
msgid ":class:`EnumCheck`"
msgstr ""

#: ../../library/enum.rst:97
msgid "An enumeration with the values ``CONTINUOUS``, ``NAMED_FLAGS``, and ``UNIQUE``, for use with :func:`verify` to ensure various constraints are met by a given enumeration."
msgstr ""

#: ../../library/enum.rst:101
msgid ":class:`FlagBoundary`"
msgstr ""

#: ../../library/enum.rst:103
msgid "An enumeration with the values ``STRICT``, ``CONFORM``, ``EJECT``, and ``KEEP`` which allows for more fine-grained control over how invalid values are dealt with in an enumeration."
msgstr ""

#: ../../library/enum.rst:107
msgid ":class:`auto`"
msgstr ""

#: ../../library/enum.rst:109
msgid "Instances are replaced with an appropriate value for Enum members. :class:`StrEnum` defaults to the lower-cased version of the member name, while other Enums default to 1 and increase from there."
msgstr ""

#: ../../library/enum.rst:113
msgid ":func:`global_enum`"
msgstr ""

#: ../../library/enum.rst:115
msgid ":class:`Enum` class decorator to apply the appropriate global `__repr__`, and export its members into the global name space."
msgstr ""

#: ../../library/enum.rst:118
msgid ":func:`.property`"
msgstr ""

#: ../../library/enum.rst:120
msgid "Allows :class:`Enum` members to have attributes without conflicting with other members' names."
msgstr ""

#: ../../library/enum.rst:123
msgid ":func:`unique`"
msgstr ""

#: ../../library/enum.rst:125
msgid "Enum class decorator that ensures only one name is bound to any one value."
msgstr ""

#: ../../library/enum.rst:127
msgid ":func:`verify`"
msgstr ""

#: ../../library/enum.rst:129
msgid "Enum class decorator that checks user-selectable constraints on an enumeration."
msgstr ""

#: ../../library/enum.rst:133
msgid "``Flag``, ``IntFlag``, ``auto``"
msgstr ""

#: ../../library/enum.rst:134
msgid "``StrEnum``, ``EnumCheck``, ``FlagBoundary``"
msgstr ""

#: ../../library/enum.rst:139
msgid "Data Types"
msgstr ""

#: ../../library/enum.rst:144
msgid "*EnumType* is the :term:`metaclass` for *enum* enumerations.  It is possible to subclass *EnumType* -- see :ref:`Subclassing EnumType <enumtype-examples>` for details."
msgstr ""

#: ../../library/enum.rst:150
msgid "Returns ``True`` if member belongs to the ``cls``::"
msgstr ""

#: ../../library/enum.rst:158
msgid "In Python 3.12 it will be possible to check for member values and not just members; until then, a ``TypeError`` will be raised if a non-Enum-member is used in a containment check."
msgstr ""

#: ../../library/enum.rst:164
msgid "Returns ``['__class__', '__doc__', '__members__', '__module__']`` and the names of the members in *cls*::"
msgstr ""

#: ../../library/enum.rst:172
msgid "Returns the Enum member in *cls* matching *name*, or raises an :exc:`AttributeError`::"
msgstr ""

#: ../../library/enum.rst:179
msgid "Returns the Enum member in *cls* matching *name*, or raises an :exc:`KeyError`::"
msgstr ""

#: ../../library/enum.rst:186
msgid "Returns each member in *cls* in definition order::"
msgstr ""

#: ../../library/enum.rst:193
msgid "Returns the number of member in *cls*::"
msgstr ""

#: ../../library/enum.rst:200
msgid "Returns each member in *cls* in reverse definition order::"
msgstr ""

#: ../../library/enum.rst:208
msgid "*Enum* is the base class for all *enum* enumerations."
msgstr ""

#: ../../library/enum.rst:212
msgid "The name used to define the ``Enum`` member::"
msgstr ""

#: ../../library/enum.rst:219
msgid "The value given to the ``Enum`` member::"
msgstr ""

#: ../../library/enum.rst:224
msgid "Enum member values"
msgstr ""

#: ../../library/enum.rst:226
msgid "Member values can be anything: :class:`int`, :class:`str`, etc..  If the exact value is unimportant you may use :class:`auto` instances and an appropriate value will be chosen for you.  Care must be taken if you mix :class:`auto` with other values."
msgstr ""

#: ../../library/enum.rst:233
msgid "``_ignore_`` is only used during creation and is removed from the enumeration once that is complete."
msgstr ""

#: ../../library/enum.rst:236
msgid "``_ignore_`` is a list of names that will not become members, and whose names will also be removed from the completed enumeration.  See :ref:`TimePeriod <enum-time-period>` for an example."
msgstr ""

#: ../../library/enum.rst:242
msgid "This method is called in two different ways:"
msgstr ""

#: ../../library/enum.rst:244
msgid "to look up an existing member:"
msgstr ""

#: ../../library/enum.rst:0
#: ../../library/enum.rst:0
msgid "cls"
msgstr ""

#: ../../library/enum.rst:246
#: ../../library/enum.rst:251
msgid "The enum class being called."
msgstr ""

#: ../../library/enum.rst:0
#: ../../library/enum.rst:0
msgid "value"
msgstr ""

#: ../../library/enum.rst:247
msgid "The value to lookup."
msgstr ""

#: ../../library/enum.rst:249
msgid "to use the ``cls`` enum to create a new enum:"
msgstr ""

#: ../../library/enum.rst:252
msgid "The name of the new Enum to create."
msgstr ""

#: ../../library/enum.rst:0
msgid "names"
msgstr ""

#: ../../library/enum.rst:253
msgid "The names/values of the members for the new Enum."
msgstr ""

#: ../../library/enum.rst:0
msgid "module"
msgstr ""

#: ../../library/enum.rst:254
msgid "The name of the module the new Enum is created in."
msgstr ""

#: ../../library/enum.rst:0
msgid "qualname"
msgstr ""

#: ../../library/enum.rst:255
msgid "The actual location in the module where this Enum can be found."
msgstr ""

#: ../../library/enum.rst:0
msgid "type"
msgstr ""

#: ../../library/enum.rst:256
msgid "A mix-in type for the new Enum."
msgstr ""

#: ../../library/enum.rst:0
#: ../../library/enum.rst:0
msgid "start"
msgstr ""

#: ../../library/enum.rst:257
msgid "The first integer value for the Enum (used by :class:`auto`)"
msgstr ""

#: ../../library/enum.rst:0
msgid "boundary"
msgstr ""

#: ../../library/enum.rst:258
msgid "How to handle out-of-range values from bit operations (:class:`Flag` only)"
msgstr ""

#: ../../library/enum.rst:262
msgid "Returns ``['__class__', '__doc__', '__module__', 'name', 'value']`` and any public methods defined on *self.__class__*::"
msgstr ""

#: ../../library/enum.rst:0
msgid "name"
msgstr ""

#: ../../library/enum.rst:282
msgid "The name of the member being defined (e.g. 'RED')."
msgstr ""

#: ../../library/enum.rst:283
msgid "The start value for the Enum; the default is 1."
msgstr ""

#: ../../library/enum.rst:0
msgid "count"
msgstr ""

#: ../../library/enum.rst:284
msgid "The number of members currently defined, not including this one."
msgstr ""

#: ../../library/enum.rst:0
msgid "last_values"
msgstr ""

#: ../../library/enum.rst:285
msgid "A list of the previous values."
msgstr ""

#: ../../library/enum.rst:287
msgid "A *staticmethod* that is used to determine the next value returned by :class:`auto`::"
msgstr ""

#: ../../library/enum.rst:302
msgid "A *classmethod* for looking up values not found in *cls*.  By default it does nothing, but can be overridden to implement custom search behavior::"
msgstr ""

#: ../../library/enum.rst:323
msgid "Returns the string used for *repr()* calls.  By default, returns the *Enum* name and the member name, but can be overridden::"
msgstr ""

#: ../../library/enum.rst:338
msgid "Returns the string used for *str()* calls.  By default, returns the member name, but can be overridden::"
msgstr ""

#: ../../library/enum.rst:353
msgid "Using :class:`auto` with :class:`Enum` results in integers of increasing value, starting with ``1``."
msgstr ""

#: ../../library/enum.rst:359
msgid "*IntEnum* is the same as *Enum*, but its members are also integers and can be used anywhere that an integer can be used.  If any integer operation is performed with an *IntEnum* member, the resulting value loses its enumeration status."
msgstr ""

#: ../../library/enum.rst:379
msgid "Using :class:`auto` with :class:`IntEnum` results in integers of increasing value, starting with ``1``."
msgstr ""

#: ../../library/enum.rst:385
msgid "*StrEnum* is the same as *Enum*, but its members are also strings and can be used in most of the same places that a string can be used.  The result of any string operation performed on or with a *StrEnum* member is not part of the enumeration."
msgstr ""

#: ../../library/enum.rst:389
msgid "There are places in the stdlib that check for an exact :class:`str` instead of a :class:`str` subclass (i.e. ``type(unknown) == str`` instead of ``isinstance(str, unknown)``), and in those locations you will need to use ``str(StrEnum.member)``."
msgstr ""

#: ../../library/enum.rst:397
msgid "Using :class:`auto` with :class:`StrEnum` results in values of the member name, lower-cased."
msgstr ""

#: ../../library/enum.rst:403
msgid "*Flag* members support the bitwise operators ``&`` (*AND*), ``|`` (*OR*), ``^`` (*XOR*), and ``~`` (*INVERT*); the results of those operators are members of the enumeration."
msgstr ""

#: ../../library/enum.rst:409
msgid "Returns *True* if value is in self::"
msgstr ""

#: ../../library/enum.rst:429
msgid "Returns all contained members::"
msgstr ""

#: ../../library/enum.rst:438
msgid "Returns number of members in flag::"
msgstr ""

#: ../../library/enum.rst:447
msgid "Returns *True* if any members in flag, *False* otherwise::"
msgstr ""

#: ../../library/enum.rst:459
msgid "Returns current flag binary or'ed with other::"
msgstr ""

#: ../../library/enum.rst:466
msgid "Returns current flag binary and'ed with other::"
msgstr ""

#: ../../library/enum.rst:475
msgid "Returns current flag binary xor'ed with other::"
msgstr ""

#: ../../library/enum.rst:484
msgid "Returns all the flags in *type(self)* that are not in self::"
msgstr ""

#: ../../library/enum.rst:495
msgid "Using :class:`auto` with :class:`Flag` results in integers that are powers of two, starting with ``1``."
msgstr ""

#: ../../library/enum.rst:501
msgid "*IntFlag* is the same as *Flag*, but its members are also integers and can be used anywhere that an integer can be used."
msgstr ""

#: ../../library/enum.rst:514
msgid "If any integer operation is performed with an *IntFlag* member, the result is not an *IntFlag*::"
msgstr ""

#: ../../library/enum.rst:520
msgid "If a *Flag* operation is performed with an *IntFlag* member and:"
msgstr ""

#: ../../library/enum.rst:522
msgid "the result is a valid *IntFlag*: an *IntFlag* is returned"
msgstr ""

#: ../../library/enum.rst:523
msgid "the result is not a valid *IntFlag*: the result depends on the *FlagBoundary* setting"
msgstr ""

#: ../../library/enum.rst:527
msgid "Using :class:`auto` with :class:`IntFlag` results in integers that are powers of two, starting with ``1``."
msgstr ""

#: ../../library/enum.rst:532
msgid "*EnumCheck* contains the options used by the :func:`verify` decorator to ensure various constraints; failed constraints result in a :exc:`TypeError`."
msgstr ""

#: ../../library/enum.rst:537
msgid "Ensure that each value has only one name::"
msgstr ""

#: ../../library/enum.rst:553
msgid "Ensure that there are no missing values between the lowest-valued member and the highest-valued member::"
msgstr ""

#: ../../library/enum.rst:568
msgid "Ensure that any flag groups/masks contain only named flags -- useful when values are specified instead of being generated by :func:`auto`"
msgstr ""

#: ../../library/enum.rst:585
msgid "CONTINUOUS and NAMED_FLAGS are designed to work with integer-valued members."
msgstr ""

#: ../../library/enum.rst:591
msgid "*FlagBoundary* controls how out-of-range values are handled in *Flag* and its subclasses."
msgstr ""

#: ../../library/enum.rst:596
msgid "Out-of-range values cause a :exc:`ValueError` to be raised.  This is the default for :class:`Flag`::"
msgstr ""

#: ../../library/enum.rst:613
msgid "Out-of-range values have invalid values removed, leaving a valid *Flag* value::"
msgstr ""

#: ../../library/enum.rst:626
msgid "Out-of-range values lose their *Flag* membership and revert to :class:`int`. This is the default for :class:`IntFlag`::"
msgstr ""

#: ../../library/enum.rst:639
msgid "Out-of-range values are kept, and the *Flag* membership is kept.  This is used for some stdlib flags:"
msgstr ""

#: ../../library/enum.rst:655
msgid "Utilites and Decorators"
msgstr ""

#: ../../library/enum.rst:659
msgid "*auto* can be used in place of a value.  If used, the *Enum* machinery will call an *Enum*'s :meth:`_generate_next_value_` to get an appropriate value. For *Enum* and *IntEnum* that appropriate value will be the last value plus one; for *Flag* and *IntFlag* it will be the first power-of-two greater than the last value; for *StrEnum* it will be the lower-cased version of the member's name."
msgstr ""

#: ../../library/enum.rst:666
msgid "``_generate_next_value_`` can be overridden to customize the values used by *auto*."
msgstr ""

#: ../../library/enum.rst:671
msgid "A :keyword:`class` decorator specifically for enumerations.  It replaces the :meth:`__repr__` method with one that shows *module_name*.*member_name*.  It also injects the members, and their aliases, into the global namespace they were defined in."
msgstr ""

#: ../../library/enum.rst:679
msgid "A decorator similar to the built-in *property*, but specifically for enumerations.  It allows member attributes to have the same names as members themselves."
msgstr ""

#: ../../library/enum.rst:683
msgid "the *property* and the member must be defined in separate classes; for example, the *value* and *name* attributes are defined in the *Enum* class, and *Enum* subclasses can define members with the names ``value`` and ``name``."
msgstr ""

#: ../../library/enum.rst:690
msgid "A :keyword:`class` decorator specifically for enumerations.  It searches an enumeration's :attr:`__members__`, gathering any aliases it finds; if any are found :exc:`ValueError` is raised with the details::"
msgstr ""

#: ../../library/enum.rst:708
msgid "A :keyword:`class` decorator specifically for enumerations.  Members from :class:`EnumCheck` are used to specify which constraints should be checked on the decorated enumeration."
msgstr ""

#: ../../library/enum.rst:717
msgid "Notes"
msgstr ""

#: ../../library/enum.rst:719
msgid ":class:`IntEnum`, :class:`StrEnum`, and :class:`IntFlag`"
msgstr ""

#: ../../library/enum.rst:721
msgid "These three enum types are designed to be drop-in replacements for existing integer- and string-based values; as such, they have extra limitations:"
msgstr ""

#: ../../library/enum.rst:724
msgid "``format()`` will use the value of the enum member, unless ``__str__`` has been overridden"
msgstr ""

#: ../../library/enum.rst:727
msgid "``StrEnum.__str__`` uses the value and not the name of the enum member"
msgstr ""

#: ../../library/enum.rst:729
msgid "If you do not need/want those limitations, you can create your own base class by mixing in the ``int`` or ``str`` type yourself::"
msgstr ""

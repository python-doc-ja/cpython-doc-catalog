# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-01 09:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/datetime.rst:2
msgid ":mod:`datetime` --- Basic date and time types"
msgstr ""

#: ../../library/datetime.rst:11
msgid "**Source code:** :source:`Lib/datetime.py`"
msgstr ""

#: ../../library/datetime.rst:17
msgid "The :mod:`datetime` module supplies classes for manipulating dates and times in both simple and complex ways.  While date and time arithmetic is supported, the focus of the implementation is on efficient attribute extraction for output formatting and manipulation. For related functionality, see also the :mod:`time` and :mod:`calendar` modules."
msgstr ""

#: ../../library/datetime.rst:23
msgid "There are two kinds of date and time objects: \"naive\" and \"aware\"."
msgstr ""

#: ../../library/datetime.rst:25
msgid "An aware object has sufficient knowledge of applicable algorithmic and political time adjustments, such as time zone and daylight saving time information, to locate itself relative to other aware objects.  An aware object is used to represent a specific moment in time that is not open to interpretation [#]_."
msgstr ""

#: ../../library/datetime.rst:31
msgid "A naive object does not contain enough information to unambiguously locate itself relative to other date/time objects.  Whether a naive object represents Coordinated Universal Time (UTC), local time, or time in some other timezone is purely up to the program, just like it is up to the program whether a particular number represents metres, miles, or mass.  Naive objects are easy to understand and to work with, at the cost of ignoring some aspects of reality."
msgstr ""

#: ../../library/datetime.rst:38
msgid "For applications requiring aware objects, :class:`.datetime` and :class:`.time` objects have an optional time zone information attribute, :attr:`!tzinfo`, that can be set to an instance of a subclass of the abstract :class:`tzinfo` class. These :class:`tzinfo` objects capture information about the offset from UTC time, the time zone name, and whether Daylight Saving Time is in effect.  Note that only one concrete :class:`tzinfo` class, the :class:`timezone` class, is supplied by the :mod:`datetime` module.  The :class:`timezone` class can represent simple timezones with fixed offset from UTC, such as UTC itself or North American EST and EDT timezones.  Supporting timezones at deeper levels of detail is up to the application.  The rules for time adjustment across the world are more political than rational, change frequently, and there is no standard suitable for every application aside from UTC."
msgstr ""

#: ../../library/datetime.rst:51
msgid "The :mod:`datetime` module exports the following constants:"
msgstr ""

#: ../../library/datetime.rst:55
msgid "The smallest year number allowed in a :class:`date` or :class:`.datetime` object. :const:`MINYEAR` is ``1``."
msgstr ""

#: ../../library/datetime.rst:61
msgid "The largest year number allowed in a :class:`date` or :class:`.datetime` object. :const:`MAXYEAR` is ``9999``."
msgstr ""

#: ../../library/datetime.rst:68
msgid "Module :mod:`calendar`"
msgstr ""

#: ../../library/datetime.rst:68
msgid "General calendar related functions."
msgstr ""

#: ../../library/datetime.rst:70
msgid "Module :mod:`time`"
msgstr ""

#: ../../library/datetime.rst:71
msgid "Time access and conversions."
msgstr ""

#: ../../library/datetime.rst:75
msgid "Available Types"
msgstr ""

#: ../../library/datetime.rst:80
msgid "An idealized naive date, assuming the current Gregorian calendar always was, and always will be, in effect. Attributes: :attr:`year`, :attr:`month`, and :attr:`day`."
msgstr ""

#: ../../library/datetime.rst:88
msgid "An idealized time, independent of any particular day, assuming that every day has exactly 24\\*60\\*60 seconds (there is no notion of \"leap seconds\" here). Attributes: :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:`microsecond`, and :attr:`.tzinfo`."
msgstr ""

#: ../../library/datetime.rst:97
msgid "A combination of a date and a time. Attributes: :attr:`year`, :attr:`month`, :attr:`day`, :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:`microsecond`, and :attr:`.tzinfo`."
msgstr ""

#: ../../library/datetime.rst:105
msgid "A duration expressing the difference between two :class:`date`, :class:`.time`, or :class:`.datetime` instances to microsecond resolution."
msgstr ""

#: ../../library/datetime.rst:112
msgid "An abstract base class for time zone information objects.  These are used by the :class:`.datetime` and :class:`.time` classes to provide a customizable notion of time adjustment (for example, to account for time zone and/or daylight saving time)."
msgstr ""

#: ../../library/datetime.rst:120
msgid "A class that implements the :class:`tzinfo` abstract base class as a fixed offset from the UTC."
msgstr ""

#: ../../library/datetime.rst:126
msgid "Objects of these types are immutable."
msgstr ""

#: ../../library/datetime.rst:128
msgid "Objects of the :class:`date` type are always naive."
msgstr ""

#: ../../library/datetime.rst:130
msgid "An object of type :class:`.time` or :class:`.datetime` may be naive or aware. A :class:`.datetime` object *d* is aware if ``d.tzinfo`` is not ``None`` and ``d.tzinfo.utcoffset(d)`` does not return ``None``.  If ``d.tzinfo`` is ``None``, or if ``d.tzinfo`` is not ``None`` but ``d.tzinfo.utcoffset(d)`` returns ``None``, *d* is naive.  A :class:`.time` object *t* is aware if ``t.tzinfo`` is not ``None`` and ``t.tzinfo.utcoffset(None)`` does not return ``None``.  Otherwise, *t* is naive."
msgstr ""

#: ../../library/datetime.rst:138
msgid "The distinction between naive and aware doesn't apply to :class:`timedelta` objects."
msgstr ""

#: ../../library/datetime.rst:141
msgid "Subclass relationships::"
msgstr ""

#: ../../library/datetime.rst:155
msgid ":class:`timedelta` Objects"
msgstr ""

#: ../../library/datetime.rst:157
msgid "A :class:`timedelta` object represents a duration, the difference between two dates or times."
msgstr ""

#: ../../library/datetime.rst:162
msgid "All arguments are optional and default to ``0``.  Arguments may be integers or floats, and may be positive or negative."
msgstr ""

#: ../../library/datetime.rst:165
msgid "Only *days*, *seconds* and *microseconds* are stored internally.  Arguments are converted to those units:"
msgstr ""

#: ../../library/datetime.rst:168
msgid "A millisecond is converted to 1000 microseconds."
msgstr ""

#: ../../library/datetime.rst:169
msgid "A minute is converted to 60 seconds."
msgstr ""

#: ../../library/datetime.rst:170
msgid "An hour is converted to 3600 seconds."
msgstr ""

#: ../../library/datetime.rst:171
msgid "A week is converted to 7 days."
msgstr ""

#: ../../library/datetime.rst:173
msgid "and days, seconds and microseconds are then normalized so that the representation is unique, with"
msgstr ""

#: ../../library/datetime.rst:176
msgid "``0 <= microseconds < 1000000``"
msgstr ""

#: ../../library/datetime.rst:177
msgid "``0 <= seconds < 3600*24`` (the number of seconds in one day)"
msgstr ""

#: ../../library/datetime.rst:178
msgid "``-999999999 <= days <= 999999999``"
msgstr ""

#: ../../library/datetime.rst:180
msgid "If any argument is a float and there are fractional microseconds, the fractional microseconds left over from all arguments are combined and their sum is rounded to the nearest microsecond using round-half-to-even tiebreaker.  If no argument is a float, the conversion and normalization processes are exact (no information is lost)."
msgstr ""

#: ../../library/datetime.rst:187
msgid "If the normalized value of days lies outside the indicated range, :exc:`OverflowError` is raised."
msgstr ""

#: ../../library/datetime.rst:190
msgid "Note that normalization of negative values may be surprising at first. For example,"
msgstr ""

#: ../../library/datetime.rst:199
msgid "Class attributes are:"
msgstr ""

#: ../../library/datetime.rst:203
msgid "The most negative :class:`timedelta` object, ``timedelta(-999999999)``."
msgstr ""

#: ../../library/datetime.rst:208
msgid "The most positive :class:`timedelta` object, ``timedelta(days=999999999, hours=23, minutes=59, seconds=59, microseconds=999999)``."
msgstr ""

#: ../../library/datetime.rst:214
msgid "The smallest possible difference between non-equal :class:`timedelta` objects, ``timedelta(microseconds=1)``."
msgstr ""

#: ../../library/datetime.rst:217
msgid "Note that, because of normalization, ``timedelta.max`` > ``-timedelta.min``. ``-timedelta.max`` is not representable as a :class:`timedelta` object."
msgstr ""

#: ../../library/datetime.rst:220
#: ../../library/datetime.rst:478
#: ../../library/datetime.rst:886
#: ../../library/datetime.rst:1447
msgid "Instance attributes (read-only):"
msgstr ""

#: ../../library/datetime.rst:223
msgid "Attribute"
msgstr ""

#: ../../library/datetime.rst:223
msgid "Value"
msgstr ""

#: ../../library/datetime.rst:225
msgid "``days``"
msgstr ""

#: ../../library/datetime.rst:225
msgid "Between -999999999 and 999999999 inclusive"
msgstr ""

#: ../../library/datetime.rst:227
msgid "``seconds``"
msgstr ""

#: ../../library/datetime.rst:227
msgid "Between 0 and 86399 inclusive"
msgstr ""

#: ../../library/datetime.rst:229
msgid "``microseconds``"
msgstr ""

#: ../../library/datetime.rst:229
msgid "Between 0 and 999999 inclusive"
msgstr ""

#: ../../library/datetime.rst:232
#: ../../library/datetime.rst:495
#: ../../library/datetime.rst:939
#: ../../library/datetime.rst:1486
msgid "Supported operations:"
msgstr ""

#: ../../library/datetime.rst:237
#: ../../library/datetime.rst:498
#: ../../library/datetime.rst:942
msgid "Operation"
msgstr ""

#: ../../library/datetime.rst:237
#: ../../library/datetime.rst:498
#: ../../library/datetime.rst:942
msgid "Result"
msgstr ""

#: ../../library/datetime.rst:239
msgid "``t1 = t2 + t3``"
msgstr ""

#: ../../library/datetime.rst:239
msgid "Sum of *t2* and *t3*. Afterwards *t1*-*t2* == *t3* and *t1*-*t3* == *t2* are true. (1)"
msgstr ""

#: ../../library/datetime.rst:242
msgid "``t1 = t2 - t3``"
msgstr ""

#: ../../library/datetime.rst:242
msgid "Difference of *t2* and *t3*. Afterwards *t1* == *t2* - *t3* and *t2* == *t1* + *t3* are true. (1)(6)"
msgstr ""

#: ../../library/datetime.rst:246
msgid "``t1 = t2 * i or t1 = i * t2``"
msgstr ""

#: ../../library/datetime.rst:246
msgid "Delta multiplied by an integer. Afterwards *t1* // i == *t2* is true, provided ``i != 0``."
msgstr ""

#: ../../library/datetime.rst:250
msgid "In general, *t1* \\* i == *t1* \\* (i-1) + *t1* is true. (1)"
msgstr ""

#: ../../library/datetime.rst:253
msgid "``t1 = t2 * f or t1 = f * t2``"
msgstr ""

#: ../../library/datetime.rst:253
msgid "Delta multiplied by a float. The result is rounded to the nearest multiple of timedelta.resolution using round-half-to-even."
msgstr ""

#: ../../library/datetime.rst:257
msgid "``f = t2 / t3``"
msgstr ""

#: ../../library/datetime.rst:257
msgid "Division (3) of *t2* by *t3*.  Returns a :class:`float` object."
msgstr ""

#: ../../library/datetime.rst:260
msgid "``t1 = t2 / f or t1 = t2 / i``"
msgstr ""

#: ../../library/datetime.rst:260
msgid "Delta divided by a float or an int. The result is rounded to the nearest multiple of timedelta.resolution using round-half-to-even."
msgstr ""

#: ../../library/datetime.rst:264
msgid "``t1 = t2 // i`` or ``t1 = t2 // t3``"
msgstr ""

#: ../../library/datetime.rst:264
msgid "The floor is computed and the remainder (if any) is thrown away.  In the second case, an integer is returned. (3)"
msgstr ""

#: ../../library/datetime.rst:268
msgid "``t1 = t2 % t3``"
msgstr ""

#: ../../library/datetime.rst:268
msgid "The remainder is computed as a :class:`timedelta` object. (3)"
msgstr ""

#: ../../library/datetime.rst:271
msgid "``q, r = divmod(t1, t2)``"
msgstr ""

#: ../../library/datetime.rst:271
msgid "Computes the quotient and the remainder: ``q = t1 // t2`` (3) and ``r = t1 % t2``. q is an integer and r is a :class:`timedelta` object."
msgstr ""

#: ../../library/datetime.rst:276
msgid "``+t1``"
msgstr ""

#: ../../library/datetime.rst:276
msgid "Returns a :class:`timedelta` object with the same value. (2)"
msgstr ""

#: ../../library/datetime.rst:279
msgid "``-t1``"
msgstr ""

#: ../../library/datetime.rst:279
msgid "equivalent to :class:`timedelta`\\ (-*t1.days*, -*t1.seconds*, -*t1.microseconds*), and to *t1*\\* -1. (1)(4)"
msgstr ""

#: ../../library/datetime.rst:284
msgid "``abs(t)``"
msgstr ""

#: ../../library/datetime.rst:284
msgid "equivalent to +\\ *t* when ``t.days >= 0``, and to -*t* when ``t.days < 0``. (2)"
msgstr ""

#: ../../library/datetime.rst:287
msgid "``str(t)``"
msgstr ""

#: ../../library/datetime.rst:287
msgid "Returns a string in the form ``[D day[s], ][H]H:MM:SS[.UUUUUU]``, where D is negative for negative ``t``. (5)"
msgstr ""

#: ../../library/datetime.rst:291
msgid "``repr(t)``"
msgstr ""

#: ../../library/datetime.rst:291
msgid "Returns a string representation of the :class:`timedelta` object as a constructor call with canonical attribute values."
msgstr ""

#: ../../library/datetime.rst:297
#: ../../library/datetime.rst:512
#: ../../library/datetime.rst:2170
msgid "Notes:"
msgstr ""

#: ../../library/datetime.rst:300
msgid "This is exact, but may overflow."
msgstr ""

#: ../../library/datetime.rst:303
msgid "This is exact, and cannot overflow."
msgstr ""

#: ../../library/datetime.rst:306
msgid "Division by 0 raises :exc:`ZeroDivisionError`."
msgstr ""

#: ../../library/datetime.rst:309
msgid "-*timedelta.max* is not representable as a :class:`timedelta` object."
msgstr ""

#: ../../library/datetime.rst:312
msgid "String representations of :class:`timedelta` objects are normalized similarly to their internal representation.  This leads to somewhat unusual results for negative timedeltas.  For example:"
msgstr ""

#: ../../library/datetime.rst:322
msgid "The expression ``t2 - t3`` will always be equal to the expression ``t2 + (-t3)`` except when t3 is equal to ``timedelta.max``; in that case the former will produce a result while the latter will overflow."
msgstr ""

#: ../../library/datetime.rst:326
msgid "In addition to the operations listed above :class:`timedelta` objects support certain additions and subtractions with :class:`date` and :class:`.datetime` objects (see below)."
msgstr ""

#: ../../library/datetime.rst:330
msgid "Floor division and true division of a :class:`timedelta` object by another :class:`timedelta` object are now supported, as are remainder operations and the :func:`divmod` function.  True division and multiplication of a :class:`timedelta` object by a :class:`float` object are now supported."
msgstr ""

#: ../../library/datetime.rst:337
msgid "Comparisons of :class:`timedelta` objects are supported with the :class:`timedelta` object representing the smaller duration considered to be the smaller timedelta. In order to stop mixed-type comparisons from falling back to the default comparison by object address, when a :class:`timedelta` object is compared to an object of a different type, :exc:`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The latter cases return :const:`False` or :const:`True`, respectively."
msgstr ""

#: ../../library/datetime.rst:345
msgid ":class:`timedelta` objects are :term:`hashable` (usable as dictionary keys), support efficient pickling, and in Boolean contexts, a :class:`timedelta` object is considered to be true if and only if it isn't equal to ``timedelta(0)``."
msgstr ""

#: ../../library/datetime.rst:349
#: ../../library/datetime.rst:542
#: ../../library/datetime.rst:1016
#: ../../library/datetime.rst:1536
msgid "Instance methods:"
msgstr ""

#: ../../library/datetime.rst:353
msgid "Return the total number of seconds contained in the duration. Equivalent to ``td / timedelta(seconds=1)``."
msgstr ""

#: ../../library/datetime.rst:356
msgid "Note that for very large time intervals (greater than 270 years on most platforms) this method will lose microsecond accuracy."
msgstr ""

#: ../../library/datetime.rst:362
msgid "Example usage:"
msgstr ""

#: ../../library/datetime.rst:388
msgid ":class:`date` Objects"
msgstr ""

#: ../../library/datetime.rst:390
msgid "A :class:`date` object represents a date (year, month and day) in an idealized calendar, the current Gregorian calendar indefinitely extended in both directions.  January 1 of year 1 is called day number 1, January 2 of year 1 is called day number 2, and so on.  This matches the definition of the \"proleptic Gregorian\" calendar in Dershowitz and Reingold's book Calendrical Calculations, where it's the base calendar for all computations.  See the book for algorithms for converting between proleptic Gregorian ordinals and many other calendar systems."
msgstr ""

#: ../../library/datetime.rst:402
msgid "All arguments are required.  Arguments may be integers, in the following ranges:"
msgstr ""

#: ../../library/datetime.rst:405
msgid "``MINYEAR <= year <= MAXYEAR``"
msgstr ""

#: ../../library/datetime.rst:406
msgid "``1 <= month <= 12``"
msgstr ""

#: ../../library/datetime.rst:407
msgid "``1 <= day <= number of days in the given month and year``"
msgstr ""

#: ../../library/datetime.rst:409
#: ../../library/datetime.rst:720
msgid "If an argument outside those ranges is given, :exc:`ValueError` is raised."
msgstr ""

#: ../../library/datetime.rst:412
#: ../../library/datetime.rst:725
msgid "Other constructors, all class methods:"
msgstr ""

#: ../../library/datetime.rst:416
msgid "Return the current local date.  This is equivalent to ``date.fromtimestamp(time.time())``."
msgstr ""

#: ../../library/datetime.rst:422
msgid "Return the local date corresponding to the POSIX timestamp, such as is returned by :func:`time.time`.  This may raise :exc:`OverflowError`, if the timestamp is out of the range of values supported by the platform C :c:func:`localtime` function, and :exc:`OSError` on :c:func:`localtime` failure. It's common for this to be restricted to years from 1970 through 2038.  Note that on non-POSIX systems that include leap seconds in their notion of a timestamp, leap seconds are ignored by :meth:`fromtimestamp`."
msgstr ""

#: ../../library/datetime.rst:430
msgid "Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is out of the range of values supported by the platform C :c:func:`localtime` function. Raise :exc:`OSError` instead of :exc:`ValueError` on :c:func:`localtime` failure."
msgstr ""

#: ../../library/datetime.rst:439
msgid "Return the date corresponding to the proleptic Gregorian ordinal, where January 1 of year 1 has ordinal 1.  :exc:`ValueError` is raised unless ``1 <= ordinal <= date.max.toordinal()``. For any date *d*, ``date.fromordinal(d.toordinal()) == d``."
msgstr ""

#: ../../library/datetime.rst:447
msgid "Return a :class:`date` corresponding to a *date_string* in the format emitted by :meth:`date.isoformat`. Specifically, this function supports strings in the format(s) ``YYYY-MM-DD``."
msgstr ""

#: ../../library/datetime.rst:453
msgid "This does not support parsing arbitrary ISO 8601 strings - it is only intended as the inverse operation of :meth:`date.isoformat`."
msgstr ""

#: ../../library/datetime.rst:460
#: ../../library/datetime.rst:866
#: ../../library/datetime.rst:1427
#: ../../library/datetime.rst:1996
msgid "Class attributes:"
msgstr ""

#: ../../library/datetime.rst:464
msgid "The earliest representable date, ``date(MINYEAR, 1, 1)``."
msgstr ""

#: ../../library/datetime.rst:469
msgid "The latest representable date, ``date(MAXYEAR, 12, 31)``."
msgstr ""

#: ../../library/datetime.rst:474
msgid "The smallest possible difference between non-equal date objects, ``timedelta(days=1)``."
msgstr ""

#: ../../library/datetime.rst:482
#: ../../library/datetime.rst:890
msgid "Between :const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr ""

#: ../../library/datetime.rst:487
#: ../../library/datetime.rst:895
msgid "Between 1 and 12 inclusive."
msgstr ""

#: ../../library/datetime.rst:492
#: ../../library/datetime.rst:900
msgid "Between 1 and the number of days in the given month of the given year."
msgstr ""

#: ../../library/datetime.rst:500
msgid "``date2 = date1 + timedelta``"
msgstr ""

#: ../../library/datetime.rst:500
msgid "*date2* is ``timedelta.days`` days removed from *date1*.  (1)"
msgstr ""

#: ../../library/datetime.rst:503
msgid "``date2 = date1 - timedelta``"
msgstr ""

#: ../../library/datetime.rst:503
msgid "Computes *date2* such that ``date2 + timedelta == date1``. (2)"
msgstr ""

#: ../../library/datetime.rst:506
msgid "``timedelta = date1 - date2``"
msgstr ""

#: ../../library/datetime.rst:506
#: ../../library/datetime.rst:948
msgid "\\(3)"
msgstr ""

#: ../../library/datetime.rst:508
msgid "``date1 < date2``"
msgstr ""

#: ../../library/datetime.rst:508
msgid "*date1* is considered less than *date2* when *date1* precedes *date2* in time. (4)"
msgstr ""

#: ../../library/datetime.rst:515
msgid "*date2* is moved forward in time if ``timedelta.days > 0``, or backward if ``timedelta.days < 0``.  Afterward ``date2 - date1 == timedelta.days``. ``timedelta.seconds`` and ``timedelta.microseconds`` are ignored. :exc:`OverflowError` is raised if ``date2.year`` would be smaller than :const:`MINYEAR` or larger than :const:`MAXYEAR`."
msgstr ""

#: ../../library/datetime.rst:522
msgid "``timedelta.seconds`` and ``timedelta.microseconds`` are ignored."
msgstr ""

#: ../../library/datetime.rst:525
msgid "This is exact, and cannot overflow.  timedelta.seconds and timedelta.microseconds are 0, and date2 + timedelta == date1 after."
msgstr ""

#: ../../library/datetime.rst:529
msgid "In other words, ``date1 < date2`` if and only if ``date1.toordinal() < date2.toordinal()``. Date comparison raises :exc:`TypeError` if the other comparand isn't also a :class:`date` object. However, ``NotImplemented`` is returned instead if the other comparand has a :meth:`timetuple` attribute.  This hook gives other kinds of date objects a chance at implementing mixed-type comparison. If not, when a :class:`date` object is compared to an object of a different type, :exc:`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The latter cases return :const:`False` or :const:`True`, respectively."
msgstr ""

#: ../../library/datetime.rst:539
msgid "Dates can be used as dictionary keys. In Boolean contexts, all :class:`date` objects are considered to be true."
msgstr ""

#: ../../library/datetime.rst:546
msgid "Return a date with the same value, except for those parameters given new values by whichever keyword arguments are specified.  For example, if ``d == date(2002, 12, 31)``, then ``d.replace(day=26) == date(2002, 12, 26)``."
msgstr ""

#: ../../library/datetime.rst:553
msgid "Return a :class:`time.struct_time` such as returned by :func:`time.localtime`. The hours, minutes and seconds are 0, and the DST flag is -1. ``d.timetuple()`` is equivalent to ``time.struct_time((d.year, d.month, d.day, 0, 0, 0, d.weekday(), yday, -1))``, where ``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the day number within the current year starting with ``1`` for January 1st."
msgstr ""

#: ../../library/datetime.rst:563
msgid "Return the proleptic Gregorian ordinal of the date, where January 1 of year 1 has ordinal 1.  For any :class:`date` object *d*, ``date.fromordinal(d.toordinal()) == d``."
msgstr ""

#: ../../library/datetime.rst:570
msgid "Return the day of the week as an integer, where Monday is 0 and Sunday is 6. For example, ``date(2002, 12, 4).weekday() == 2``, a Wednesday. See also :meth:`isoweekday`."
msgstr ""

#: ../../library/datetime.rst:577
msgid "Return the day of the week as an integer, where Monday is 1 and Sunday is 7. For example, ``date(2002, 12, 4).isoweekday() == 3``, a Wednesday. See also :meth:`weekday`, :meth:`isocalendar`."
msgstr ""

#: ../../library/datetime.rst:584
msgid "Return a 3-tuple, (ISO year, ISO week number, ISO weekday)."
msgstr ""

#: ../../library/datetime.rst:586
msgid "The ISO calendar is a widely used variant of the Gregorian calendar. See https://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm for a good explanation."
msgstr ""

#: ../../library/datetime.rst:590
msgid "The ISO year consists of 52 or 53 full weeks, and where a week starts on a Monday and ends on a Sunday.  The first week of an ISO year is the first (Gregorian) calendar week of a year containing a Thursday. This is called week number 1, and the ISO year of that Thursday is the same as its Gregorian year."
msgstr ""

#: ../../library/datetime.rst:595
msgid "For example, 2004 begins on a Thursday, so the first week of ISO year 2004 begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004, so that ``date(2003, 12, 29).isocalendar() == (2004, 1, 1)`` and ``date(2004, 1, 4).isocalendar() == (2004, 1, 7)``."
msgstr ""

#: ../../library/datetime.rst:603
msgid "Return a string representing the date in ISO 8601 format, 'YYYY-MM-DD'.  For example, ``date(2002, 12, 4).isoformat() == '2002-12-04'``."
msgstr ""

#: ../../library/datetime.rst:609
msgid "For a date *d*, ``str(d)`` is equivalent to ``d.isoformat()``."
msgstr ""

#: ../../library/datetime.rst:614
msgid "Return a string representing the date, for example ``date(2002, 12, 4).ctime() == 'Wed Dec 4 00:00:00 2002'``. ``d.ctime()`` is equivalent to ``time.ctime(time.mktime(d.timetuple()))`` on platforms where the native C :c:func:`ctime` function (which :func:`time.ctime` invokes, but which :meth:`date.ctime` does not invoke) conforms to the C standard."
msgstr ""

#: ../../library/datetime.rst:623
msgid "Return a string representing the date, controlled by an explicit format string. Format codes referring to hours, minutes or seconds will see 0 values. For a complete list of formatting directives, see :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../../library/datetime.rst:631
msgid "Same as :meth:`.date.strftime`. This makes it possible to specify a format string for a :class:`.date` object in :ref:`formatted string literals <f-strings>` and when using :meth:`str.format`. For a complete list of formatting directives, see :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../../library/datetime.rst:638
msgid "Example of counting days to an event::"
msgstr ""

#: ../../library/datetime.rst:656
msgid "Example of working with :class:`date`:"
msgstr ""

#: ../../library/datetime.rst:695
msgid ":class:`.datetime` Objects"
msgstr ""

#: ../../library/datetime.rst:697
msgid "A :class:`.datetime` object is a single object containing all the information from a :class:`date` object and a :class:`.time` object.  Like a :class:`date` object, :class:`.datetime` assumes the current Gregorian calendar extended in both directions; like a time object, :class:`.datetime` assumes there are exactly 3600\\*24 seconds in every day."
msgstr ""

#: ../../library/datetime.rst:703
msgid "Constructor:"
msgstr ""

#: ../../library/datetime.rst:707
msgid "The year, month and day arguments are required.  *tzinfo* may be ``None``, or an instance of a :class:`tzinfo` subclass.  The remaining arguments may be integers, in the following ranges:"
msgstr ""

#: ../../library/datetime.rst:711
msgid "``MINYEAR <= year <= MAXYEAR``,"
msgstr ""

#: ../../library/datetime.rst:712
msgid "``1 <= month <= 12``,"
msgstr ""

#: ../../library/datetime.rst:713
msgid "``1 <= day <= number of days in the given month and year``,"
msgstr ""

#: ../../library/datetime.rst:714
#: ../../library/datetime.rst:1418
msgid "``0 <= hour < 24``,"
msgstr ""

#: ../../library/datetime.rst:715
#: ../../library/datetime.rst:1419
msgid "``0 <= minute < 60``,"
msgstr ""

#: ../../library/datetime.rst:716
#: ../../library/datetime.rst:1420
msgid "``0 <= second < 60``,"
msgstr ""

#: ../../library/datetime.rst:717
#: ../../library/datetime.rst:1421
msgid "``0 <= microsecond < 1000000``,"
msgstr ""

#: ../../library/datetime.rst:718
#: ../../library/datetime.rst:1422
msgid "``fold in [0, 1]``."
msgstr ""

#: ../../library/datetime.rst:722
#: ../../library/datetime.rst:1050
#: ../../library/datetime.rst:1546
msgid "Added the ``fold`` argument."
msgstr ""

#: ../../library/datetime.rst:729
msgid "Return the current local datetime, with :attr:`.tzinfo` ``None``. This is equivalent to ``datetime.fromtimestamp(time.time())``. See also :meth:`now`, :meth:`fromtimestamp`."
msgstr ""

#: ../../library/datetime.rst:736
msgid "Return the current local date and time.  If optional argument *tz* is ``None`` or not specified, this is like :meth:`today`, but, if possible, supplies more precision than can be gotten from going through a :func:`time.time` timestamp (for example, this may be possible on platforms supplying the C :c:func:`gettimeofday` function)."
msgstr ""

#: ../../library/datetime.rst:742
msgid "If *tz* is not ``None``, it must be an instance of a :class:`tzinfo` subclass, and the current date and time are converted to *tz*’s time zone.  In this case the result is equivalent to ``tz.fromutc(datetime.utcnow().replace(tzinfo=tz))``. See also :meth:`today`, :meth:`utcnow`."
msgstr ""

#: ../../library/datetime.rst:750
msgid "Return the current UTC date and time, with :attr:`.tzinfo` ``None``. This is like :meth:`now`, but returns the current UTC date and time, as a naive :class:`.datetime` object.  An aware current UTC datetime can be obtained by calling ``datetime.now(timezone.utc)``.  See also :meth:`now`."
msgstr ""

#: ../../library/datetime.rst:757
msgid "Return the local date and time corresponding to the POSIX timestamp, such as is returned by :func:`time.time`. If optional argument *tz* is ``None`` or not specified, the timestamp is converted to the platform's local date and time, and the returned :class:`.datetime` object is naive."
msgstr ""

#: ../../library/datetime.rst:762
msgid "If *tz* is not ``None``, it must be an instance of a :class:`tzinfo` subclass, and the timestamp is converted to *tz*’s time zone.  In this case the result is equivalent to ``tz.fromutc(datetime.utcfromtimestamp(timestamp).replace(tzinfo=tz))``."
msgstr ""

#: ../../library/datetime.rst:767
msgid ":meth:`fromtimestamp` may raise :exc:`OverflowError`, if the timestamp is out of the range of values supported by the platform C :c:func:`localtime` or :c:func:`gmtime` functions, and :exc:`OSError` on :c:func:`localtime` or :c:func:`gmtime` failure. It's common for this to be restricted to years in 1970 through 2038. Note that on non-POSIX systems that include leap seconds in their notion of a timestamp, leap seconds are ignored by :meth:`fromtimestamp`, and then it's possible to have two timestamps differing by a second that yield identical :class:`.datetime` objects. See also :meth:`utcfromtimestamp`."
msgstr ""

#: ../../library/datetime.rst:777
msgid "Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is out of the range of values supported by the platform C :c:func:`localtime` or :c:func:`gmtime` functions. Raise :exc:`OSError` instead of :exc:`ValueError` on :c:func:`localtime` or :c:func:`gmtime` failure."
msgstr ""

#: ../../library/datetime.rst:784
msgid ":meth:`fromtimestamp` may return instances with :attr:`.fold` set to 1."
msgstr ""

#: ../../library/datetime.rst:789
msgid "Return the UTC :class:`.datetime` corresponding to the POSIX timestamp, with :attr:`.tzinfo` ``None``. This may raise :exc:`OverflowError`, if the timestamp is out of the range of values supported by the platform C :c:func:`gmtime` function, and :exc:`OSError` on :c:func:`gmtime` failure. It's common for this to be restricted to years in 1970 through 2038."
msgstr ""

#: ../../library/datetime.rst:795
msgid "To get an aware :class:`.datetime` object, call :meth:`fromtimestamp`::"
msgstr ""

#: ../../library/datetime.rst:799
msgid "On the POSIX compliant platforms, it is equivalent to the following expression::"
msgstr ""

#: ../../library/datetime.rst:804
msgid "except the latter formula always supports the full years range: between :const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr ""

#: ../../library/datetime.rst:807
msgid "Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is out of the range of values supported by the platform C :c:func:`gmtime` function. Raise :exc:`OSError` instead of :exc:`ValueError` on :c:func:`gmtime` failure."
msgstr ""

#: ../../library/datetime.rst:816
msgid "Return the :class:`.datetime` corresponding to the proleptic Gregorian ordinal, where January 1 of year 1 has ordinal 1. :exc:`ValueError` is raised unless ``1 <= ordinal <= datetime.max.toordinal()``.  The hour, minute, second and microsecond of the result are all 0, and :attr:`.tzinfo` is ``None``."
msgstr ""

#: ../../library/datetime.rst:824
msgid "Return a new :class:`.datetime` object whose date components are equal to the given :class:`date` object's, and whose time components are equal to the given :class:`.time` object's.  If the *tzinfo* argument is provided, its value is used to set the :attr:`.tzinfo` attribute of the result, otherwise the :attr:`~.time.tzinfo` attribute of the *time* argument is used."
msgstr ""

#: ../../library/datetime.rst:831
msgid "For any :class:`.datetime` object *d*, ``d == datetime.combine(d.date(), d.time(), d.tzinfo)``.  If date is a :class:`.datetime` object, its time components and :attr:`.tzinfo` attributes are ignored."
msgstr ""

#: ../../library/datetime.rst:836
msgid "Added the *tzinfo* argument."
msgstr ""

#: ../../library/datetime.rst:842
msgid "Return a :class:`datetime` corresponding to a *date_string* in one of the formats emitted by :meth:`date.isoformat` and :meth:`datetime.isoformat`. Specifically, this function supports strings in the format(s) ``YYYY-MM-DD[*HH[:MM[:SS[.fff[fff]]]][+HH:MM[:SS[.ffffff]]]]``, where ``*`` can match any single character."
msgstr ""

#: ../../library/datetime.rst:850
msgid "This does not support parsing arbitrary ISO 8601 strings - it is only intended as the inverse operation of :meth:`datetime.isoformat`."
msgstr ""

#: ../../library/datetime.rst:857
msgid "Return a :class:`.datetime` corresponding to *date_string*, parsed according to *format*.  This is equivalent to ``datetime(*(time.strptime(date_string, format)[0:6]))``. :exc:`ValueError` is raised if the date_string and format can't be parsed by :func:`time.strptime` or if it returns a value which isn't a time tuple. For a complete list of formatting directives, see :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../../library/datetime.rst:870
msgid "The earliest representable :class:`.datetime`, ``datetime(MINYEAR, 1, 1, tzinfo=None)``."
msgstr ""

#: ../../library/datetime.rst:876
msgid "The latest representable :class:`.datetime`, ``datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None)``."
msgstr ""

#: ../../library/datetime.rst:882
msgid "The smallest possible difference between non-equal :class:`.datetime` objects, ``timedelta(microseconds=1)``."
msgstr ""

#: ../../library/datetime.rst:905
#: ../../library/datetime.rst:1451
msgid "In ``range(24)``."
msgstr ""

#: ../../library/datetime.rst:910
#: ../../library/datetime.rst:915
#: ../../library/datetime.rst:1456
#: ../../library/datetime.rst:1461
msgid "In ``range(60)``."
msgstr ""

#: ../../library/datetime.rst:920
#: ../../library/datetime.rst:1466
msgid "In ``range(1000000)``."
msgstr ""

#: ../../library/datetime.rst:925
msgid "The object passed as the *tzinfo* argument to the :class:`.datetime` constructor, or ``None`` if none was passed."
msgstr ""

#: ../../library/datetime.rst:931
#: ../../library/datetime.rst:1477
msgid "In ``[0, 1]``.  Used to disambiguate wall times during a repeated interval.  (A repeated interval occurs when clocks are rolled back at the end of daylight saving time or when the UTC offset for the current zone is decreased for political reasons.) The value 0 (1) represents the earlier (later) of the two moments with the same wall time representation."
msgstr ""

#: ../../library/datetime.rst:944
msgid "``datetime2 = datetime1 + timedelta``"
msgstr ""

#: ../../library/datetime.rst:944
#: ../../library/datetime.rst:2045
#: ../../library/datetime.rst:2050
#: ../../library/datetime.rst:2062
#: ../../library/datetime.rst:2067
#: ../../library/datetime.rst:2127
#: ../../library/datetime.rst:2132
#: ../../library/datetime.rst:2136
msgid "\\(1)"
msgstr ""

#: ../../library/datetime.rst:946
msgid "``datetime2 = datetime1 - timedelta``"
msgstr ""

#: ../../library/datetime.rst:946
#: ../../library/datetime.rst:2078
msgid "\\(2)"
msgstr ""

#: ../../library/datetime.rst:948
msgid "``timedelta = datetime1 - datetime2``"
msgstr ""

#: ../../library/datetime.rst:950
msgid "``datetime1 < datetime2``"
msgstr ""

#: ../../library/datetime.rst:950
msgid "Compares :class:`.datetime` to :class:`.datetime`. (4)"
msgstr ""

#: ../../library/datetime.rst:955
msgid "datetime2 is a duration of timedelta removed from datetime1, moving forward in time if ``timedelta.days`` > 0, or backward if ``timedelta.days`` < 0.  The result has the same :attr:`~.datetime.tzinfo` attribute as the input datetime, and datetime2 - datetime1 == timedelta after. :exc:`OverflowError` is raised if datetime2.year would be smaller than :const:`MINYEAR` or larger than :const:`MAXYEAR`. Note that no time zone adjustments are done even if the input is an aware object."
msgstr ""

#: ../../library/datetime.rst:964
msgid "Computes the datetime2 such that datetime2 + timedelta == datetime1. As for addition, the result has the same :attr:`~.datetime.tzinfo` attribute as the input datetime, and no time zone adjustments are done even if the input is aware."
msgstr ""

#: ../../library/datetime.rst:969
msgid "Subtraction of a :class:`.datetime` from a :class:`.datetime` is defined only if both operands are naive, or if both are aware.  If one is aware and the other is naive, :exc:`TypeError` is raised."
msgstr ""

#: ../../library/datetime.rst:973
msgid "If both are naive, or both are aware and have the same :attr:`~.datetime.tzinfo` attribute, the :attr:`~.datetime.tzinfo` attributes are ignored, and the result is a :class:`timedelta` object *t* such that ``datetime2 + t == datetime1``.  No time zone adjustments are done in this case."
msgstr ""

#: ../../library/datetime.rst:978
msgid "If both are aware and have different :attr:`~.datetime.tzinfo` attributes, ``a-b`` acts as if *a* and *b* were first converted to naive UTC datetimes first.  The result is ``(a.replace(tzinfo=None) - a.utcoffset()) - (b.replace(tzinfo=None) - b.utcoffset())`` except that the implementation never overflows."
msgstr ""

#: ../../library/datetime.rst:984
msgid "*datetime1* is considered less than *datetime2* when *datetime1* precedes *datetime2* in time."
msgstr ""

#: ../../library/datetime.rst:987
msgid "If one comparand is naive and the other is aware, :exc:`TypeError` is raised if an order comparison is attempted.  For equality comparisons, naive instances are never equal to aware instances."
msgstr ""

#: ../../library/datetime.rst:991
msgid "If both comparands are aware, and have the same :attr:`~.datetime.tzinfo` attribute, the common :attr:`~.datetime.tzinfo` attribute is ignored and the base datetimes are compared.  If both comparands are aware and have different :attr:`~.datetime.tzinfo` attributes, the comparands are first adjusted by subtracting their UTC offsets (obtained from ``self.utcoffset()``)."
msgstr ""

#: ../../library/datetime.rst:997
msgid "Equality comparisons between naive and aware :class:`.datetime` instances don't raise :exc:`TypeError`."
msgstr ""

#: ../../library/datetime.rst:1003
msgid "In order to stop comparison from falling back to the default scheme of comparing object addresses, datetime comparison normally raises :exc:`TypeError` if the other comparand isn't also a :class:`.datetime` object.  However, ``NotImplemented`` is returned instead if the other comparand has a :meth:`timetuple` attribute.  This hook gives other kinds of date objects a chance at implementing mixed-type comparison.  If not, when a :class:`.datetime` object is compared to an object of a different type, :exc:`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The latter cases return :const:`False` or :const:`True`, respectively."
msgstr ""

#: ../../library/datetime.rst:1013
msgid ":class:`.datetime` objects can be used as dictionary keys. In Boolean contexts, all :class:`.datetime` objects are considered to be true."
msgstr ""

#: ../../library/datetime.rst:1020
msgid "Return :class:`date` object with same year, month and day."
msgstr ""

#: ../../library/datetime.rst:1025
msgid "Return :class:`.time` object with same hour, minute, second, microsecond and fold. :attr:`.tzinfo` is ``None``.  See also method :meth:`timetz`."
msgstr ""

#: ../../library/datetime.rst:1028
#: ../../library/datetime.rst:1037
msgid "The fold value is copied to the returned :class:`.time` object."
msgstr ""

#: ../../library/datetime.rst:1034
msgid "Return :class:`.time` object with same hour, minute, second, microsecond, fold, and tzinfo attributes.  See also method :meth:`time`."
msgstr ""

#: ../../library/datetime.rst:1045
msgid "Return a datetime with the same attributes, except for those attributes given new values by whichever keyword arguments are specified.  Note that ``tzinfo=None`` can be specified to create a naive datetime from an aware datetime with no conversion of date and time data."
msgstr ""

#: ../../library/datetime.rst:1056
msgid "Return a :class:`.datetime` object with new :attr:`.tzinfo` attribute *tz*, adjusting the date and time data so the result is the same UTC time as *self*, but in *tz*'s local time."
msgstr ""

#: ../../library/datetime.rst:1060
msgid "If provided, *tz* must be an instance of a :class:`tzinfo` subclass, and its :meth:`utcoffset` and :meth:`dst` methods must not return ``None``.  If *self* is naive, it is presumed to represent time in the system timezone."
msgstr ""

#: ../../library/datetime.rst:1064
msgid "If called without arguments (or with ``tz=None``) the system local timezone is assumed for the target timezone.  The ``.tzinfo`` attribute of the converted datetime instance will be set to an instance of :class:`timezone` with the zone name and offset obtained from the OS."
msgstr ""

#: ../../library/datetime.rst:1069
msgid "If ``self.tzinfo`` is *tz*, ``self.astimezone(tz)`` is equal to *self*:  no adjustment of date or time data is performed. Else the result is local time in the timezone *tz*, representing the same UTC time as *self*:  after ``astz = dt.astimezone(tz)``, ``astz - astz.utcoffset()`` will have the same date and time data as ``dt - dt.utcoffset()``."
msgstr ""

#: ../../library/datetime.rst:1075
msgid "If you merely want to attach a time zone object *tz* to a datetime *dt* without adjustment of date and time data, use ``dt.replace(tzinfo=tz)``.  If you merely want to remove the time zone object from an aware datetime *dt* without conversion of date and time data, use ``dt.replace(tzinfo=None)``."
msgstr ""

#: ../../library/datetime.rst:1080
msgid "Note that the default :meth:`tzinfo.fromutc` method can be overridden in a :class:`tzinfo` subclass to affect the result returned by :meth:`astimezone`. Ignoring error cases, :meth:`astimezone` acts like::"
msgstr ""

#: ../../library/datetime.rst:1092
msgid "*tz* now can be omitted."
msgstr ""

#: ../../library/datetime.rst:1095
msgid "The :meth:`astimezone` method can now be called on naive instances that are presumed to represent system local time."
msgstr ""

#: ../../library/datetime.rst:1102
msgid "If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo.utcoffset(self)``, and raises an exception if the latter doesn't return ``None`` or a :class:`timedelta` object with magnitude less than one day."
msgstr ""

#: ../../library/datetime.rst:1106
#: ../../library/datetime.rst:1618
#: ../../library/datetime.rst:1717
#: ../../library/datetime.rst:1958
#: ../../library/datetime.rst:1969
#: ../../library/datetime.rst:2226
msgid "The UTC offset is not restricted to a whole number of minutes."
msgstr ""

#: ../../library/datetime.rst:1112
msgid "If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo.dst(self)``, and raises an exception if the latter doesn't return ``None`` or a :class:`timedelta` object with magnitude less than one day."
msgstr ""

#: ../../library/datetime.rst:1116
#: ../../library/datetime.rst:1628
#: ../../library/datetime.rst:1769
msgid "The DST offset is not restricted to a whole number of minutes."
msgstr ""

#: ../../library/datetime.rst:1122
msgid "If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo.tzname(self)``, raises an exception if the latter doesn't return ``None`` or a string object,"
msgstr ""

#: ../../library/datetime.rst:1129
msgid "Return a :class:`time.struct_time` such as returned by :func:`time.localtime`. ``d.timetuple()`` is equivalent to ``time.struct_time((d.year, d.month, d.day, d.hour, d.minute, d.second, d.weekday(), yday, dst))``, where ``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the day number within the current year starting with ``1`` for January 1st. The :attr:`tm_isdst` flag of the result is set according to the :meth:`dst` method: :attr:`.tzinfo` is ``None`` or :meth:`dst` returns ``None``, :attr:`tm_isdst` is set to ``-1``; else if :meth:`dst` returns a non-zero value, :attr:`tm_isdst` is set to ``1``; else :attr:`tm_isdst` is set to ``0``."
msgstr ""

#: ../../library/datetime.rst:1142
msgid "If :class:`.datetime` instance *d* is naive, this is the same as ``d.timetuple()`` except that :attr:`tm_isdst` is forced to 0 regardless of what ``d.dst()`` returns.  DST is never in effect for a UTC time."
msgstr ""

#: ../../library/datetime.rst:1146
msgid "If *d* is aware, *d* is normalized to UTC time, by subtracting ``d.utcoffset()``, and a :class:`time.struct_time` for the normalized time is returned.  :attr:`tm_isdst` is forced to 0. Note that an :exc:`OverflowError` may be raised if *d*.year was ``MINYEAR`` or ``MAXYEAR`` and UTC adjustment spills over a year boundary."
msgstr ""

#: ../../library/datetime.rst:1156
msgid "Return the proleptic Gregorian ordinal of the date.  The same as ``self.date().toordinal()``."
msgstr ""

#: ../../library/datetime.rst:1161
msgid "Return POSIX timestamp corresponding to the :class:`.datetime` instance.  The return value is a :class:`float` similar to that returned by :func:`time.time`."
msgstr ""

#: ../../library/datetime.rst:1165
msgid "Naive :class:`.datetime` instances are assumed to represent local time and this method relies on the platform C :c:func:`mktime` function to perform the conversion.  Since :class:`.datetime` supports wider range of values than :c:func:`mktime` on many platforms, this method may raise :exc:`OverflowError` for times far in the past or far in the future."
msgstr ""

#: ../../library/datetime.rst:1172
msgid "For aware :class:`.datetime` instances, the return value is computed as::"
msgstr ""

#: ../../library/datetime.rst:1179
msgid "The :meth:`timestamp` method uses the :attr:`.fold` attribute to disambiguate the times during a repeated interval."
msgstr ""

#: ../../library/datetime.rst:1185
msgid "There is no method to obtain the POSIX timestamp directly from a naive :class:`.datetime` instance representing UTC time.  If your application uses this convention and your system timezone is not set to UTC, you can obtain the POSIX timestamp by supplying ``tzinfo=timezone.utc``::"
msgstr ""

#: ../../library/datetime.rst:1193
msgid "or by calculating the timestamp directly::"
msgstr ""

#: ../../library/datetime.rst:1199
msgid "Return the day of the week as an integer, where Monday is 0 and Sunday is 6. The same as ``self.date().weekday()``. See also :meth:`isoweekday`."
msgstr ""

#: ../../library/datetime.rst:1205
msgid "Return the day of the week as an integer, where Monday is 1 and Sunday is 7. The same as ``self.date().isoweekday()``. See also :meth:`weekday`, :meth:`isocalendar`."
msgstr ""

#: ../../library/datetime.rst:1212
msgid "Return a 3-tuple, (ISO year, ISO week number, ISO weekday).  The same as ``self.date().isocalendar()``."
msgstr ""

#: ../../library/datetime.rst:1218
msgid "Return a string representing the date and time in ISO 8601 format, YYYY-MM-DDTHH:MM:SS.ffffff or, if :attr:`microsecond` is 0, YYYY-MM-DDTHH:MM:SS"
msgstr ""

#: ../../library/datetime.rst:1222
msgid "If :meth:`utcoffset` does not return ``None``, a string is appended, giving the UTC offset: YYYY-MM-DDTHH:MM:SS.ffffff+HH:MM[:SS[.ffffff]] or, if :attr:`microsecond` is 0 YYYY-MM-DDTHH:MM:SS+HH:MM[:SS[.ffffff]]."
msgstr ""

#: ../../library/datetime.rst:1227
msgid "The optional argument *sep* (default ``'T'``) is a one-character separator, placed between the date and time portions of the result.  For example,"
msgstr ""

#: ../../library/datetime.rst:1237
#: ../../library/datetime.rst:1557
msgid "The optional argument *timespec* specifies the number of additional components of the time to include (the default is ``'auto'``). It can be one of the following:"
msgstr ""

#: ../../library/datetime.rst:1241
#: ../../library/datetime.rst:1561
msgid "``'auto'``: Same as ``'seconds'`` if :attr:`microsecond` is 0, same as ``'microseconds'`` otherwise."
msgstr ""

#: ../../library/datetime.rst:1243
#: ../../library/datetime.rst:1563
msgid "``'hours'``: Include the :attr:`hour` in the two-digit HH format."
msgstr ""

#: ../../library/datetime.rst:1244
#: ../../library/datetime.rst:1564
msgid "``'minutes'``: Include :attr:`hour` and :attr:`minute` in HH:MM format."
msgstr ""

#: ../../library/datetime.rst:1245
#: ../../library/datetime.rst:1565
msgid "``'seconds'``: Include :attr:`hour`, :attr:`minute`, and :attr:`second` in HH:MM:SS format."
msgstr ""

#: ../../library/datetime.rst:1247
#: ../../library/datetime.rst:1567
msgid "``'milliseconds'``: Include full time, but truncate fractional second part to milliseconds. HH:MM:SS.sss format."
msgstr ""

#: ../../library/datetime.rst:1249
#: ../../library/datetime.rst:1569
msgid "``'microseconds'``: Include full time in HH:MM:SS.ffffff format."
msgstr ""

#: ../../library/datetime.rst:1253
#: ../../library/datetime.rst:1573
msgid "Excluded time components are truncated, not rounded."
msgstr ""

#: ../../library/datetime.rst:1255
#: ../../library/datetime.rst:1575
msgid ":exc:`ValueError` will be raised on an invalid *timespec* argument."
msgstr ""

#: ../../library/datetime.rst:1265
#: ../../library/datetime.rst:1587
msgid "Added the *timespec* argument."
msgstr ""

#: ../../library/datetime.rst:1271
msgid "For a :class:`.datetime` instance *d*, ``str(d)`` is equivalent to ``d.isoformat(' ')``."
msgstr ""

#: ../../library/datetime.rst:1277
msgid "Return a string representing the date and time, for example ``datetime(2002, 12, 4, 20, 30, 40).ctime() == 'Wed Dec  4 20:30:40 2002'``. ``d.ctime()`` is equivalent to ``time.ctime(time.mktime(d.timetuple()))`` on platforms where the native C :c:func:`ctime` function (which :func:`time.ctime` invokes, but which :meth:`datetime.ctime` does not invoke) conforms to the C standard."
msgstr ""

#: ../../library/datetime.rst:1286
msgid "Return a string representing the date and time, controlled by an explicit format string.  For a complete list of formatting directives, see :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../../library/datetime.rst:1293
msgid "Same as :meth:`.datetime.strftime`.  This makes it possible to specify a format string for a :class:`.datetime` object in :ref:`formatted string literals <f-strings>` and when using :meth:`str.format`.  For a complete list of formatting directives, see :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../../library/datetime.rst:1300
msgid "Examples of working with datetime objects:"
msgstr ""

#: ../../library/datetime.rst:1347
msgid "Using datetime with tzinfo:"
msgstr ""

#: ../../library/datetime.rst:1407
msgid ":class:`.time` Objects"
msgstr ""

#: ../../library/datetime.rst:1409
msgid "A time object represents a (local) time of day, independent of any particular day, and subject to adjustment via a :class:`tzinfo` object."
msgstr ""

#: ../../library/datetime.rst:1414
msgid "All arguments are optional.  *tzinfo* may be ``None``, or an instance of a :class:`tzinfo` subclass.  The remaining arguments may be integers, in the following ranges:"
msgstr ""

#: ../../library/datetime.rst:1424
msgid "If an argument outside those ranges is given, :exc:`ValueError` is raised.  All default to ``0`` except *tzinfo*, which defaults to :const:`None`."
msgstr ""

#: ../../library/datetime.rst:1432
msgid "The earliest representable :class:`.time`, ``time(0, 0, 0, 0)``."
msgstr ""

#: ../../library/datetime.rst:1437
msgid "The latest representable :class:`.time`, ``time(23, 59, 59, 999999)``."
msgstr ""

#: ../../library/datetime.rst:1442
msgid "The smallest possible difference between non-equal :class:`.time` objects, ``timedelta(microseconds=1)``, although note that arithmetic on :class:`.time` objects is not supported."
msgstr ""

#: ../../library/datetime.rst:1471
msgid "The object passed as the tzinfo argument to the :class:`.time` constructor, or ``None`` if none was passed."
msgstr ""

#: ../../library/datetime.rst:1488
msgid "comparison of :class:`.time` to :class:`.time`, where *a* is considered less than *b* when *a* precedes *b* in time.  If one comparand is naive and the other is aware, :exc:`TypeError` is raised if an order comparison is attempted. For equality comparisons, naive instances are never equal to aware instances."
msgstr ""

#: ../../library/datetime.rst:1493
msgid "If both comparands are aware, and have the same :attr:`~time.tzinfo` attribute, the common :attr:`~time.tzinfo` attribute is ignored and the base times are compared.  If both comparands are aware and have different :attr:`~time.tzinfo` attributes, the comparands are first adjusted by subtracting their UTC offsets (obtained from ``self.utcoffset()``). In order to stop mixed-type comparisons from falling back to the default comparison by object address, when a :class:`.time` object is compared to an object of a different type, :exc:`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The latter cases return :const:`False` or :const:`True`, respectively."
msgstr ""

#: ../../library/datetime.rst:1503
msgid "Equality comparisons between naive and aware :class:`~datetime.time` instances don't raise :exc:`TypeError`."
msgstr ""

#: ../../library/datetime.rst:1507
msgid "hash, use as dict key"
msgstr ""

#: ../../library/datetime.rst:1509
msgid "efficient pickling"
msgstr ""

#: ../../library/datetime.rst:1511
msgid "In boolean contexts, a :class:`.time` object is always considered to be true."
msgstr ""

#: ../../library/datetime.rst:1513
msgid "Before Python 3.5, a :class:`.time` object was considered to be false if it represented midnight in UTC.  This behavior was considered obscure and error-prone and has been removed in Python 3.5.  See :issue:`13936` for full details."
msgstr ""

#: ../../library/datetime.rst:1520
msgid "Other constructor:"
msgstr ""

#: ../../library/datetime.rst:1524
msgid "Return a :class:`time` corresponding to a *time_string* in one of the formats emitted by :meth:`time.isoformat`. Specifically, this function supports strings in the format(s) ``HH[:MM[:SS[.fff[fff]]]][+HH:MM[:SS[.ffffff]]]``."
msgstr ""

#: ../../library/datetime.rst:1530
msgid "This does not support parsing arbitrary ISO 8601 strings - it is only intended as the inverse operation of :meth:`time.isoformat`."
msgstr ""

#: ../../library/datetime.rst:1541
msgid "Return a :class:`.time` with the same value, except for those attributes given new values by whichever keyword arguments are specified.  Note that ``tzinfo=None`` can be specified to create a naive :class:`.time` from an aware :class:`.time`, without conversion of the time data."
msgstr ""

#: ../../library/datetime.rst:1552
msgid "Return a string representing the time in ISO 8601 format, HH:MM:SS.ffffff or, if :attr:`microsecond` is 0, HH:MM:SS If :meth:`utcoffset` does not return ``None``, a string is appended, giving the UTC offset: HH:MM:SS.ffffff+HH:MM[:SS[.ffffff]] or, if self.microsecond is 0, HH:MM:SS+HH:MM[:SS[.ffffff]]."
msgstr ""

#: ../../library/datetime.rst:1593
msgid "For a time *t*, ``str(t)`` is equivalent to ``t.isoformat()``."
msgstr ""

#: ../../library/datetime.rst:1598
msgid "Return a string representing the time, controlled by an explicit format string.  For a complete list of formatting directives, see :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../../library/datetime.rst:1605
msgid "Same as :meth:`.time.strftime`. This makes it possible to specify a format string for a :class:`.time` object in :ref:`formatted string literals <f-strings>` and when using :meth:`str.format`.  For a complete list of formatting directives, see :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../../library/datetime.rst:1614
msgid "If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo.utcoffset(None)``, and raises an exception if the latter doesn't return ``None`` or a :class:`timedelta` object with magnitude less than one day."
msgstr ""

#: ../../library/datetime.rst:1624
msgid "If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo.dst(None)``, and raises an exception if the latter doesn't return ``None``, or a :class:`timedelta` object with magnitude less than one day."
msgstr ""

#: ../../library/datetime.rst:1633
msgid "If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo.tzname(None)``, or raises an exception if the latter doesn't return ``None`` or a string object."
msgstr ""

#: ../../library/datetime.rst:1637
msgid "Example:"
msgstr ""

#: ../../library/datetime.rst:1667
msgid ":class:`tzinfo` Objects"
msgstr ""

#: ../../library/datetime.rst:1671
msgid "This is an abstract base class, meaning that this class should not be instantiated directly.  You need to derive a concrete subclass, and (at least) supply implementations of the standard :class:`tzinfo` methods needed by the :class:`.datetime` methods you use.  The :mod:`datetime` module supplies a simple concrete subclass of :class:`tzinfo`, :class:`timezone`, which can represent timezones with fixed offset from UTC such as UTC itself or North American EST and EDT."
msgstr ""

#: ../../library/datetime.rst:1679
msgid "An instance of (a concrete subclass of) :class:`tzinfo` can be passed to the constructors for :class:`.datetime` and :class:`.time` objects. The latter objects view their attributes as being in local time, and the :class:`tzinfo` object supports methods revealing offset of local time from UTC, the name of the time zone, and DST offset, all relative to a date or time object passed to them."
msgstr ""

#: ../../library/datetime.rst:1685
msgid "Special requirement for pickling:  A :class:`tzinfo` subclass must have an :meth:`__init__` method that can be called with no arguments, else it can be pickled but possibly not unpickled again.  This is a technical requirement that may be relaxed in the future."
msgstr ""

#: ../../library/datetime.rst:1690
msgid "A concrete subclass of :class:`tzinfo` may need to implement the following methods.  Exactly which methods are needed depends on the uses made of aware :mod:`datetime` objects.  If in doubt, simply implement all of them."
msgstr ""

#: ../../library/datetime.rst:1697
msgid "Return offset of local time from UTC, as a :class:`timedelta` object that is positive east of UTC.  If local time is west of UTC, this should be negative.  Note that this is intended to be the total offset from UTC; for example, if a :class:`tzinfo` object represents both time zone and DST adjustments, :meth:`utcoffset` should return their sum.  If the UTC offset isn't known, return ``None``.  Else the value returned must be a :class:`timedelta` object strictly between ``-timedelta(hours=24)`` and ``timedelta(hours=24)`` (the magnitude of the offset must be less than one day).  Most implementations of :meth:`utcoffset` will probably look like one of these two::"
msgstr ""

#: ../../library/datetime.rst:1711
msgid "If :meth:`utcoffset` does not return ``None``, :meth:`dst` should not return ``None`` either."
msgstr ""

#: ../../library/datetime.rst:1714
msgid "The default implementation of :meth:`utcoffset` raises :exc:`NotImplementedError`."
msgstr ""

#: ../../library/datetime.rst:1723
msgid "Return the daylight saving time (DST) adjustment, as a :class:`timedelta` object or ``None`` if DST information isn't known.  Return ``timedelta(0)`` if DST is not in effect. If DST is in effect, return the offset as a :class:`timedelta` object (see :meth:`utcoffset` for details). Note that DST offset, if applicable, has already been added to the UTC offset returned by :meth:`utcoffset`, so there's no need to consult :meth:`dst` unless you're interested in obtaining DST info separately.  For example, :meth:`datetime.timetuple` calls its :attr:`~.datetime.tzinfo` attribute's :meth:`dst` method to determine how the :attr:`tm_isdst` flag should be set, and :meth:`tzinfo.fromutc` calls :meth:`dst` to account for DST changes when crossing time zones."
msgstr ""

#: ../../library/datetime.rst:1735
msgid "An instance *tz* of a :class:`tzinfo` subclass that models both standard and daylight times must be consistent in this sense:"
msgstr ""

#: ../../library/datetime.rst:1738
msgid "``tz.utcoffset(dt) - tz.dst(dt)``"
msgstr ""

#: ../../library/datetime.rst:1740
msgid "must return the same result for every :class:`.datetime` *dt* with ``dt.tzinfo == tz``  For sane :class:`tzinfo` subclasses, this expression yields the time zone's \"standard offset\", which should not depend on the date or the time, but only on geographic location.  The implementation of :meth:`datetime.astimezone` relies on this, but cannot detect violations; it's the programmer's responsibility to ensure it.  If a :class:`tzinfo` subclass cannot guarantee this, it may be able to override the default implementation of :meth:`tzinfo.fromutc` to work correctly with :meth:`astimezone` regardless."
msgstr ""

#: ../../library/datetime.rst:1749
msgid "Most implementations of :meth:`dst` will probably look like one of these two::"
msgstr ""

#: ../../library/datetime.rst:1755
msgid "or ::"
msgstr ""

#: ../../library/datetime.rst:1767
msgid "The default implementation of :meth:`dst` raises :exc:`NotImplementedError`."
msgstr ""

#: ../../library/datetime.rst:1775
msgid "Return the time zone name corresponding to the :class:`.datetime` object *dt*, as a string. Nothing about string names is defined by the :mod:`datetime` module, and there's no requirement that it mean anything in particular.  For example, \"GMT\", \"UTC\", \"-500\", \"-5:00\", \"EDT\", \"US/Eastern\", \"America/New York\" are all valid replies.  Return ``None`` if a string name isn't known.  Note that this is a method rather than a fixed string primarily because some :class:`tzinfo` subclasses will wish to return different names depending on the specific value of *dt* passed, especially if the :class:`tzinfo` class is accounting for daylight time."
msgstr ""

#: ../../library/datetime.rst:1785
msgid "The default implementation of :meth:`tzname` raises :exc:`NotImplementedError`."
msgstr ""

#: ../../library/datetime.rst:1788
msgid "These methods are called by a :class:`.datetime` or :class:`.time` object, in response to their methods of the same names.  A :class:`.datetime` object passes itself as the argument, and a :class:`.time` object passes ``None`` as the argument.  A :class:`tzinfo` subclass's methods should therefore be prepared to accept a *dt* argument of ``None``, or of class :class:`.datetime`."
msgstr ""

#: ../../library/datetime.rst:1794
msgid "When ``None`` is passed, it's up to the class designer to decide the best response.  For example, returning ``None`` is appropriate if the class wishes to say that time objects don't participate in the :class:`tzinfo` protocols.  It may be more useful for ``utcoffset(None)`` to return the standard UTC offset, as there is no other convention for discovering the standard offset."
msgstr ""

#: ../../library/datetime.rst:1800
msgid "When a :class:`.datetime` object is passed in response to a :class:`.datetime` method, ``dt.tzinfo`` is the same object as *self*.  :class:`tzinfo` methods can rely on this, unless user code calls :class:`tzinfo` methods directly.  The intent is that the :class:`tzinfo` methods interpret *dt* as being in local time, and not need worry about objects in other timezones."
msgstr ""

#: ../../library/datetime.rst:1806
msgid "There is one more :class:`tzinfo` method that a subclass may wish to override:"
msgstr ""

#: ../../library/datetime.rst:1811
msgid "This is called from the default :class:`datetime.astimezone()` implementation.  When called from that, ``dt.tzinfo`` is *self*, and *dt*'s date and time data are to be viewed as expressing a UTC time.  The purpose of :meth:`fromutc` is to adjust the date and time data, returning an equivalent datetime in *self*'s local time."
msgstr ""

#: ../../library/datetime.rst:1817
msgid "Most :class:`tzinfo` subclasses should be able to inherit the default :meth:`fromutc` implementation without problems.  It's strong enough to handle fixed-offset time zones, and time zones accounting for both standard and daylight time, and the latter even if the DST transition times differ in different years.  An example of a time zone the default :meth:`fromutc` implementation may not handle correctly in all cases is one where the standard offset (from UTC) depends on the specific date and time passed, which can happen for political reasons. The default implementations of :meth:`astimezone` and :meth:`fromutc` may not produce the result you want if the result is one of the hours straddling the moment the standard offset changes."
msgstr ""

#: ../../library/datetime.rst:1828
msgid "Skipping code for error cases, the default :meth:`fromutc` implementation acts like::"
msgstr ""

#: ../../library/datetime.rst:1846
msgid "In the following :download:`tzinfo_examples.py <../includes/tzinfo_examples.py>` file there are some examples of :class:`tzinfo` classes:"
msgstr ""

#: ../../library/datetime.rst:1852
msgid "Note that there are unavoidable subtleties twice per year in a :class:`tzinfo` subclass accounting for both standard and daylight time, at the DST transition points.  For concreteness, consider US Eastern (UTC -0500), where EDT begins the minute after 1:59 (EST) on the second Sunday in March, and ends the minute after 1:59 (EDT) on the first Sunday in November::"
msgstr ""

#: ../../library/datetime.rst:1866
msgid "When DST starts (the \"start\" line), the local wall clock leaps from 1:59 to 3:00.  A wall time of the form 2:MM doesn't really make sense on that day, so ``astimezone(Eastern)`` won't deliver a result with ``hour == 2`` on the day DST begins.  For example, at the Spring forward transition of 2016, we get"
msgstr ""

#: ../../library/datetime.rst:1885
msgid "When DST ends (the \"end\" line), there's a potentially worse problem: there's an hour that can't be spelled unambiguously in local wall time: the last hour of daylight time.  In Eastern, that's times of the form 5:MM UTC on the day daylight time ends.  The local wall clock leaps from 1:59 (daylight time) back to 1:00 (standard time) again. Local times of the form 1:MM are ambiguous. :meth:`astimezone` mimics the local clock's behavior by mapping two adjacent UTC hours into the same local hour then.  In the Eastern example, UTC times of the form 5:MM and 6:MM both map to 1:MM when converted to Eastern, but earlier times have the :attr:`~datetime.fold` attribute set to 0 and the later times have it set to 1. For example, at the Fall back transition of 2016, we get"
msgstr ""

#: ../../library/datetime.rst:1907
msgid "Note that the :class:`datetime` instances that differ only by the value of the :attr:`~datetime.fold` attribute are considered equal in comparisons."
msgstr ""

#: ../../library/datetime.rst:1910
msgid "Applications that can't bear wall-time ambiguities should explicitly check the value of the :attr:`~datetime.fold` attribute or avoid using hybrid :class:`tzinfo` subclasses; there are no ambiguities when using :class:`timezone`, or any other fixed-offset :class:`tzinfo` subclass (such as a class representing only EST (fixed offset -5 hours), or only EDT (fixed offset -4 hours))."
msgstr ""

#: ../../library/datetime.rst:1923
msgid "`dateutil.tz <https://dateutil.readthedocs.io/en/stable/tz.html>`_"
msgstr ""

#: ../../library/datetime.rst:1919
msgid "The standard library has :class:`timezone` class for handling arbitrary fixed offsets from UTC and :attr:`timezone.utc` as UTC timezone instance."
msgstr ""

#: ../../library/datetime.rst:1922
msgid "*dateutil.tz* library brings the *IANA timezone database* (also known as the Olson database) to Python and its usage is recommended."
msgstr ""

#: ../../library/datetime.rst:1929
msgid "`IANA timezone database <https://www.iana.org/time-zones>`_"
msgstr ""

#: ../../library/datetime.rst:1926
msgid "The Time Zone Database (often called tz, tzdata or zoneinfo) contains code and data that represent the history of local time for many representative locations around the globe. It is updated periodically to reflect changes made by political bodies to time zone boundaries, UTC offsets, and daylight-saving rules."
msgstr ""

#: ../../library/datetime.rst:1936
msgid ":class:`timezone` Objects"
msgstr ""

#: ../../library/datetime.rst:1938
msgid "The :class:`timezone` class is a subclass of :class:`tzinfo`, each instance of which represents a timezone defined by a fixed offset from UTC.  Note that objects of this class cannot be used to represent timezone information in the locations where different offsets are used in different days of the year or where historical changes have been made to civil time."
msgstr ""

#: ../../library/datetime.rst:1948
msgid "The *offset* argument must be specified as a :class:`timedelta` object representing the difference between the local time and UTC.  It must be strictly between ``-timedelta(hours=24)`` and ``timedelta(hours=24)``, otherwise :exc:`ValueError` is raised."
msgstr ""

#: ../../library/datetime.rst:1953
msgid "The *name* argument is optional.  If specified it must be a string that will be used as the value returned by the :meth:`datetime.tzname` method."
msgstr ""

#: ../../library/datetime.rst:1964
msgid "Return the fixed value specified when the :class:`timezone` instance is constructed.  The *dt* argument is ignored.  The return value is a :class:`timedelta` instance equal to the difference between the local time and UTC."
msgstr ""

#: ../../library/datetime.rst:1974
msgid "Return the fixed value specified when the :class:`timezone` instance is constructed.  If *name* is not provided in the constructor, the name returned by ``tzname(dt)`` is generated from the value of the ``offset`` as follows.  If *offset* is ``timedelta(0)``, the name is \"UTC\", otherwise it is a string 'UTC±HH:MM', where ± is the sign of ``offset``, HH and MM are two digits of ``offset.hours`` and ``offset.minutes`` respectively."
msgstr ""

#: ../../library/datetime.rst:1982
msgid "Name generated from ``offset=timedelta(0)`` is now plain 'UTC', not 'UTC+00:00'."
msgstr ""

#: ../../library/datetime.rst:1989
msgid "Always returns ``None``."
msgstr ""

#: ../../library/datetime.rst:1993
msgid "Return ``dt + offset``.  The *dt* argument must be an aware :class:`.datetime` instance, with ``tzinfo`` set to ``self``."
msgstr ""

#: ../../library/datetime.rst:2000
msgid "The UTC timezone, ``timezone(timedelta(0))``."
msgstr ""

#: ../../library/datetime.rst:2009
msgid ":meth:`strftime` and :meth:`strptime` Behavior"
msgstr ""

#: ../../library/datetime.rst:2011
msgid ":class:`date`, :class:`.datetime`, and :class:`.time` objects all support a ``strftime(format)`` method, to create a string representing the time under the control of an explicit format string.  Broadly speaking, ``d.strftime(fmt)`` acts like the :mod:`time` module's ``time.strftime(fmt, d.timetuple())`` although not all objects support a :meth:`timetuple` method."
msgstr ""

#: ../../library/datetime.rst:2017
msgid "Conversely, the :meth:`datetime.strptime` class method creates a :class:`.datetime` object from a string representing a date and time and a corresponding format string. ``datetime.strptime(date_string, format)`` is equivalent to ``datetime(*(time.strptime(date_string, format)[0:6]))``, except when the format includes sub-second components or timezone offset information, which are supported in ``datetime.strptime`` but are discarded by ``time.strptime``."
msgstr ""

#: ../../library/datetime.rst:2024
msgid "For :class:`.time` objects, the format codes for year, month, and day should not be used, as time objects have no such values.  If they're used anyway, ``1900`` is substituted for the year, and ``1`` for the month and day."
msgstr ""

#: ../../library/datetime.rst:2028
msgid "For :class:`date` objects, the format codes for hours, minutes, seconds, and microseconds should not be used, as :class:`date` objects have no such values.  If they're used anyway, ``0`` is substituted for them."
msgstr ""

#: ../../library/datetime.rst:2032
msgid "The full set of format codes supported varies across platforms, because Python calls the platform C library's :func:`strftime` function, and platform variations are common.  To see the full set of format codes supported on your platform, consult the :manpage:`strftime(3)` documentation."
msgstr ""

#: ../../library/datetime.rst:2037
msgid "The following is a list of all the format codes that the C standard (1989 version) requires, and these work on all platforms with a standard C implementation.  Note that the 1999 version of the C standard added additional format codes."
msgstr ""

#: ../../library/datetime.rst:2043
#: ../../library/datetime.rst:2150
msgid "Directive"
msgstr ""

#: ../../library/datetime.rst:2043
#: ../../library/datetime.rst:2150
msgid "Meaning"
msgstr ""

#: ../../library/datetime.rst:2043
#: ../../library/datetime.rst:2150
msgid "Example"
msgstr ""

#: ../../library/datetime.rst:2043
#: ../../library/datetime.rst:2150
msgid "Notes"
msgstr ""

#: ../../library/datetime.rst:2045
msgid "``%a``"
msgstr ""

#: ../../library/datetime.rst:2045
msgid "Weekday as locale's abbreviated name."
msgstr ""

#: ../../library/datetime.rst:0
msgid "Sun, Mon, ..., Sat (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "So, Mo, ..., Sa (de_DE)"
msgstr ""

#: ../../library/datetime.rst:2050
msgid "``%A``"
msgstr ""

#: ../../library/datetime.rst:2050
msgid "Weekday as locale's full name."
msgstr ""

#: ../../library/datetime.rst:0
msgid "Sunday, Monday, ..., Saturday (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "Sonntag, Montag, ..., Samstag (de_DE)"
msgstr ""

#: ../../library/datetime.rst:2055
msgid "``%w``"
msgstr ""

#: ../../library/datetime.rst:2055
msgid "Weekday as a decimal number, where 0 is Sunday and 6 is Saturday."
msgstr ""

#: ../../library/datetime.rst:2055
msgid "0, 1, ..., 6"
msgstr ""

#: ../../library/datetime.rst:2059
msgid "``%d``"
msgstr ""

#: ../../library/datetime.rst:2059
msgid "Day of the month as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:2059
msgid "01, 02, ..., 31"
msgstr ""

#: ../../library/datetime.rst:2062
msgid "``%b``"
msgstr ""

#: ../../library/datetime.rst:2062
msgid "Month as locale's abbreviated name."
msgstr ""

#: ../../library/datetime.rst:0
msgid "Jan, Feb, ..., Dec (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "Jan, Feb, ..., Dez (de_DE)"
msgstr ""

#: ../../library/datetime.rst:2067
msgid "``%B``"
msgstr ""

#: ../../library/datetime.rst:2067
msgid "Month as locale's full name."
msgstr ""

#: ../../library/datetime.rst:0
msgid "January, February, ..., December (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "Januar, Februar, ..., Dezember (de_DE)"
msgstr ""

#: ../../library/datetime.rst:2072
msgid "``%m``"
msgstr ""

#: ../../library/datetime.rst:2072
msgid "Month as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:2072
#: ../../library/datetime.rst:2084
msgid "01, 02, ..., 12"
msgstr ""

#: ../../library/datetime.rst:2075
msgid "``%y``"
msgstr ""

#: ../../library/datetime.rst:2075
msgid "Year without century as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:2075
msgid "00, 01, ..., 99"
msgstr ""

#: ../../library/datetime.rst:2078
msgid "``%Y``"
msgstr ""

#: ../../library/datetime.rst:2078
msgid "Year with century as a decimal number."
msgstr ""

#: ../../library/datetime.rst:2078
#: ../../library/datetime.rst:2152
msgid "0001, 0002, ..., 2013, 2014, ..., 9998, 9999"
msgstr ""

#: ../../library/datetime.rst:2081
msgid "``%H``"
msgstr ""

#: ../../library/datetime.rst:2081
msgid "Hour (24-hour clock) as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:2081
msgid "00, 01, ..., 23"
msgstr ""

#: ../../library/datetime.rst:2084
msgid "``%I``"
msgstr ""

#: ../../library/datetime.rst:2084
msgid "Hour (12-hour clock) as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:2087
msgid "``%p``"
msgstr ""

#: ../../library/datetime.rst:2087
msgid "Locale's equivalent of either AM or PM."
msgstr ""

#: ../../library/datetime.rst:0
msgid "AM, PM (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "am, pm (de_DE)"
msgstr ""

#: ../../library/datetime.rst:2087
msgid "\\(1), \\(3)"
msgstr ""

#: ../../library/datetime.rst:2090
msgid "``%M``"
msgstr ""

#: ../../library/datetime.rst:2090
msgid "Minute as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:2090
#: ../../library/datetime.rst:2093
msgid "00, 01, ..., 59"
msgstr ""

#: ../../library/datetime.rst:2093
msgid "``%S``"
msgstr ""

#: ../../library/datetime.rst:2093
msgid "Second as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:2093
msgid "\\(4)"
msgstr ""

#: ../../library/datetime.rst:2096
msgid "``%f``"
msgstr ""

#: ../../library/datetime.rst:2096
msgid "Microsecond as a decimal number, zero-padded on the left."
msgstr ""

#: ../../library/datetime.rst:2096
msgid "000000, 000001, ..., 999999"
msgstr ""

#: ../../library/datetime.rst:2096
msgid "\\(5)"
msgstr ""

#: ../../library/datetime.rst:2100
#: ../../library/datetime.rst:2224
msgid "``%z``"
msgstr ""

#: ../../library/datetime.rst:2100
msgid "UTC offset in the form ±HHMM[SS[.ffffff]] (empty string if the object is naive)."
msgstr ""

#: ../../library/datetime.rst:2100
msgid "(empty), +0000, -0400, +1030, +063415, -030712.345216"
msgstr ""

#: ../../library/datetime.rst:2100
msgid "\\(6)"
msgstr ""

#: ../../library/datetime.rst:2105
#: ../../library/datetime.rst:2239
msgid "``%Z``"
msgstr ""

#: ../../library/datetime.rst:2105
msgid "Time zone name (empty string if the object is naive)."
msgstr ""

#: ../../library/datetime.rst:2105
msgid "(empty), UTC, EST, CST"
msgstr ""

#: ../../library/datetime.rst:2108
msgid "``%j``"
msgstr ""

#: ../../library/datetime.rst:2108
msgid "Day of the year as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:2108
msgid "001, 002, ..., 366"
msgstr ""

#: ../../library/datetime.rst:2111
msgid "``%U``"
msgstr ""

#: ../../library/datetime.rst:2111
msgid "Week number of the year (Sunday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Sunday are considered to be in week 0."
msgstr ""

#: ../../library/datetime.rst:2111
#: ../../library/datetime.rst:2119
msgid "00, 01, ..., 53"
msgstr ""

#: ../../library/datetime.rst:2111
#: ../../library/datetime.rst:2119
msgid "\\(7)"
msgstr ""

#: ../../library/datetime.rst:2119
msgid "``%W``"
msgstr ""

#: ../../library/datetime.rst:2119
msgid "Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0."
msgstr ""

#: ../../library/datetime.rst:2127
msgid "``%c``"
msgstr ""

#: ../../library/datetime.rst:2127
msgid "Locale's appropriate date and time representation."
msgstr ""

#: ../../library/datetime.rst:0
msgid "Tue Aug 16 21:30:00 1988 (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "Di 16 Aug 21:30:00 1988 (de_DE)"
msgstr ""

#: ../../library/datetime.rst:2132
msgid "``%x``"
msgstr ""

#: ../../library/datetime.rst:2132
msgid "Locale's appropriate date representation."
msgstr ""

#: ../../library/datetime.rst:0
msgid "08/16/88 (None);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "08/16/1988 (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "16.08.1988 (de_DE)"
msgstr ""

#: ../../library/datetime.rst:2136
msgid "``%X``"
msgstr ""

#: ../../library/datetime.rst:2136
msgid "Locale's appropriate time representation."
msgstr ""

#: ../../library/datetime.rst:0
msgid "21:30:00 (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "21:30:00 (de_DE)"
msgstr ""

#: ../../library/datetime.rst:2139
msgid "``%%``"
msgstr ""

#: ../../library/datetime.rst:2139
msgid "A literal ``'%'`` character."
msgstr ""

#: ../../library/datetime.rst:2139
msgid "%"
msgstr ""

#: ../../library/datetime.rst:2142
msgid "Several additional directives not required by the C89 standard are included for convenience. These parameters all correspond to ISO 8601 date values. These may not be available on all platforms when used with the :meth:`strftime` method. The ISO 8601 year and ISO 8601 week directives are not interchangeable with the year and week number directives above. Calling :meth:`strptime` with incomplete or ambiguous ISO 8601 directives will raise a :exc:`ValueError`."
msgstr ""

#: ../../library/datetime.rst:2152
msgid "``%G``"
msgstr ""

#: ../../library/datetime.rst:2152
msgid "ISO 8601 year with century representing the year that contains the greater part of the ISO week (``%V``)."
msgstr ""

#: ../../library/datetime.rst:2152
#: ../../library/datetime.rst:2160
msgid "\\(8)"
msgstr ""

#: ../../library/datetime.rst:2157
msgid "``%u``"
msgstr ""

#: ../../library/datetime.rst:2157
msgid "ISO 8601 weekday as a decimal number where 1 is Monday."
msgstr ""

#: ../../library/datetime.rst:2157
msgid "1, 2, ..., 7"
msgstr ""

#: ../../library/datetime.rst:2160
msgid "``%V``"
msgstr ""

#: ../../library/datetime.rst:2160
msgid "ISO 8601 week as a decimal number with Monday as the first day of the week. Week 01 is the week containing Jan 4."
msgstr ""

#: ../../library/datetime.rst:2160
msgid "01, 02, ..., 53"
msgstr ""

#: ../../library/datetime.rst:2167
msgid "``%G``, ``%u`` and ``%V`` were added."
msgstr ""

#: ../../library/datetime.rst:2173
msgid "Because the format depends on the current locale, care should be taken when making assumptions about the output value. Field orderings will vary (for example, \"month/day/year\" versus \"day/month/year\"), and the output may contain Unicode characters encoded using the locale's default encoding (for example, if the current locale is ``ja_JP``, the default encoding could be any one of ``eucJP``, ``SJIS``, or ``utf-8``; use :meth:`locale.getlocale` to determine the current locale's encoding)."
msgstr ""

#: ../../library/datetime.rst:2182
msgid "The :meth:`strptime` method can parse years in the full [1, 9999] range, but years < 1000 must be zero-filled to 4-digit width."
msgstr ""

#: ../../library/datetime.rst:2185
msgid "In previous versions, :meth:`strftime` method was restricted to years >= 1900."
msgstr ""

#: ../../library/datetime.rst:2189
msgid "In version 3.2, :meth:`strftime` method was restricted to years >= 1000."
msgstr ""

#: ../../library/datetime.rst:2194
msgid "When used with the :meth:`strptime` method, the ``%p`` directive only affects the output hour field if the ``%I`` directive is used to parse the hour."
msgstr ""

#: ../../library/datetime.rst:2198
msgid "Unlike the :mod:`time` module, the :mod:`datetime` module does not support leap seconds."
msgstr ""

#: ../../library/datetime.rst:2202
msgid "When used with the :meth:`strptime` method, the ``%f`` directive accepts from one to six digits and zero pads on the right.  ``%f`` is an extension to the set of format characters in the C standard (but implemented separately in datetime objects, and therefore always available)."
msgstr ""

#: ../../library/datetime.rst:2209
msgid "For a naive object, the ``%z`` and ``%Z`` format codes are replaced by empty strings."
msgstr ""

#: ../../library/datetime.rst:2212
msgid "For an aware object:"
msgstr ""

#: ../../library/datetime.rst:2215
msgid ":meth:`utcoffset` is transformed into a string of the form ±HHMM[SS[.ffffff]], where HH is a 2-digit string giving the number of UTC offset hours, MM is a 2-digit string giving the number of UTC offset minutes, SS is a 2-digit string giving the number of UTC offset seconds and ffffff is a 6-digit string giving the number of UTC offset microseconds.  The ffffff part is omitted when the offset is a whole number of seconds and both the ffffff and the SS part is omitted when the offset is a whole number of minutes.  For example, if :meth:`utcoffset` returns ``timedelta(hours=-3, minutes=-30)``, ``%z`` is replaced with the string ``'-0330'``."
msgstr ""

#: ../../library/datetime.rst:2229
msgid "When the ``%z`` directive is provided to the  :meth:`strptime` method, the UTC offsets can have a colon as a separator between hours, minutes and seconds. For example, ``'+01:00:00'`` will be parsed as an offset of one hour. In addition, providing ``'Z'`` is identical to ``'+00:00'``."
msgstr ""

#: ../../library/datetime.rst:2237
msgid "If :meth:`tzname` returns ``None``, ``%Z`` is replaced by an empty string.  Otherwise ``%Z`` is replaced by the returned value, which must be a string."
msgstr ""

#: ../../library/datetime.rst:2241
msgid "When the ``%z`` directive is provided to the :meth:`strptime` method, an aware :class:`.datetime` object will be produced.  The ``tzinfo`` of the result will be set to a :class:`timezone` instance."
msgstr ""

#: ../../library/datetime.rst:2247
msgid "When used with the :meth:`strptime` method, ``%U`` and ``%W`` are only used in calculations when the day of the week and the calendar year (``%Y``) are specified."
msgstr ""

#: ../../library/datetime.rst:2252
msgid "Similar to ``%U`` and ``%W``, ``%V`` is only used in calculations when the day of the week and the ISO year (``%G``) are specified in a :meth:`strptime` format string. Also note that ``%G`` and ``%Y`` are not interchangeable."
msgstr ""

#: ../../library/datetime.rst:2258
msgid "Footnotes"
msgstr ""

#: ../../library/datetime.rst:2259
msgid "If, that is, we ignore the effects of Relativity"
msgstr ""


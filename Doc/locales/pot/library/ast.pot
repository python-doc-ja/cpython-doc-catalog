# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-16 12:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:2
msgid ":mod:`ast` --- Abstract Syntax Trees"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:10
msgid "**Source code:** :source:`Lib/ast.py`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:14
msgid "The :mod:`ast` module helps Python applications to process trees of the Python abstract syntax grammar.  The abstract syntax itself might change with each Python release; this module helps to find out programmatically what the current grammar looks like."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:19
msgid "An abstract syntax tree can be generated by passing :data:`ast.PyCF_ONLY_AST` as a flag to the :func:`compile` built-in function, or using the :func:`parse` helper provided in this module.  The result will be a tree of objects whose classes all inherit from :class:`ast.AST`.  An abstract syntax tree can be compiled into a Python code object using the built-in :func:`compile` function."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:27
msgid "Node classes"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:31
msgid "This is the base of all AST node classes.  The actual node classes are derived from the :file:`Parser/Python.asdl` file, which is reproduced :ref:`below <abstract-grammar>`.  They are defined in the :mod:`_ast` C module and re-exported in :mod:`ast`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:36
msgid "There is one class defined for each left-hand side symbol in the abstract grammar (for example, :class:`ast.stmt` or :class:`ast.expr`).  In addition, there is one class defined for each constructor on the right-hand side; these classes inherit from the classes for the left-hand side trees.  For example, :class:`ast.BinOp` inherits from :class:`ast.expr`.  For production rules with alternatives (aka \"sums\"), the left-hand side class is abstract: only instances of specific constructor nodes are ever created."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:49
msgid "Each concrete class has an attribute :attr:`_fields` which gives the names of all child nodes."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:52
msgid "Each instance of a concrete class has one attribute for each child node, of the type as defined in the grammar.  For example, :class:`ast.BinOp` instances have an attribute :attr:`left` of type :class:`ast.expr`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:56
msgid "If these attributes are marked as optional in the grammar (using a question mark), the value might be ``None``.  If the attributes can have zero-or-more values (marked with an asterisk), the values are represented as Python lists.  All possible attributes must be present and have valid values when compiling an AST with :func:`compile`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:67
msgid "Instances of :class:`ast.expr` and :class:`ast.stmt` subclasses have :attr:`lineno`, :attr:`col_offset`, :attr:`lineno`, and :attr:`col_offset` attributes.  The :attr:`lineno` and :attr:`end_lineno` are the first and last line numbers of source text span (1-indexed so the first line is line 1) and the :attr:`col_offset` and :attr:`end_col_offset` are the corresponding UTF-8 byte offsets of the first and last tokens that generated the node. The UTF-8 offset is recorded because the parser uses UTF-8 internally."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:75
msgid "Note that the end positions are not required by the compiler and are therefore optional. The end offset is *after* the last symbol, for example one can get the source segment of a one-line expression node using ``source_line[node.col_offset : node.end_col_offset]``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:80
msgid "The constructor of a class :class:`ast.T` parses its arguments as follows:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:82
msgid "If there are positional arguments, there must be as many as there are items in :attr:`T._fields`; they will be assigned as attributes of these names."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:84
msgid "If there are keyword arguments, they will set the attributes of the same names to the given values."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:87
msgid "For example, to create and populate an :class:`ast.UnaryOp` node, you could use ::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:99
msgid "or the more compact ::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:106
msgid "Class :class:`ast.Constant` is now used for all constants. Old classes :class:`ast.Num`, :class:`ast.Str`, :class:`ast.Bytes`, :class:`ast.NameConstant` and :class:`ast.Ellipsis` are still available, but they will be removed in future Python releases."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:115
msgid "Abstract Grammar"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:117
msgid "The abstract grammar is currently defined as follows:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:124
msgid ":mod:`ast` Helpers"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:126
msgid "Apart from the node classes, the :mod:`ast` module defines these utility functions and classes for traversing abstract syntax trees:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:131
msgid "Parse the source into an AST node.  Equivalent to ``compile(source, filename, mode, ast.PyCF_ONLY_AST)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:134
msgid "If ``type_comments=True`` is given, the parser is modified to check and return type comments as specified by :pep:`484` and :pep:`526`. This is equivalent to adding :data:`ast.PyCF_TYPE_COMMENTS` to the flags passed to :func:`compile()`.  This will report syntax errors for misplaced type comments.  Without this flag, type comments will be ignored, and the ``type_comment`` field on selected AST nodes will always be ``None``.  In addition, the locations of ``# type: ignore`` comments will be returned as the ``type_ignores`` attribute of :class:`Module` (otherwise it is always an empty list)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:144
msgid "In addition, if ``mode`` is ``'func_type'``, the input syntax is modified to correspond to :pep:`484` \"signature type comments\", e.g. ``(str, int) -> List[str]``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:148
msgid "Also, setting ``feature_version`` to a tuple ``(major, minor)`` will attempt to parse using that Python version's grammar. Currently ``major`` must equal to ``3``.  For example, setting ``feature_version=(3, 4)`` will allow the use of ``async`` and ``await`` as variable names.  The lowest supported version is ``(3, 4)``; the highest is ``sys.version_info[0:2]``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:156
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:177
msgid "It is possible to crash the Python interpreter with a sufficiently large/complex string due to stack depth limitations in Python's AST compiler."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:160
msgid "Added ``type_comments``, ``mode='func_type'`` and ``feature_version``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:166
msgid "Safely evaluate an expression node or a string containing a Python literal or container display.  The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and ``None``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:171
msgid "This can be used for safely evaluating strings containing Python values from untrusted sources without the need to parse the values oneself.  It is not capable of evaluating arbitrarily complex expressions, for example involving operators or indexing."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:181
msgid "Now allows bytes and set literals."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:187
msgid "Return the docstring of the given *node* (which must be a :class:`FunctionDef`, :class:`AsyncFunctionDef`, :class:`ClassDef`, or :class:`Module` node), or ``None`` if it has no docstring. If *clean* is true, clean up the docstring's indentation with :func:`inspect.cleandoc`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:193
msgid ":class:`AsyncFunctionDef` is now supported."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:199
msgid "Get source code segment of the *source* that generated *node*. If some location information (:attr:`lineno`, :attr:`end_lineno`, :attr:`col_offset`, or :attr:`end_col_offset`) is missing, return ``None``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:203
msgid "If *padded* is ``True``, the first line of a multi-line statement will be padded with spaces to match its original position."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:211
msgid "When you compile a node tree with :func:`compile`, the compiler expects :attr:`lineno` and :attr:`col_offset` attributes for every node that supports them.  This is rather tedious to fill in for generated nodes, so this helper adds these attributes recursively where not already set, by setting them to the values of the parent node.  It works recursively starting at *node*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:220
msgid "Increment the line number and end line number of each node in the tree starting at *node* by *n*. This is useful to \"move code\" to a different location in a file."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:227
msgid "Copy source location (:attr:`lineno`, :attr:`col_offset`, :attr:`end_lineno`, and :attr:`end_col_offset`) from *old_node* to *new_node* if possible, and return *new_node*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:234
msgid "Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields`` that is present on *node*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:240
msgid "Yield all direct child nodes of *node*, that is, all fields that are nodes and all items of fields that are lists of nodes."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:246
msgid "Recursively yield all descendant nodes in the tree starting at *node* (including *node* itself), in no specified order.  This is useful if you only want to modify nodes in place and don't care about the context."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:253
msgid "A node visitor base class that walks the abstract syntax tree and calls a visitor function for every node found.  This function may return a value which is forwarded by the :meth:`visit` method."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:257
msgid "This class is meant to be subclassed, with the subclass adding visitor methods."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:262
msgid "Visit a node.  The default implementation calls the method called :samp:`self.visit_{classname}` where *classname* is the name of the node class, or :meth:`generic_visit` if that method doesn't exist."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:268
msgid "This visitor calls :meth:`visit` on all children of the node."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:270
msgid "Note that child nodes of nodes that have a custom visitor method won't be visited unless the visitor calls :meth:`generic_visit` or visits them itself."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:274
msgid "Don't use the :class:`NodeVisitor` if you want to apply changes to nodes during traversal.  For this a special visitor exists (:class:`NodeTransformer`) that allows modifications."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:280
msgid "Methods :meth:`visit_Num`, :meth:`visit_Str`, :meth:`visit_Bytes`, :meth:`visit_NameConstant` and :meth:`visit_Ellipsis` are deprecated now and will not be called in future Python versions.  Add the :meth:`visit_Constant` method to handle all constant nodes."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:288
msgid "A :class:`NodeVisitor` subclass that walks the abstract syntax tree and allows modification of nodes."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:291
msgid "The :class:`NodeTransformer` will walk the AST and use the return value of the visitor methods to replace or remove the old node.  If the return value of the visitor method is ``None``, the node will be removed from its location, otherwise it is replaced with the return value.  The return value may be the original node in which case no replacement takes place."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:297
msgid "Here is an example transformer that rewrites all occurrences of name lookups (``foo``) to ``data['foo']``::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:309
msgid "Keep in mind that if the node you're operating on has child nodes you must either transform the child nodes yourself or call the :meth:`generic_visit` method for the node first."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:313
msgid "For nodes that were part of a collection of statements (that applies to all statement nodes), the visitor may also return a list of nodes rather than just a single node."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:317
msgid "Usually you use the transformer like this::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:324
msgid "Return a formatted dump of the tree in *node*.  This is mainly useful for debugging purposes.  If *annotate_fields* is true (by default), the returned string will show the names and the values for fields. If *annotate_fields* is false, the result string will be more compact by omitting unambiguous field names.  Attributes such as line numbers and column offsets are not dumped by default.  If this is wanted, *include_attributes* can be set to true."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/ast.rst:334
msgid "`Green Tree Snakes <https://greentreesnakes.readthedocs.io/>`_, an external documentation resource, has good details on working with Python ASTs."
msgstr ""

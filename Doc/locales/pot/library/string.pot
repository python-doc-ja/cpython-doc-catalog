# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-16 18:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:2
msgid ":mod:`string` --- Common string operations"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:10
msgid "**Source code:** :source:`Lib/string.py`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:14
msgid "The :mod:`string` module contains a number of useful constants and classes, as well as some deprecated legacy functions that are also available as methods on strings. In addition, Python's built-in string classes support the sequence type methods described in the :ref:`typesseq` section, and also the string-specific methods described in the :ref:`string-methods` section. To output formatted strings use template strings or the ``%`` operator described in the :ref:`string-formatting` section. Also, see the :mod:`re` module for string functions based on regular expressions."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:25
msgid "String constants"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:27
msgid "The constants defined in this module are:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:32
msgid "The concatenation of the :const:`ascii_lowercase` and :const:`ascii_uppercase` constants described below.  This value is not locale-dependent."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:38
msgid "The lowercase letters ``'abcdefghijklmnopqrstuvwxyz'``.  This value is not locale-dependent and will not change."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:44
msgid "The uppercase letters ``'ABCDEFGHIJKLMNOPQRSTUVWXYZ'``.  This value is not locale-dependent and will not change."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:50
msgid "The string ``'0123456789'``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:55
msgid "The string ``'0123456789abcdefABCDEF'``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:60
msgid "The concatenation of the strings :const:`lowercase` and :const:`uppercase` described below.  The specific value is locale-dependent, and will be updated when :func:`locale.setlocale` is called."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:67
msgid "A string containing all the characters that are considered lowercase letters. On most systems this is the string ``'abcdefghijklmnopqrstuvwxyz'``.  The specific value is locale-dependent, and will be updated when :func:`locale.setlocale` is called."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:75
msgid "The string ``'01234567'``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:80
msgid "String of ASCII characters which are considered punctuation characters in the ``C`` locale."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:86
msgid "String of characters which are considered printable.  This is a combination of :const:`digits`, :const:`letters`, :const:`punctuation`, and :const:`whitespace`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:93
msgid "A string containing all the characters that are considered uppercase letters. On most systems this is the string ``'ABCDEFGHIJKLMNOPQRSTUVWXYZ'``.  The specific value is locale-dependent, and will be updated when :func:`locale.setlocale` is called."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:101
msgid "A string containing all characters that are considered whitespace. On most systems this includes the characters space, tab, linefeed, return, formfeed, and vertical tab."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:109
msgid "Custom String Formatting"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:113
msgid "The built-in str and unicode classes provide the ability to do complex variable substitutions and value formatting via the :meth:`str.format` method described in :pep:`3101`.  The :class:`Formatter` class in the :mod:`string` module allows you to create and customize your own string formatting behaviors using the same implementation as the built-in :meth:`~str.format` method."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:122
msgid "The :class:`Formatter` class has the following public methods:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:126
msgid "The primary API method.  It takes a format string and an arbitrary set of positional and keyword arguments. It is just a wrapper that calls :meth:`vformat`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:132
msgid "This function does the actual work of formatting.  It is exposed as a separate function for cases where you want to pass in a predefined dictionary of arguments, rather than unpacking and repacking the dictionary as individual arguments using the ``*args`` and ``**kwargs`` syntax.  :meth:`vformat` does the work of breaking up the format string into character data and replacement fields.  It calls the various methods described below."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:140
msgid "In addition, the :class:`Formatter` defines a number of methods that are intended to be replaced by subclasses:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:145
msgid "Loop over the format_string and return an iterable of tuples (*literal_text*, *field_name*, *format_spec*, *conversion*).  This is used by :meth:`vformat` to break the string into either literal text, or replacement fields."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:150
msgid "The values in the tuple conceptually represent a span of literal text followed by a single replacement field.  If there is no literal text (which can happen if two replacement fields occur consecutively), then *literal_text* will be a zero-length string.  If there is no replacement field, then the values of *field_name*, *format_spec* and *conversion* will be ``None``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:159
msgid "Given *field_name* as returned by :meth:`parse` (see above), convert it to an object to be formatted.  Returns a tuple (obj, used_key).  The default version takes strings of the form defined in :pep:`3101`, such as \"0[name]\" or \"label.title\".  *args* and *kwargs* are as passed in to :meth:`vformat`.  The return value *used_key* has the same meaning as the *key* parameter to :meth:`get_value`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:168
msgid "Retrieve a given field value.  The *key* argument will be either an integer or a string.  If it is an integer, it represents the index of the positional argument in *args*; if it is a string, then it represents a named argument in *kwargs*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:173
msgid "The *args* parameter is set to the list of positional arguments to :meth:`vformat`, and the *kwargs* parameter is set to the dictionary of keyword arguments."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:177
msgid "For compound field names, these functions are only called for the first component of the field name; Subsequent components are handled through normal attribute and indexing operations."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:181
msgid "So for example, the field expression '0.name' would cause :meth:`get_value` to be called with a *key* argument of 0.  The ``name`` attribute will be looked up after :meth:`get_value` returns by calling the built-in :func:`getattr` function."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:186
msgid "If the index or keyword refers to an item that does not exist, then an :exc:`IndexError` or :exc:`KeyError` should be raised."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:191
msgid "Implement checking for unused arguments if desired.  The arguments to this function is the set of all argument keys that were actually referred to in the format string (integers for positional arguments, and strings for named arguments), and a reference to the *args* and *kwargs* that was passed to vformat.  The set of unused args can be calculated from these parameters.  :meth:`check_unused_args` is assumed to raise an exception if the check fails."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:201
msgid ":meth:`format_field` simply calls the global :func:`format` built-in.  The method is provided so that subclasses can override it."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:206
msgid "Converts the value (returned by :meth:`get_field`) given a conversion type (as in the tuple returned by the :meth:`parse` method).  The default version understands 's' (str), 'r' (repr) and 'a' (ascii) conversion types."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:215
msgid "Format String Syntax"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:217
msgid "The :meth:`str.format` method and the :class:`Formatter` class share the same syntax for format strings (although in the case of :class:`Formatter`, subclasses can define their own format string syntax)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:221
msgid "Format strings contain \"replacement fields\" surrounded by curly braces ``{}``. Anything that is not contained in braces is considered literal text, which is copied unchanged to the output.  If you need to include a brace character in the literal text, it can be escaped by doubling: ``{{`` and ``}}``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:226
msgid "The grammar for a replacement field is as follows:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:238
msgid "In less formal terms, the replacement field can start with a *field_name* that specifies the object whose value is to be formatted and inserted into the output instead of the replacement field. The *field_name* is optionally followed by a  *conversion* field, which is preceded by an exclamation point ``'!'``, and a *format_spec*, which is preceded by a colon ``':'``.  These specify a non-default format for the replacement value."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:245
msgid "See also the :ref:`formatspec` section."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:247
msgid "The *field_name* itself begins with an *arg_name* that is either a number or a keyword.  If it's a number, it refers to a positional argument, and if it's a keyword, it refers to a named keyword argument.  If the numerical arg_names in a format string are 0, 1, 2, ... in sequence, they can all be omitted (not just some) and the numbers 0, 1, 2, ... will be automatically inserted in that order. Because *arg_name* is not quote-delimited, it is not possible to specify arbitrary dictionary keys (e.g., the strings ``'10'`` or ``':-]'``) within a format string. The *arg_name* can be followed by any number of index or attribute expressions. An expression of the form ``'.name'`` selects the named attribute using :func:`getattr`, while an expression of the form ``'[index]'`` does an index lookup using :func:`__getitem__`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:259
msgid "The positional argument specifiers can be omitted for :meth:`str.format` and :meth:`unicode.format`, so ``'{} {}'`` is equivalent to ``'{0} {1}'``, ``u'{} {}'`` is equivalent to ``u'{0} {1}'``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:264
msgid "Some simple format string examples::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:273
msgid "The *conversion* field causes a type coercion before formatting.  Normally, the job of formatting a value is done by the :meth:`__format__` method of the value itself.  However, in some cases it is desirable to force a type to be formatted as a string, overriding its own definition of formatting.  By converting the value to a string before calling :meth:`__format__`, the normal formatting logic is bypassed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:280
msgid "Two conversion flags are currently supported: ``'!s'`` which calls :func:`str` on the value, and ``'!r'`` which calls :func:`repr`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:283
msgid "Some examples::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:288
msgid "The *format_spec* field contains a specification of how the value should be presented, including such details as field width, alignment, padding, decimal precision and so on.  Each value type can define its own \"formatting mini-language\" or interpretation of the *format_spec*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:293
msgid "Most built-in types support a common formatting mini-language, which is described in the next section."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:296
msgid "A *format_spec* field can also include nested replacement fields within it. These nested replacement fields may contain a field name, conversion flag and format specification, but deeper nesting is not allowed.  The replacement fields within the format_spec are substituted before the *format_spec* string is interpreted. This allows the formatting of a value to be dynamically specified."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:303
msgid "See the :ref:`formatexamples` section for some examples."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:309
msgid "Format Specification Mini-Language"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:311
msgid "\"Format specifications\" are used within replacement fields contained within a format string to define how individual values are presented (see :ref:`formatstrings`).  They can also be passed directly to the built-in :func:`format` function.  Each formattable type may define how the format specification is to be interpreted."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:317
msgid "Most built-in types implement the following options for format specifications, although some of the formatting options are only supported by the numeric types."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:320
msgid "A general convention is that an empty format string (``\"\"``) produces the same result as if you had called :func:`str` on the value. A non-empty format string typically modifies the result."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:324
msgid "The general form of a *standard format specifier* is:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:335
msgid "If a valid *align* value is specified, it can be preceded by a *fill* character that can be any character and defaults to a space if omitted. It is not possible to use a literal curly brace (\"``{``\" or \"``}``\") as the *fill* character when using the :meth:`str.format` method.  However, it is possible to insert a curly brace with a nested replacement field.  This limitation doesn't affect the :func:`format` function."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:343
msgid "The meaning of the various alignment options is as follows:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:346
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:372
msgid "Option"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:346
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:372
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:415
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:426
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:458
msgid "Meaning"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:348
msgid "``'<'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:348
msgid "Forces the field to be left-aligned within the available space (this is the default for most objects)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:351
msgid "``'>'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:351
msgid "Forces the field to be right-aligned within the available space (this is the default for numbers)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:354
msgid "``'='``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:354
msgid "Forces the padding to be placed after the sign (if any) but before the digits.  This is used for printing fields in the form '+000000120'. This alignment option is only valid for numeric types.  It becomes the default when '0' immediately precedes the field width."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:360
msgid "``'^'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:360
msgid "Forces the field to be centered within the available space."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:364
msgid "Note that unless a minimum field width is defined, the field width will always be the same size as the data to fill it, so that the alignment option has no meaning in this case."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:368
msgid "The *sign* option is only valid for number types, and can be one of the following:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:374
msgid "``'+'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:374
msgid "indicates that a sign should be used for both positive as well as negative numbers."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:377
msgid "``'-'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:377
msgid "indicates that a sign should be used only for negative numbers (this is the default behavior)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:380
msgid "space"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:380
msgid "indicates that a leading space should be used on positive numbers, and a minus sign on negative numbers."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:384
msgid "The ``'#'`` option is only valid for integers, and only for binary, octal, or hexadecimal output.  If present, it specifies that the output will be prefixed by ``'0b'``, ``'0o'``, or ``'0x'``, respectively."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:388
msgid "The ``','`` option signals the use of a comma for a thousands separator. For a locale aware separator, use the ``'n'`` integer presentation type instead."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:392
msgid "Added the ``','`` option (see also :pep:`378`)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:395
msgid "*width* is a decimal integer defining the minimum field width.  If not specified, then the field width will be determined by the content."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:398
msgid "When no explicit alignment is given, preceding the *width* field by a zero (``'0'``) character enables sign-aware zero-padding for numeric types.  This is equivalent to a *fill* character of ``'0'`` with an *alignment* type of ``'='``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:403
msgid "The *precision* is a decimal number indicating how many digits should be displayed after the decimal point for a floating point value formatted with ``'f'`` and ``'F'``, or before and after the decimal point for a floating point value formatted with ``'g'`` or ``'G'``.  For non-number types the field indicates the maximum field size - in other words, how many characters will be used from the field content. The *precision* is not allowed for integer values."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:410
msgid "Finally, the *type* determines how the data should be presented."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:412
msgid "The available string presentation types are:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:415
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:426
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:458
msgid "Type"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:417
msgid "``'s'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:417
msgid "String format. This is the default type for strings and may be omitted."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:420
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:447
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:507
msgid "None"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:420
msgid "The same as ``'s'``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:423
msgid "The available integer presentation types are:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:428
msgid "``'b'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:428
msgid "Binary format. Outputs the number in base 2."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:430
msgid "``'c'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:430
msgid "Character. Converts the integer to the corresponding unicode character before printing."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:433
msgid "``'d'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:433
msgid "Decimal Integer. Outputs the number in base 10."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:435
msgid "``'o'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:435
msgid "Octal format. Outputs the number in base 8."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:437
msgid "``'x'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:437
msgid "Hex format. Outputs the number in base 16, using lower- case letters for the digits above 9."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:440
msgid "``'X'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:440
msgid "Hex format. Outputs the number in base 16, using upper- case letters for the digits above 9."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:443
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:500
msgid "``'n'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:443
msgid "Number. This is the same as ``'d'``, except that it uses the current locale setting to insert the appropriate number separator characters."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:447
msgid "The same as ``'d'``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:450
msgid "In addition to the above presentation types, integers can be formatted with the floating point presentation types listed below (except ``'n'`` and ``None``). When doing so, :func:`float` is used to convert the integer to a floating point number before formatting."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:455
msgid "The available presentation types for floating point and decimal values are:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:460
msgid "``'e'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:460
msgid "Exponent notation. Prints the number in scientific notation using the letter 'e' to indicate the exponent. The default precision is ``6``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:464
msgid "``'E'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:464
msgid "Exponent notation. Same as ``'e'`` except it uses an upper case 'E' as the separator character."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:467
msgid "``'f'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:467
msgid "Fixed-point notation. Displays the number as a fixed-point number.  The default precision is ``6``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:470
msgid "``'F'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:470
msgid "Fixed point notation. Same as ``'f'``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:472
msgid "``'g'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:472
msgid "General format.  For a given precision ``p >= 1``, this rounds the number to ``p`` significant digits and then formats the result in either fixed-point format or in scientific notation, depending on its magnitude."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:477
msgid "The precise rules are as follows: suppose that the result formatted with presentation type ``'e'`` and precision ``p-1`` would have exponent ``exp``.  Then if ``-4 <= exp < p``, the number is formatted with presentation type ``'f'`` and precision ``p-1-exp``.  Otherwise, the number is formatted with presentation type ``'e'`` and precision ``p-1``. In both cases insignificant trailing zeros are removed from the significand, and the decimal point is also removed if there are no remaining digits following it."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:488
msgid "Positive and negative infinity, positive and negative zero, and nans, are formatted as ``inf``, ``-inf``, ``0``, ``-0`` and ``nan`` respectively, regardless of the precision."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:493
msgid "A precision of ``0`` is treated as equivalent to a precision of ``1``.  The default precision is ``6``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:496
msgid "``'G'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:496
msgid "General format. Same as ``'g'`` except switches to ``'E'`` if the number gets too large. The representations of infinity and NaN are uppercased, too."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:500
msgid "Number. This is the same as ``'g'``, except that it uses the current locale setting to insert the appropriate number separator characters."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:504
msgid "``'%'``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:504
msgid "Percentage. Multiplies the number by 100 and displays in fixed (``'f'``) format, followed by a percent sign."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:507
msgid "The same as ``'g'``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:515
msgid "Format examples"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:517
msgid "This section contains examples of the :meth:`str.format` syntax and comparison with the old ``%``-formatting."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:520
msgid "In most of the cases the syntax is similar to the old ``%``-formatting, with the addition of the ``{}`` and with ``:`` used instead of ``%``. For example, ``'%03.2f'`` can be translated to ``'{:03.2f}'``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:524
msgid "The new format syntax also supports new and different options, shown in the following examples."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:527
msgid "Accessing arguments by position::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:540
msgid "Accessing arguments by name::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:548
msgid "Accessing arguments' attributes::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:564
msgid "Accessing arguments' items::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:570
msgid "Replacing ``%s`` and ``%r``::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:575
msgid "Aligning the text and specifying a width::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:586
msgid "Replacing ``%+f``, ``%-f``, and ``% f`` and specifying a sign::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:595
msgid "Replacing ``%x`` and ``%o`` and converting the value to different bases::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:604
msgid "Using the comma as a thousands separator::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:609
msgid "Expressing a percentage::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:616
msgid "Using type-specific formatting::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:623
msgid "Nesting arguments and more complex examples::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:655
msgid "Template strings"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:659
msgid "Templates provide simpler string substitutions as described in :pep:`292`. Instead of the normal ``%``\\ -based substitutions, Templates support ``$``\\ -based substitutions, using the following rules:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:663
msgid "``$$`` is an escape; it is replaced with a single ``$``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:665
msgid "``$identifier`` names a substitution placeholder matching a mapping key of ``\"identifier\"``.  By default, ``\"identifier\"`` must spell a Python identifier.  The first non-identifier character after the ``$`` character terminates this placeholder specification."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:670
msgid "``${identifier}`` is equivalent to ``$identifier``.  It is required when valid identifier characters follow the placeholder but are not part of the placeholder, such as ``\"${noun}ification\"``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:674
msgid "Any other appearance of ``$`` in the string will result in a :exc:`ValueError` being raised."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:677
msgid "The :mod:`string` module provides a :class:`Template` class that implements these rules.  The methods of :class:`Template` are:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:683
msgid "The constructor takes a single argument which is the template string."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:688
msgid "Performs the template substitution, returning a new string.  *mapping* is any dictionary-like object with keys that match the placeholders in the template.  Alternatively, you can provide keyword arguments, where the keywords are the placeholders.  When both *mapping* and *kws* are given and there are duplicates, the placeholders from *kws* take precedence."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:697
msgid "Like :meth:`substitute`, except that if placeholders are missing from *mapping* and *kws*, instead of raising a :exc:`KeyError` exception, the original placeholder will appear in the resulting string intact.  Also, unlike with :meth:`substitute`, any other appearances of the ``$`` will simply return ``$`` instead of raising :exc:`ValueError`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:703
msgid "While other exceptions may still occur, this method is called \"safe\" because it always tries to return a usable string instead of raising an exception.  In another sense, :meth:`safe_substitute` may be anything other than safe, since it will silently ignore malformed templates containing dangling delimiters, unmatched braces, or placeholders that are not valid Python identifiers."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:710
msgid ":class:`Template` instances also provide one public data attribute:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:714
msgid "This is the object passed to the constructor's *template* argument.  In general, you shouldn't change it, but read-only access is not enforced."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:717
msgid "Here is an example of how to use a Template::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:735
msgid "Advanced usage: you can derive subclasses of :class:`Template` to customize the placeholder syntax, delimiter character, or the entire regular expression used to parse template strings.  To do this, you can override these class attributes:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:739
msgid "*delimiter* -- This is the literal string describing a placeholder introducing delimiter.  The default value is ``$``.  Note that this should *not* be a regular expression, as the implementation will call :meth:`re.escape` on this string as needed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:744
msgid "*idpattern* -- This is the regular expression describing the pattern for non-braced placeholders (the braces will be added automatically as appropriate).  The default value is the regular expression ``[_a-z][_a-z0-9]*``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:749
msgid "Alternatively, you can provide the entire regular expression pattern by overriding the class attribute *pattern*.  If you do this, the value must be a regular expression object with four named capturing groups.  The capturing groups correspond to the rules given above, along with the invalid placeholder rule:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:755
msgid "*escaped* -- This group matches the escape sequence, e.g. ``$$``, in the default pattern."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:758
msgid "*named* -- This group matches the unbraced placeholder name; it should not include the delimiter in capturing group."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:761
msgid "*braced* -- This group matches the brace enclosed placeholder name; it should not include either the delimiter or braces in the capturing group."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:764
msgid "*invalid* -- This group matches any other delimiter pattern (usually a single delimiter), and it should appear last in the regular expression."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:769
msgid "String functions"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:771
msgid "The following functions are available to operate on string and Unicode objects. They are not available as string methods."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:777
msgid "Split the argument into words using :meth:`str.split`, capitalize each word using :meth:`str.capitalize`, and join the capitalized words using :meth:`str.join`.  If the optional second argument *sep* is absent or ``None``, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise *sep* is used to split and join the words."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:787
msgid "Return a translation table suitable for passing to :func:`translate`, that will map each character in *from* into the character at the same position in *to*; *from* and *to* must have the same length."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:793
msgid "Don't use strings derived from :const:`lowercase` and :const:`uppercase` as arguments; in some locales, these don't have the same length.  For case conversions, always use :meth:`str.lower` and :meth:`str.upper`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:799
msgid "Deprecated string functions"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:801
msgid "The following list of functions are also defined as methods of string and Unicode objects; see section :ref:`string-methods` for more information on those.  You should consider these functions as deprecated, although they will not be removed until Python 3.  The functions defined in this module are:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:809
msgid "Use the :func:`float` built-in function."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:814
msgid "Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (``+`` or ``-``).  Note that this behaves identical to the built-in function :func:`float` when passed a string."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:825
msgid "When passing in a string, values for NaN and Infinity may be returned, depending on the underlying C library.  The specific set of strings accepted which cause these values to be returned depends entirely on the C library and is known to vary."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:833
msgid "Use the :func:`int` built-in function."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:838
msgid "Convert string *s* to an integer in the given *base*.  The string must consist of one or more digits, optionally preceded by a sign (``+`` or ``-``).  The *base* defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): ``0x`` or ``0X`` means 16, ``0`` means 8, anything else means 10.  If *base* is 16, a leading ``0x`` or ``0X`` is always accepted, though not required.  This behaves identically to the built-in function :func:`int` when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function :func:`eval`.)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:851
msgid "Use the :func:`long` built-in function."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:856
msgid "Convert string *s* to a long integer in the given *base*. The string must consist of one or more digits, optionally preceded by a sign (``+`` or ``-``). The *base* argument has the same meaning as for :func:`atoi`.  A trailing ``l`` or ``L`` is not allowed, except if the base is 0.  Note that when invoked without *base* or with *base* set to 10, this behaves identical to the built-in function :func:`long` when passed a string."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:866
msgid "Return a copy of *word* with only its first character capitalized."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:871
msgid "Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:879
msgid "Return the lowest index in *s* where the substring *sub* is found such that *sub* is wholly contained in ``s[start:end]``.  Return ``-1`` on failure. Defaults for *start* and *end* and interpretation of negative values is the same as for slices."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:887
msgid "Like :func:`find` but find the highest index."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:892
msgid "Like :func:`find` but raise :exc:`ValueError` when the substring is not found."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:897
msgid "Like :func:`rfind` but raise :exc:`ValueError` when the substring is not found."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:902
msgid "Return the number of (non-overlapping) occurrences of substring *sub* in string ``s[start:end]``. Defaults for *start* and *end* and interpretation of negative values are the same as for slices."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:909
msgid "Return a copy of *s*, but with upper case letters converted to lower case."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:914
msgid "Return a list of the words of the string *s*.  If the optional second argument *sep* is absent or ``None``, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument *sep* is present and not ``None``, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If *maxsplit* is given, at most *maxsplit* number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most ``maxsplit+1`` elements).  If *maxsplit* is not specified or ``-1``, then there is no limit on the number of splits (all possible splits are made)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:926
msgid "The behavior of split on an empty string depends on the value of *sep*. If *sep* is not specified, or specified as ``None``, the result will be an empty list. If *sep* is specified as any string, the result will be a list containing one element which is an empty string."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:934
msgid "Return a list of the words of the string *s*, scanning *s* from the end.  To all intents and purposes, the resulting list of words is the same as returned by :func:`split`, except when the optional third argument *maxsplit* is explicitly specified and nonzero.  If *maxsplit* is given, at most *maxsplit* number of splits -- the *rightmost* ones -- occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most ``maxsplit+1`` elements)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:947
msgid "This function behaves identically to :func:`split`.  (In the past, :func:`split` was only used with one argument, while :func:`splitfields` was only used with two arguments.)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:954
msgid "Concatenate a list or tuple of words with intervening occurrences of  *sep*. The default value for *sep* is a single space character.  It is always true that ``string.join(string.split(s, sep), sep)`` equals *s*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:961
msgid "This function behaves identically to :func:`join`.  (In the past,  :func:`join` was only used with one argument, while :func:`joinfields` was only used with two arguments.) Note that there is no :meth:`joinfields` method on string objects; use the :meth:`join` method instead."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:969
msgid "Return a copy of the string with leading characters removed.  If *chars* is omitted or ``None``, whitespace characters are removed.  If given and not ``None``, *chars* must be a string; the characters in the string will be stripped from the beginning of the string this method is called on."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:974
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:986
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:998
msgid "The *chars* parameter was added.  The *chars* parameter cannot be passed in earlier 2.2 versions."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:981
msgid "Return a copy of the string with trailing characters removed.  If *chars* is omitted or ``None``, whitespace characters are removed.  If given and not ``None``, *chars* must be a string; the characters in the string will be stripped from the end of the string this method is called on."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:993
msgid "Return a copy of the string with leading and trailing characters removed.  If *chars* is omitted or ``None``, whitespace characters are removed.  If given and not ``None``, *chars* must be a string; the characters in the string will be stripped from the both ends of the string this method is called on."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:1005
msgid "Return a copy of *s*, but with lower case letters converted to upper case and vice versa."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:1011
msgid "Delete all characters from *s* that are in *deletechars* (if  present), and then translate the characters using *table*, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If *table* is ``None``, then only the character deletion step is performed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:1019
msgid "Return a copy of *s*, but with lower case letters converted to upper case."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:1026
msgid "These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least *width* characters wide, created by padding the string *s* with the character *fillchar* (default is a space) until the given width on the right, left or both sides. The string is never truncated."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:1035
msgid "Pad a numeric string *s* on the left with zero digits until the given *width* is reached.  Strings starting with a sign are handled correctly."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/string.rst:1042
msgid "Return a copy of string *s* with all occurrences of substring *old* replaced by *new*.  If the optional argument *maxreplace* is given, the first *maxreplace* occurrences are replaced."
msgstr ""

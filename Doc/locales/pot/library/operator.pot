# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/operator.rst:2
msgid ":mod:`operator` --- Standard operators as functions"
msgstr ""

#: ../../library/operator.rst:15
msgid "The :mod:`operator` module exports a set of efficient functions corresponding to the intrinsic operators of Python.  For example, ``operator.add(x, y)`` is equivalent to the expression ``x+y``.  The function names are those used for special class methods; variants without leading and trailing ``__`` are also provided for convenience."
msgstr ""

#: ../../library/operator.rst:21
msgid "The functions fall into categories that perform object comparisons, logical operations, mathematical operations, sequence operations, and abstract type tests."
msgstr ""

#: ../../library/operator.rst:25
msgid "The object comparison functions are useful for all objects, and are named after the rich comparison operators they support:"
msgstr ""

#: ../../library/operator.rst:42
msgid "Perform \"rich comparisons\" between *a* and *b*. Specifically, ``lt(a, b)`` is equivalent to ``a < b``, ``le(a, b)`` is equivalent to ``a <= b``, ``eq(a, b)`` is equivalent to ``a == b``, ``ne(a, b)`` is equivalent to ``a != b``, ``gt(a, b)`` is equivalent to ``a > b`` and ``ge(a, b)`` is equivalent to ``a >= b``.  Note that unlike the built-in :func:`cmp`, these functions can return any value, which may or may not be interpretable as a Boolean value. See :ref:`comparisons` for more information about rich comparisons."
msgstr ""

#: ../../library/operator.rst:52
msgid "The logical operations are also generally applicable to all objects, and support truth tests, identity tests, and boolean operations:"
msgstr ""

#: ../../library/operator.rst:59
msgid "Return the outcome of :keyword:`not` *obj*.  (Note that there is no :meth:`__not__` method for object instances; only the interpreter core defines this operation.  The result is affected by the :meth:`__nonzero__` and :meth:`__len__` methods.)"
msgstr ""

#: ../../library/operator.rst:67
msgid "Return :const:`True` if *obj* is true, and :const:`False` otherwise.  This is equivalent to using the :class:`bool` constructor."
msgstr ""

#: ../../library/operator.rst:73
msgid "Return ``a is b``.  Tests object identity."
msgstr ""

#: ../../library/operator.rst:80
msgid "Return ``a is not b``.  Tests object identity."
msgstr ""

#: ../../library/operator.rst:84
msgid "The mathematical and bitwise operations are the most numerous:"
msgstr ""

#: ../../library/operator.rst:90
msgid "Return the absolute value of *obj*."
msgstr ""

#: ../../library/operator.rst:96
msgid "Return ``a + b``, for *a* and *b* numbers."
msgstr ""

#: ../../library/operator.rst:102
msgid "Return the bitwise and of *a* and *b*."
msgstr ""

#: ../../library/operator.rst:108
msgid "Return ``a / b`` when ``__future__.division`` is not in effect.  This is also known as \"classic\" division."
msgstr ""

#: ../../library/operator.rst:115
msgid "Return ``a // b``."
msgstr ""

#: ../../library/operator.rst:123
msgid "Return *a* converted to an integer.  Equivalent to ``a.__index__()``."
msgstr ""

#: ../../library/operator.rst:133
msgid "Return the bitwise inverse of the number *obj*.  This is equivalent to ``~obj``."
msgstr ""

#: ../../library/operator.rst:135
msgid "The names :func:`invert` and :func:`__invert__`."
msgstr ""

#: ../../library/operator.rst:142
msgid "Return *a* shifted left by *b*."
msgstr ""

#: ../../library/operator.rst:148
msgid "Return ``a % b``."
msgstr ""

#: ../../library/operator.rst:154
msgid "Return ``a * b``, for *a* and *b* numbers."
msgstr ""

#: ../../library/operator.rst:160
msgid "Return *obj* negated (``-obj``)."
msgstr ""

#: ../../library/operator.rst:166
msgid "Return the bitwise or of *a* and *b*."
msgstr ""

#: ../../library/operator.rst:172
msgid "Return *obj* positive (``+obj``)."
msgstr ""

#: ../../library/operator.rst:178
msgid "Return ``a ** b``, for *a* and *b* numbers."
msgstr ""

#: ../../library/operator.rst:186
msgid "Return *a* shifted right by *b*."
msgstr ""

#: ../../library/operator.rst:192
msgid "Return ``a - b``."
msgstr ""

#: ../../library/operator.rst:198
msgid "Return ``a / b`` when ``__future__.division`` is in effect.  This is also known as \"true\" division."
msgstr ""

#: ../../library/operator.rst:207
msgid "Return the bitwise exclusive or of *a* and *b*."
msgstr ""

#: ../../library/operator.rst:210
msgid "Operations which work with sequences (some of them with mappings too) include:"
msgstr ""

#: ../../library/operator.rst:215
msgid "Return ``a + b`` for *a* and *b* sequences."
msgstr ""

#: ../../library/operator.rst:221
msgid "Return the outcome of the test ``b in a``. Note the reversed operands."
msgstr ""

#: ../../library/operator.rst:223
msgid "The name :func:`__contains__`."
msgstr ""

#: ../../library/operator.rst:229
msgid "Return the number of occurrences of *b* in *a*."
msgstr ""

#: ../../library/operator.rst:235
msgid "Remove the value of *a* at index *b*."
msgstr ""

#: ../../library/operator.rst:241
msgid "Delete the slice of *a* from index *b* to index *c-1*."
msgstr ""

#: ../../library/operator.rst:243
msgid "This function is removed in Python 3.x.  Use :func:`delitem` with a slice index."
msgstr ""

#: ../../library/operator.rst:251
msgid "Return the value of *a* at index *b*."
msgstr ""

#: ../../library/operator.rst:257
msgid "Return the slice of *a* from index *b* to index *c-1*."
msgstr ""

#: ../../library/operator.rst:259
msgid "This function is removed in Python 3.x.  Use :func:`getitem` with a slice index."
msgstr ""

#: ../../library/operator.rst:266
msgid "Return the index of the first of occurrence of *b* in *a*."
msgstr ""

#: ../../library/operator.rst:272
msgid "Use :func:`__mul__` instead."
msgstr ""

#: ../../library/operator.rst:275
msgid "Return ``a * b`` where *a* is a sequence and *b* is an integer."
msgstr ""

#: ../../library/operator.rst:280
msgid "Use :func:`contains` instead."
msgstr ""

#: ../../library/operator.rst:283
msgid "Alias for :func:`contains`."
msgstr ""

#: ../../library/operator.rst:289
msgid "Set the value of *a* at index *b* to *c*."
msgstr ""

#: ../../library/operator.rst:295
msgid "Set the slice of *a* from index *b* to index *c-1* to the sequence *v*."
msgstr ""

#: ../../library/operator.rst:297
msgid "This function is removed in Python 3.x.  Use :func:`setitem` with a slice index."
msgstr ""

#: ../../library/operator.rst:301
msgid "Example use of operator functions::"
msgstr ""

#: ../../library/operator.rst:311
msgid "Many operations have an \"in-place\" version.  The following functions provide a more primitive access to in-place operators than the usual syntax does; for example, the :term:`statement` ``x += y`` is equivalent to ``x = operator.iadd(x, y)``.  Another way to put it is to say that ``z = operator.iadd(x, y)`` is equivalent to the compound statement ``z = x; z += y``."
msgstr ""

#: ../../library/operator.rst:321
msgid "``a = iadd(a, b)`` is equivalent to ``a += b``."
msgstr ""

#: ../../library/operator.rst:329
msgid "``a = iand(a, b)`` is equivalent to ``a &= b``."
msgstr ""

#: ../../library/operator.rst:337
msgid "``a = iconcat(a, b)`` is equivalent to ``a += b`` for *a* and *b* sequences."
msgstr ""

#: ../../library/operator.rst:345
msgid "``a = idiv(a, b)`` is equivalent to ``a /= b`` when ``__future__.division`` is not in effect."
msgstr ""

#: ../../library/operator.rst:354
msgid "``a = ifloordiv(a, b)`` is equivalent to ``a //= b``."
msgstr ""

#: ../../library/operator.rst:362
msgid "``a = ilshift(a, b)`` is equivalent to ``a <<= b``."
msgstr ""

#: ../../library/operator.rst:370
msgid "``a = imod(a, b)`` is equivalent to ``a %= b``."
msgstr ""

#: ../../library/operator.rst:378
msgid "``a = imul(a, b)`` is equivalent to ``a *= b``."
msgstr ""

#: ../../library/operator.rst:386
msgid "``a = ior(a, b)`` is equivalent to ``a |= b``."
msgstr ""

#: ../../library/operator.rst:394
msgid "``a = ipow(a, b)`` is equivalent to ``a **= b``."
msgstr ""

#: ../../library/operator.rst:402
msgid "Use :func:`__imul__` instead."
msgstr ""

#: ../../library/operator.rst:405
msgid "``a = irepeat(a, b)`` is equivalent to ``a *= b`` where *a* is a sequence and *b* is an integer."
msgstr ""

#: ../../library/operator.rst:414
msgid "``a = irshift(a, b)`` is equivalent to ``a >>= b``."
msgstr ""

#: ../../library/operator.rst:422
msgid "``a = isub(a, b)`` is equivalent to ``a -= b``."
msgstr ""

#: ../../library/operator.rst:430
msgid "``a = itruediv(a, b)`` is equivalent to ``a /= b`` when ``__future__.division`` is in effect."
msgstr ""

#: ../../library/operator.rst:439
msgid "``a = ixor(a, b)`` is equivalent to ``a ^= b``."
msgstr ""

#: ../../library/operator.rst:444
msgid "The :mod:`operator` module also defines a few predicates to test the type of objects; however, these are not all reliable.  It is preferable to test abstract base classes instead (see :mod:`collections` and :mod:`numbers` for details)."
msgstr ""

#: ../../library/operator.rst:451
msgid "Use ``isinstance(x, collections.Callable)`` instead."
msgstr ""

#: ../../library/operator.rst:454
msgid "Returns true if the object *obj* can be called like a function, otherwise it returns false.  True is returned for functions, bound and unbound methods, class objects, and instance objects which support the :meth:`__call__` method."
msgstr ""

#: ../../library/operator.rst:461
msgid "Use ``isinstance(x, collections.Mapping)`` instead."
msgstr ""

#: ../../library/operator.rst:464
msgid "Returns true if the object *obj* supports the mapping interface. This is true for dictionaries and all instance objects defining :meth:`__getitem__`."
msgstr ""

#: ../../library/operator.rst:470
msgid "Use ``isinstance(x, numbers.Number)`` instead."
msgstr ""

#: ../../library/operator.rst:473
msgid "Returns true if the object *obj* represents a number.  This is true for all numeric types implemented in C."
msgstr ""

#: ../../library/operator.rst:479
msgid "Use ``isinstance(x, collections.Sequence)`` instead."
msgstr ""

#: ../../library/operator.rst:482
msgid "Returns true if the object *obj* supports the sequence protocol. This returns true for all objects which define sequence methods in C, and for all instance objects defining :meth:`__getitem__`."
msgstr ""

#: ../../library/operator.rst:487
msgid "The :mod:`operator` module also defines tools for generalized attribute and item lookups.  These are useful for making fast field extractors as arguments for :func:`map`, :func:`sorted`, :meth:`itertools.groupby`, or other functions that expect a function argument."
msgstr ""

#: ../../library/operator.rst:496
msgid "Return a callable object that fetches *attr* from its operand. If more than one attribute is requested, returns a tuple of attributes. The attribute names can also contain dots. For example:"
msgstr ""

#: ../../library/operator.rst:500
msgid "After ``f = attrgetter('name')``, the call ``f(b)`` returns ``b.name``."
msgstr ""

#: ../../library/operator.rst:502
msgid "After ``f = attrgetter('name', 'date')``, the call ``f(b)`` returns ``(b.name, b.date)``."
msgstr ""

#: ../../library/operator.rst:505
msgid "After ``f = attrgetter('name.first', 'name.last')``, the call ``f(b)`` returns ``(b.name.first, b.name.last)``."
msgstr ""

#: ../../library/operator.rst:508
#: ../../library/operator.rst:547
#: ../../library/operator.rst:597
msgid "Equivalent to::"
msgstr ""

#: ../../library/operator.rst:528
msgid "Added support for multiple attributes."
msgstr ""

#: ../../library/operator.rst:531
msgid "Added support for dotted attributes."
msgstr ""

#: ../../library/operator.rst:538
msgid "Return a callable object that fetches *item* from its operand using the operand's :meth:`__getitem__` method.  If multiple items are specified, returns a tuple of lookup values.  For example:"
msgstr ""

#: ../../library/operator.rst:542
msgid "After ``f = itemgetter(2)``, the call ``f(r)`` returns ``r[2]``."
msgstr ""

#: ../../library/operator.rst:544
msgid "After ``g = itemgetter(2, 5, 3)``, the call ``g(r)`` returns ``(r[2], r[5], r[3])``."
msgstr ""

#: ../../library/operator.rst:559
msgid "The items can be any type accepted by the operand's :meth:`__getitem__` method.  Dictionaries accept any hashable value.  Lists, tuples, and strings accept an index or a slice:"
msgstr ""

#: ../../library/operator.rst:572
msgid "Added support for multiple item extraction."
msgstr ""

#: ../../library/operator.rst:575
msgid "Example of using :func:`itemgetter` to retrieve specific fields from a tuple record:"
msgstr ""

#: ../../library/operator.rst:588
msgid "Return a callable object that calls the method *name* on its operand.  If additional arguments and/or keyword arguments are given, they will be given to the method as well.  For example:"
msgstr ""

#: ../../library/operator.rst:592
msgid "After ``f = methodcaller('name')``, the call ``f(b)`` returns ``b.name()``."
msgstr ""

#: ../../library/operator.rst:594
msgid "After ``f = methodcaller('name', 'foo', bar=1)``, the call ``f(b)`` returns ``b.name('foo', bar=1)``."
msgstr ""

#: ../../library/operator.rst:610
msgid "Mapping Operators to Functions"
msgstr ""

#: ../../library/operator.rst:612
msgid "This table shows how abstract operations correspond to operator symbols in the Python syntax and the functions in the :mod:`operator` module."
msgstr ""

#: ../../library/operator.rst:616
msgid "Operation"
msgstr ""

#: ../../library/operator.rst:616
msgid "Syntax"
msgstr ""

#: ../../library/operator.rst:616
msgid "Function"
msgstr ""

#: ../../library/operator.rst:618
msgid "Addition"
msgstr ""

#: ../../library/operator.rst:618
msgid "``a + b``"
msgstr ""

#: ../../library/operator.rst:618
msgid "``add(a, b)``"
msgstr ""

#: ../../library/operator.rst:620
msgid "Concatenation"
msgstr ""

#: ../../library/operator.rst:620
msgid "``seq1 + seq2``"
msgstr ""

#: ../../library/operator.rst:620
msgid "``concat(seq1, seq2)``"
msgstr ""

#: ../../library/operator.rst:622
msgid "Containment Test"
msgstr ""

#: ../../library/operator.rst:622
msgid "``obj in seq``"
msgstr ""

#: ../../library/operator.rst:622
msgid "``contains(seq, obj)``"
msgstr ""

#: ../../library/operator.rst:624
#: ../../library/operator.rst:627
#: ../../library/operator.rst:630
msgid "Division"
msgstr ""

#: ../../library/operator.rst:624
#: ../../library/operator.rst:627
msgid "``a / b``"
msgstr ""

#: ../../library/operator.rst:624
msgid "``div(a, b)`` (without ``__future__.division``)"
msgstr ""

#: ../../library/operator.rst:627
msgid "``truediv(a, b)`` (with ``__future__.division``)"
msgstr ""

#: ../../library/operator.rst:630
msgid "``a // b``"
msgstr ""

#: ../../library/operator.rst:630
msgid "``floordiv(a, b)``"
msgstr ""

#: ../../library/operator.rst:632
msgid "Bitwise And"
msgstr ""

#: ../../library/operator.rst:632
msgid "``a & b``"
msgstr ""

#: ../../library/operator.rst:632
msgid "``and_(a, b)``"
msgstr ""

#: ../../library/operator.rst:634
msgid "Bitwise Exclusive Or"
msgstr ""

#: ../../library/operator.rst:634
msgid "``a ^ b``"
msgstr ""

#: ../../library/operator.rst:634
msgid "``xor(a, b)``"
msgstr ""

#: ../../library/operator.rst:636
msgid "Bitwise Inversion"
msgstr ""

#: ../../library/operator.rst:636
msgid "``~ a``"
msgstr ""

#: ../../library/operator.rst:636
msgid "``invert(a)``"
msgstr ""

#: ../../library/operator.rst:638
msgid "Bitwise Or"
msgstr ""

#: ../../library/operator.rst:638
msgid "``a | b``"
msgstr ""

#: ../../library/operator.rst:638
msgid "``or_(a, b)``"
msgstr ""

#: ../../library/operator.rst:640
msgid "Exponentiation"
msgstr ""

#: ../../library/operator.rst:640
msgid "``a ** b``"
msgstr ""

#: ../../library/operator.rst:640
msgid "``pow(a, b)``"
msgstr ""

#: ../../library/operator.rst:642
#: ../../library/operator.rst:644
msgid "Identity"
msgstr ""

#: ../../library/operator.rst:642
msgid "``a is b``"
msgstr ""

#: ../../library/operator.rst:642
msgid "``is_(a, b)``"
msgstr ""

#: ../../library/operator.rst:644
msgid "``a is not b``"
msgstr ""

#: ../../library/operator.rst:644
msgid "``is_not(a, b)``"
msgstr ""

#: ../../library/operator.rst:646
msgid "Indexed Assignment"
msgstr ""

#: ../../library/operator.rst:646
msgid "``obj[k] = v``"
msgstr ""

#: ../../library/operator.rst:646
msgid "``setitem(obj, k, v)``"
msgstr ""

#: ../../library/operator.rst:648
msgid "Indexed Deletion"
msgstr ""

#: ../../library/operator.rst:648
msgid "``del obj[k]``"
msgstr ""

#: ../../library/operator.rst:648
msgid "``delitem(obj, k)``"
msgstr ""

#: ../../library/operator.rst:650
msgid "Indexing"
msgstr ""

#: ../../library/operator.rst:650
msgid "``obj[k]``"
msgstr ""

#: ../../library/operator.rst:650
msgid "``getitem(obj, k)``"
msgstr ""

#: ../../library/operator.rst:652
msgid "Left Shift"
msgstr ""

#: ../../library/operator.rst:652
msgid "``a << b``"
msgstr ""

#: ../../library/operator.rst:652
msgid "``lshift(a, b)``"
msgstr ""

#: ../../library/operator.rst:654
msgid "Modulo"
msgstr ""

#: ../../library/operator.rst:654
msgid "``a % b``"
msgstr ""

#: ../../library/operator.rst:654
msgid "``mod(a, b)``"
msgstr ""

#: ../../library/operator.rst:656
msgid "Multiplication"
msgstr ""

#: ../../library/operator.rst:656
msgid "``a * b``"
msgstr ""

#: ../../library/operator.rst:656
msgid "``mul(a, b)``"
msgstr ""

#: ../../library/operator.rst:658
msgid "Negation (Arithmetic)"
msgstr ""

#: ../../library/operator.rst:658
msgid "``- a``"
msgstr ""

#: ../../library/operator.rst:658
msgid "``neg(a)``"
msgstr ""

#: ../../library/operator.rst:660
msgid "Negation (Logical)"
msgstr ""

#: ../../library/operator.rst:660
msgid "``not a``"
msgstr ""

#: ../../library/operator.rst:660
msgid "``not_(a)``"
msgstr ""

#: ../../library/operator.rst:662
msgid "Positive"
msgstr ""

#: ../../library/operator.rst:662
msgid "``+ a``"
msgstr ""

#: ../../library/operator.rst:662
msgid "``pos(a)``"
msgstr ""

#: ../../library/operator.rst:664
msgid "Right Shift"
msgstr ""

#: ../../library/operator.rst:664
msgid "``a >> b``"
msgstr ""

#: ../../library/operator.rst:664
msgid "``rshift(a, b)``"
msgstr ""

#: ../../library/operator.rst:666
msgid "Sequence Repetition"
msgstr ""

#: ../../library/operator.rst:666
msgid "``seq * i``"
msgstr ""

#: ../../library/operator.rst:666
msgid "``repeat(seq, i)``"
msgstr ""

#: ../../library/operator.rst:668
msgid "Slice Assignment"
msgstr ""

#: ../../library/operator.rst:668
msgid "``seq[i:j] = values``"
msgstr ""

#: ../../library/operator.rst:668
msgid "``setitem(seq, slice(i, j), values)``"
msgstr ""

#: ../../library/operator.rst:670
msgid "Slice Deletion"
msgstr ""

#: ../../library/operator.rst:670
msgid "``del seq[i:j]``"
msgstr ""

#: ../../library/operator.rst:670
msgid "``delitem(seq, slice(i, j))``"
msgstr ""

#: ../../library/operator.rst:672
msgid "Slicing"
msgstr ""

#: ../../library/operator.rst:672
msgid "``seq[i:j]``"
msgstr ""

#: ../../library/operator.rst:672
msgid "``getitem(seq, slice(i, j))``"
msgstr ""

#: ../../library/operator.rst:674
msgid "String Formatting"
msgstr ""

#: ../../library/operator.rst:674
msgid "``s % obj``"
msgstr ""

#: ../../library/operator.rst:674
msgid "``mod(s, obj)``"
msgstr ""

#: ../../library/operator.rst:676
msgid "Subtraction"
msgstr ""

#: ../../library/operator.rst:676
msgid "``a - b``"
msgstr ""

#: ../../library/operator.rst:676
msgid "``sub(a, b)``"
msgstr ""

#: ../../library/operator.rst:678
msgid "Truth Test"
msgstr ""

#: ../../library/operator.rst:678
msgid "``obj``"
msgstr ""

#: ../../library/operator.rst:678
msgid "``truth(obj)``"
msgstr ""

#: ../../library/operator.rst:680
#: ../../library/operator.rst:682
#: ../../library/operator.rst:688
#: ../../library/operator.rst:690
msgid "Ordering"
msgstr ""

#: ../../library/operator.rst:680
msgid "``a < b``"
msgstr ""

#: ../../library/operator.rst:680
msgid "``lt(a, b)``"
msgstr ""

#: ../../library/operator.rst:682
msgid "``a <= b``"
msgstr ""

#: ../../library/operator.rst:682
msgid "``le(a, b)``"
msgstr ""

#: ../../library/operator.rst:684
msgid "Equality"
msgstr ""

#: ../../library/operator.rst:684
msgid "``a == b``"
msgstr ""

#: ../../library/operator.rst:684
msgid "``eq(a, b)``"
msgstr ""

#: ../../library/operator.rst:686
msgid "Difference"
msgstr ""

#: ../../library/operator.rst:686
msgid "``a != b``"
msgstr ""

#: ../../library/operator.rst:686
msgid "``ne(a, b)``"
msgstr ""

#: ../../library/operator.rst:688
msgid "``a >= b``"
msgstr ""

#: ../../library/operator.rst:688
msgid "``ge(a, b)``"
msgstr ""

#: ../../library/operator.rst:690
msgid "``a > b``"
msgstr ""

#: ../../library/operator.rst:690
msgid "``gt(a, b)``"
msgstr ""

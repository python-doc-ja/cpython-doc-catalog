# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-09-28 09:18+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/asyncio-task.rst:6
msgid "Coroutines and Tasks"
msgstr ""

#: ../../library/asyncio-task.rst:8
msgid "This section outlines high-level asyncio APIs to work with coroutines and Tasks."
msgstr ""

#: ../../library/asyncio-task.rst:19
#: ../../library/asyncio-task.rst:121
msgid "Coroutines"
msgstr ""

#: ../../library/asyncio-task.rst:21
msgid "Coroutines declared with async/await syntax is the preferred way of writing asyncio applications.  For example, the following snippet of code (requires Python 3.7+) prints \"hello\", waits 1 second, and then prints \"world\"::"
msgstr ""

#: ../../library/asyncio-task.rst:37
msgid "Note that simply calling a coroutine will not schedule it to be executed::"
msgstr ""

#: ../../library/asyncio-task.rst:43
msgid "To actually run a coroutine asyncio provides three main mechanisms:"
msgstr ""

#: ../../library/asyncio-task.rst:45
msgid "The :func:`asyncio.run` function to run the top-level entry point \"main()\" function (see the above example.)"
msgstr ""

#: ../../library/asyncio-task.rst:48
msgid "Awaiting on a coroutine.  The following snippet of code will print \"hello\" after waiting for 1 second, and then print \"world\" after waiting for *another* 2 seconds::"
msgstr ""

#: ../../library/asyncio-task.rst:69
msgid "Expected output::"
msgstr ""

#: ../../library/asyncio-task.rst:76
msgid "The :func:`asyncio.create_task` function to run coroutines concurrently as asyncio :class:`Tasks <Task>`."
msgstr ""

#: ../../library/asyncio-task.rst:79
msgid "Let's modify the above example and run two ``say_after`` coroutines *concurrently*::"
msgstr ""

#: ../../library/asyncio-task.rst:98
msgid "Note that expected output now shows that the snippet runs 1 second faster than before::"
msgstr ""

#: ../../library/asyncio-task.rst:110
msgid "Awaitables"
msgstr ""

#: ../../library/asyncio-task.rst:112
msgid "We say that an object is an **awaitable** object if it can be used in an :keyword:`await` expression.  Many asyncio APIs are designed to accept awaitables."
msgstr ""

#: ../../library/asyncio-task.rst:116
msgid "There are three main types of *awaitable* objects: **coroutines**, **Tasks**, and **Futures**."
msgstr ""

#: ../../library/asyncio-task.rst:122
msgid "Python coroutines are *awaitables* and therefore can be awaited from other coroutines::"
msgstr ""

#: ../../library/asyncio-task.rst:143
msgid "In this documentation the term \"coroutine\" can be used for two closely related concepts:"
msgstr ""

#: ../../library/asyncio-task.rst:146
msgid "a *coroutine function*: an :keyword:`async def` function;"
msgstr ""

#: ../../library/asyncio-task.rst:148
msgid "a *coroutine object*: an object returned by calling a *coroutine function*."
msgstr ""

#: ../../library/asyncio-task.rst:151
msgid "asyncio also supports legacy :ref:`generator-based <asyncio_generator_based_coro>` coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:156
msgid "Tasks"
msgstr ""

#: ../../library/asyncio-task.rst:157
msgid "*Tasks* are used to schedule coroutines *concurrently*."
msgstr ""

#: ../../library/asyncio-task.rst:159
msgid "When a coroutine is wrapped into a *Task* with functions like :func:`asyncio.create_task` the coroutine is automatically scheduled to run soon::"
msgstr ""

#: ../../library/asyncio-task.rst:181
msgid "Futures"
msgstr ""

#: ../../library/asyncio-task.rst:182
msgid "A :class:`Future` is a special **low-level** awaitable object that represents an **eventual result** of an asynchronous operation."
msgstr ""

#: ../../library/asyncio-task.rst:185
msgid "When a Future object is *awaited* it means that the coroutine will wait until the Future is resolved in some other place."
msgstr ""

#: ../../library/asyncio-task.rst:188
msgid "Future objects in asyncio are needed to allow callback-based code to be used with async/await."
msgstr ""

#: ../../library/asyncio-task.rst:191
msgid "Normally **there is no need** to create Future objects at the application level code."
msgstr ""

#: ../../library/asyncio-task.rst:194
msgid "Future objects, sometimes exposed by libraries and some asyncio APIs, can be awaited::"
msgstr ""

#: ../../library/asyncio-task.rst:206
msgid "A good example of a low-level function that returns a Future object is :meth:`loop.run_in_executor`."
msgstr ""

#: ../../library/asyncio-task.rst:211
msgid "Running an asyncio Program"
msgstr ""

#: ../../library/asyncio-task.rst:215
msgid "This function runs the passed coroutine, taking care of managing the asyncio event loop and *finalizing asynchronous generators*."
msgstr ""

#: ../../library/asyncio-task.rst:219
msgid "This function cannot be called when another asyncio event loop is running in the same thread."
msgstr ""

#: ../../library/asyncio-task.rst:222
msgid "If *debug* is ``True``, the event loop will be run in debug mode."
msgstr ""

#: ../../library/asyncio-task.rst:224
msgid "This function always creates a new event loop and closes it at the end.  It should be used as a main entry point for asyncio programs, and should ideally only be called once."
msgstr ""

#: ../../library/asyncio-task.rst:228
msgid "**Important:** this function has been added to asyncio in Python 3.7 on a :term:`provisional basis <provisional api>`."
msgstr ""

#: ../../library/asyncio-task.rst:234
msgid "Creating Tasks"
msgstr ""

#: ../../library/asyncio-task.rst:238
msgid "Wrap the *coro* :ref:`coroutine <coroutine>` into a :class:`Task` and schedule its execution.  Return the Task object."
msgstr ""

#: ../../library/asyncio-task.rst:241
msgid "The task is executed in the loop returned by :func:`get_running_loop`, :exc:`RuntimeError` is raised if there is no running loop in current thread."
msgstr ""

#: ../../library/asyncio-task.rst:245
msgid "This function has been **added in Python 3.7**.  Prior to Python 3.7, the low-level :func:`asyncio.ensure_future` function can be used instead::"
msgstr ""

#: ../../library/asyncio-task.rst:264
msgid "Sleeping"
msgstr ""

#: ../../library/asyncio-task.rst:268
msgid "Block for *delay* seconds."
msgstr ""

#: ../../library/asyncio-task.rst:270
msgid "If *result* is provided, it is returned to the caller when the coroutine completes."
msgstr ""

#: ../../library/asyncio-task.rst:273
#: ../../library/asyncio-task.rst:431
#: ../../library/asyncio-task.rst:483
msgid "The *loop* argument is deprecated and scheduled for removal in Python 3.10."
msgstr ""

#: ../../library/asyncio-task.rst:278
msgid "Example of coroutine displaying the current date every second for 5 seconds::"
msgstr ""

#: ../../library/asyncio-task.rst:297
msgid "Running Tasks Concurrently"
msgstr ""

#: ../../library/asyncio-task.rst:301
msgid "Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* sequence *concurrently*."
msgstr ""

#: ../../library/asyncio-task.rst:304
msgid "If any awaitable in *aws* is a coroutine, it is automatically scheduled as a Task."
msgstr ""

#: ../../library/asyncio-task.rst:307
msgid "If all awaitables are completed successfully, the result is an aggregate list of returned values.  The order of result values corresponds to the order of awaitables in *aws*."
msgstr ""

#: ../../library/asyncio-task.rst:311
msgid "If *return_exceptions* is ``False`` (default), the first raised exception is immediately propagated to the task that awaits on ``gather()``.  Other awaitables in the *aws* sequence **won't be cancelled** and will continue to run."
msgstr ""

#: ../../library/asyncio-task.rst:316
msgid "If *return_exceptions* is ``True``, exceptions are treated the same as successful results, and aggregated in the result list."
msgstr ""

#: ../../library/asyncio-task.rst:319
msgid "If ``gather()`` is *cancelled*, all submitted awaitables (that have not completed yet) are also *cancelled*."
msgstr ""

#: ../../library/asyncio-task.rst:322
msgid "If any Task or Future from the *aws* sequence is *cancelled*, it is treated as if it raised :exc:`CancelledError` -- the ``gather()`` call is **not** cancelled in this case.  This is to prevent the cancellation of one submitted Task/Future to cause other Tasks/Futures to be cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:330
#: ../../library/asyncio-task.rst:436
#: ../../library/asyncio-task.rst:558
msgid "Example::"
msgstr ""

#: ../../library/asyncio-task.rst:364
msgid "If the *gather* itself is cancelled, the cancellation is propagated regardless of *return_exceptions*."
msgstr ""

#: ../../library/asyncio-task.rst:370
msgid "Shielding From Cancellation"
msgstr ""

#: ../../library/asyncio-task.rst:374
msgid "Protect an :ref:`awaitable object <asyncio-awaitables>` from being :meth:`cancelled <Task.cancel>`."
msgstr ""

#: ../../library/asyncio-task.rst:377
#: ../../library/asyncio-task.rst:414
msgid "If *aw* is a coroutine it is automatically scheduled as a Task."
msgstr ""

#: ../../library/asyncio-task.rst:379
msgid "The statement::"
msgstr ""

#: ../../library/asyncio-task.rst:383
msgid "is equivalent to::"
msgstr ""

#: ../../library/asyncio-task.rst:387
msgid "*except* that if the coroutine containing it is cancelled, the Task running in ``something()`` is not cancelled.  From the point of view of ``something()``, the cancellation did not happen. Although its caller is still cancelled, so the \"await\" expression still raises a :exc:`CancelledError`."
msgstr ""

#: ../../library/asyncio-task.rst:393
msgid "If ``something()`` is cancelled by other means (i.e. from within itself) that would also cancel ``shield()``."
msgstr ""

#: ../../library/asyncio-task.rst:396
msgid "If it is desired to completely ignore cancellation (not recommended) the ``shield()`` function should be combined with a try/except clause, as follows::"
msgstr ""

#: ../../library/asyncio-task.rst:407
msgid "Timeouts"
msgstr ""

#: ../../library/asyncio-task.rst:411
msgid "Wait for the *aw* :ref:`awaitable <asyncio-awaitables>` to complete with a timeout."
msgstr ""

#: ../../library/asyncio-task.rst:416
msgid "*timeout* can either be ``None`` or a float or int number of seconds to wait for.  If *timeout* is ``None``, block until the future completes."
msgstr ""

#: ../../library/asyncio-task.rst:420
msgid "If a timeout occurs, it cancels the task and raises :exc:`asyncio.TimeoutError`."
msgstr ""

#: ../../library/asyncio-task.rst:423
msgid "To avoid the task :meth:`cancellation <Task.cancel>`, wrap it in :func:`shield`."
msgstr ""

#: ../../library/asyncio-task.rst:426
msgid "The function will wait until the future is actually cancelled, so the total wait time may exceed the *timeout*."
msgstr ""

#: ../../library/asyncio-task.rst:429
msgid "If the wait is cancelled, the future *aw* is also cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:456
msgid "When *aw* is cancelled due to a timeout, ``wait_for`` waits for *aw* to be cancelled.  Previously, it raised :exc:`asyncio.TimeoutError` immediately."
msgstr ""

#: ../../library/asyncio-task.rst:463
msgid "Waiting Primitives"
msgstr ""

#: ../../library/asyncio-task.rst:468
msgid "Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* set concurrently and block until the condition specified by *return_when*."
msgstr ""

#: ../../library/asyncio-task.rst:472
msgid "If any awaitable in *aws* is a coroutine, it is automatically scheduled as a Task.  Passing coroutines objects to ``wait()`` directly is deprecated as it leads to :ref:`confusing behavior <asyncio_example_wait_coroutine>`."
msgstr ""

#: ../../library/asyncio-task.rst:477
msgid "Returns two sets of Tasks/Futures: ``(done, pending)``."
msgstr ""

#: ../../library/asyncio-task.rst:479
msgid "Usage::"
msgstr ""

#: ../../library/asyncio-task.rst:486
msgid "*timeout* (a float or int), if specified, can be used to control the maximum number of seconds to wait before returning."
msgstr ""

#: ../../library/asyncio-task.rst:489
msgid "Note that this function does not raise :exc:`asyncio.TimeoutError`. Futures or Tasks that aren't done when the timeout occurs are simply returned in the second set."
msgstr ""

#: ../../library/asyncio-task.rst:493
msgid "*return_when* indicates when this function should return.  It must be one of the following constants:"
msgstr ""

#: ../../library/asyncio-task.rst:499
msgid "Constant"
msgstr ""

#: ../../library/asyncio-task.rst:499
msgid "Description"
msgstr ""

#: ../../library/asyncio-task.rst:501
msgid ":const:`FIRST_COMPLETED`"
msgstr ""

#: ../../library/asyncio-task.rst:501
msgid "The function will return when any future finishes or is cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:504
msgid ":const:`FIRST_EXCEPTION`"
msgstr ""

#: ../../library/asyncio-task.rst:504
msgid "The function will return when any future finishes by raising an exception.  If no future raises an exception then it is equivalent to :const:`ALL_COMPLETED`."
msgstr ""

#: ../../library/asyncio-task.rst:510
msgid ":const:`ALL_COMPLETED`"
msgstr ""

#: ../../library/asyncio-task.rst:510
msgid "The function will return when all futures finish or are cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:514
msgid "Unlike :func:`~asyncio.wait_for`, ``wait()`` does not cancel the futures when a timeout occurs."
msgstr ""

#: ../../library/asyncio-task.rst:520
msgid "``wait()`` schedules coroutines as Tasks automatically and later returns those implicitly created Task objects in ``(done, pending)`` sets.  Therefore the following code won't work as expected::"
msgstr ""

#: ../../library/asyncio-task.rst:533
msgid "Here is how the above snippet can be fixed::"
msgstr ""

#: ../../library/asyncio-task.rst:544
msgid "Passing coroutine objects to ``wait()`` directly is deprecated."
msgstr ""

#: ../../library/asyncio-task.rst:550
msgid "Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* set concurrently.  Return an iterator of :class:`Future` objects. Each Future object returned represents the earliest result from the set of the remaining awaitables."
msgstr ""

#: ../../library/asyncio-task.rst:555
msgid "Raises :exc:`asyncio.TimeoutError` if the timeout occurs before all Futures are done."
msgstr ""

#: ../../library/asyncio-task.rst:566
msgid "Scheduling From Other Threads"
msgstr ""

#: ../../library/asyncio-task.rst:570
msgid "Submit a coroutine to the given event loop.  Thread-safe."
msgstr ""

#: ../../library/asyncio-task.rst:572
msgid "Return a :class:`concurrent.futures.Future` to wait for the result from another OS thread."
msgstr ""

#: ../../library/asyncio-task.rst:575
msgid "This function is meant to be called from a different OS thread than the one where the event loop is running.  Example::"
msgstr ""

#: ../../library/asyncio-task.rst:587
msgid "If an exception is raised in the coroutine, the returned Future will be notified.  It can also be used to cancel the task in the event loop::"
msgstr ""

#: ../../library/asyncio-task.rst:601
msgid "See the :ref:`concurrency and multithreading <asyncio-multithreading>` section of the documentation."
msgstr ""

#: ../../library/asyncio-task.rst:604
msgid "Unlike other asyncio functions this functions requires the *loop* argument to be passed explicitly."
msgstr ""

#: ../../library/asyncio-task.rst:611
msgid "Introspection"
msgstr ""

#: ../../library/asyncio-task.rst:616
msgid "Return the currently running :class:`Task` instance, or ``None`` if no task is running."
msgstr ""

#: ../../library/asyncio-task.rst:619
msgid "If *loop* is ``None`` :func:`get_running_loop` is used to get the current loop."
msgstr ""

#: ../../library/asyncio-task.rst:627
msgid "Return a set of not yet finished :class:`Task` objects run by the loop."
msgstr ""

#: ../../library/asyncio-task.rst:630
msgid "If *loop* is ``None``, :func:`get_running_loop` is used for getting current loop."
msgstr ""

#: ../../library/asyncio-task.rst:637
msgid "Task Object"
msgstr ""

#: ../../library/asyncio-task.rst:641
msgid "A :class:`Future-like <Future>` object that runs a Python :ref:`coroutine <coroutine>`.  Not thread-safe."
msgstr ""

#: ../../library/asyncio-task.rst:644
msgid "Tasks are used to run coroutines in event loops. If a coroutine awaits on a Future, the Task suspends the execution of the coroutine and waits for the completion of the Future.  When the Future is *done*, the execution of the wrapped coroutine resumes."
msgstr ""

#: ../../library/asyncio-task.rst:650
msgid "Event loops use cooperative scheduling: an event loop runs one Task at a time.  While a Task awaits for the completion of a Future, the event loop runs other Tasks, callbacks, or performs IO operations."
msgstr ""

#: ../../library/asyncio-task.rst:655
msgid "Use the high-level :func:`asyncio.create_task` function to create Tasks, or the low-level :meth:`loop.create_task` or :func:`ensure_future` functions.  Manual instantiation of Tasks is discouraged."
msgstr ""

#: ../../library/asyncio-task.rst:660
msgid "To cancel a running Task use the :meth:`cancel` method.  Calling it will cause the Task to throw a :exc:`CancelledError` exception into the wrapped coroutine.  If a coroutine is awaiting on a Future object during cancellation, the Future object will be cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:665
msgid ":meth:`cancelled` can be used to check if the Task was cancelled. The method returns ``True`` if the wrapped coroutine did not suppress the :exc:`CancelledError` exception and was actually cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:670
msgid ":class:`asyncio.Task` inherits from :class:`Future` all of its APIs except :meth:`Future.set_result` and :meth:`Future.set_exception`."
msgstr ""

#: ../../library/asyncio-task.rst:674
msgid "Tasks support the :mod:`contextvars` module.  When a Task is created it copies the current context and later runs its coroutine in the copied context."
msgstr ""

#: ../../library/asyncio-task.rst:678
msgid "Added support for the :mod:`contextvars` module."
msgstr ""

#: ../../library/asyncio-task.rst:683
msgid "Request the Task to be cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:685
msgid "This arranges for a :exc:`CancelledError` exception to be thrown into the wrapped coroutine on the next cycle of the event loop."
msgstr ""

#: ../../library/asyncio-task.rst:688
msgid "The coroutine then has a chance to clean up or even deny the request by suppressing the exception with a :keyword:`try` ... ... ``except CancelledError`` ... :keyword:`finally` block. Therefore, unlike :meth:`Future.cancel`, :meth:`Task.cancel` does not guarantee that the Task will be cancelled, although suppressing cancellation completely is not common and is actively discouraged."
msgstr ""

#: ../../library/asyncio-task.rst:698
msgid "The following example illustrates how coroutines can intercept the cancellation request::"
msgstr ""

#: ../../library/asyncio-task.rst:737
msgid "Return ``True`` if the Task is *cancelled*."
msgstr ""

#: ../../library/asyncio-task.rst:739
msgid "The Task is *cancelled* when the cancellation was requested with :meth:`cancel` and the wrapped coroutine propagated the :exc:`CancelledError` exception thrown into it."
msgstr ""

#: ../../library/asyncio-task.rst:745
msgid "Return ``True`` if the Task is *done*."
msgstr ""

#: ../../library/asyncio-task.rst:747
msgid "A Task is *done* when the wrapped coroutine either returned a value, raised an exception, or the Task was cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:752
msgid "Return the result of the Task."
msgstr ""

#: ../../library/asyncio-task.rst:754
msgid "If the Task is *done*, the result of the wrapped coroutine is returned (or if the coroutine raised an exception, that exception is re-raised.)"
msgstr ""

#: ../../library/asyncio-task.rst:758
#: ../../library/asyncio-task.rst:772
msgid "If the Task has been *cancelled*, this method raises a :exc:`CancelledError` exception."
msgstr ""

#: ../../library/asyncio-task.rst:761
msgid "If the Task's result isn't yet available, this method raises a :exc:`InvalidStateError` exception."
msgstr ""

#: ../../library/asyncio-task.rst:766
msgid "Return the exception of the Task."
msgstr ""

#: ../../library/asyncio-task.rst:768
msgid "If the wrapped coroutine raised an exception that exception is returned.  If the wrapped coroutine returned normally this method returns ``None``."
msgstr ""

#: ../../library/asyncio-task.rst:775
msgid "If the Task isn't *done* yet, this method raises an :exc:`InvalidStateError` exception."
msgstr ""

#: ../../library/asyncio-task.rst:780
msgid "Add a callback to be run when the Task is *done*."
msgstr ""

#: ../../library/asyncio-task.rst:782
#: ../../library/asyncio-task.rst:791
msgid "This method should only be used in low-level callback-based code."
msgstr ""

#: ../../library/asyncio-task.rst:784
msgid "See the documentation of :meth:`Future.add_done_callback` for more details."
msgstr ""

#: ../../library/asyncio-task.rst:789
msgid "Remove *callback* from the callbacks list."
msgstr ""

#: ../../library/asyncio-task.rst:793
msgid "See the documentation of :meth:`Future.remove_done_callback` for more details."
msgstr ""

#: ../../library/asyncio-task.rst:798
msgid "Return the list of stack frames for this Task."
msgstr ""

#: ../../library/asyncio-task.rst:800
msgid "If the wrapped coroutine is not done, this returns the stack where it is suspended.  If the coroutine has completed successfully or was cancelled, this returns an empty list. If the coroutine was terminated by an exception, this returns the list of traceback frames."
msgstr ""

#: ../../library/asyncio-task.rst:806
msgid "The frames are always ordered from oldest to newest."
msgstr ""

#: ../../library/asyncio-task.rst:808
msgid "Only one stack frame is returned for a suspended coroutine."
msgstr ""

#: ../../library/asyncio-task.rst:810
msgid "The optional *limit* argument sets the maximum number of frames to return; by default all available frames are returned. The ordering of the returned list differs depending on whether a stack or a traceback is returned: the newest frames of a stack are returned, but the oldest frames of a traceback are returned.  (This matches the behavior of the traceback module.)"
msgstr ""

#: ../../library/asyncio-task.rst:819
msgid "Print the stack or traceback for this Task."
msgstr ""

#: ../../library/asyncio-task.rst:821
msgid "This produces output similar to that of the traceback module for the frames retrieved by :meth:`get_stack`."
msgstr ""

#: ../../library/asyncio-task.rst:824
msgid "The *limit* argument is passed to :meth:`get_stack` directly."
msgstr ""

#: ../../library/asyncio-task.rst:826
msgid "The *file* argument is an I/O stream to which the output is written; by default output is written to :data:`sys.stderr`."
msgstr ""

#: ../../library/asyncio-task.rst:831
msgid "Return a set of all tasks for an event loop."
msgstr ""

#: ../../library/asyncio-task.rst:833
msgid "By default all tasks for the current event loop are returned. If *loop* is ``None``, the :func:`get_event_loop` function is used to get the current loop."
msgstr ""

#: ../../library/asyncio-task.rst:837
msgid "This method is **deprecated** and will be removed in Python 3.9.  Use the :func:`asyncio.all_tasks` function instead."
msgstr ""

#: ../../library/asyncio-task.rst:842
msgid "Return the currently running task or ``None``."
msgstr ""

#: ../../library/asyncio-task.rst:844
msgid "If *loop* is ``None``, the :func:`get_event_loop` function is used to get the current loop."
msgstr ""

#: ../../library/asyncio-task.rst:847
msgid "This method is **deprecated** and will be removed in Python 3.9.  Use the :func:`asyncio.current_task` function instead."
msgstr ""

#: ../../library/asyncio-task.rst:855
msgid "Generator-based Coroutines"
msgstr ""

#: ../../library/asyncio-task.rst:859
msgid "Support for generator-based coroutines is **deprecated** and is scheduled for removal in Python 3.10."
msgstr ""

#: ../../library/asyncio-task.rst:862
msgid "Generator-based coroutines predate async/await syntax.  They are Python generators that use ``yield from`` expressions to await on Futures and other coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:866
msgid "Generator-based coroutines should be decorated with :func:`@asyncio.coroutine <asyncio.coroutine>`, although this is not enforced."
msgstr ""

#: ../../library/asyncio-task.rst:873
msgid "Decorator to mark generator-based coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:875
msgid "This decorator enables legacy generator-based coroutines to be compatible with async/await code::"
msgstr ""

#: ../../library/asyncio-task.rst:885
msgid "This decorator is **deprecated** and is scheduled for removal in Python 3.10."
msgstr ""

#: ../../library/asyncio-task.rst:888
msgid "This decorator should not be used for :keyword:`async def` coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:893
msgid "Return ``True`` if *obj* is a :ref:`coroutine object <coroutine>`."
msgstr ""

#: ../../library/asyncio-task.rst:895
msgid "This method is different from :func:`inspect.iscoroutine` because it returns ``True`` for generator-based coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:900
msgid "Return ``True`` if *func* is a :ref:`coroutine function <coroutine>`."
msgstr ""

#: ../../library/asyncio-task.rst:903
msgid "This method is different from :func:`inspect.iscoroutinefunction` because it returns ``True`` for generator-based coroutine functions decorated with :func:`@coroutine <coroutine>`."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-09-19 09:13+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/asyncio-task.rst:6
#: ../../library/asyncio-task.rst:117
msgid "Coroutines and Tasks"
msgstr ""

#: ../../library/asyncio-task.rst:8
msgid "This section outlines high-level asyncio APIs to work with coroutines and Tasks."
msgstr ""

#: ../../library/asyncio-task.rst:19
msgid "Coroutines"
msgstr ""

#: ../../library/asyncio-task.rst:21
msgid "Coroutines declared with async/await syntax is the preferred way of writing asyncio applications.  For example, the following snippet of code (requires Python 3.7+) prints \"hello\", waits 1 second, and then prints \"world\"::"
msgstr ""

#: ../../library/asyncio-task.rst:37
msgid "Note that simply calling a coroutine will not schedule it to be executed::"
msgstr ""

#: ../../library/asyncio-task.rst:43
msgid "To actually run a coroutine asyncio provides three main mechanisms:"
msgstr ""

#: ../../library/asyncio-task.rst:45
msgid "The :func:`asyncio.run` function to run the top-level entry point \"main()\" function (see the above example.)"
msgstr ""

#: ../../library/asyncio-task.rst:48
msgid "Awaiting on a coroutine.  The following snippet of code will print \"hello\" after waiting for 1 second, and then print \"world\" after waiting for *another* 2 seconds::"
msgstr ""

#: ../../library/asyncio-task.rst:69
msgid "Expected output::"
msgstr ""

#: ../../library/asyncio-task.rst:76
msgid "The :func:`asyncio.create_task` function to run coroutines concurrently as asyncio :class:`Tasks <Task>`."
msgstr ""

#: ../../library/asyncio-task.rst:79
msgid "Let's modify the above example and run two ``say_after`` coroutines *concurrently*::"
msgstr ""

#: ../../library/asyncio-task.rst:98
msgid "Note that expected output now shows that the snippet runs 1 second faster than before::"
msgstr ""

#: ../../library/asyncio-task.rst:110
msgid "Awaitables"
msgstr ""

#: ../../library/asyncio-task.rst:112
msgid "We say that an object is an *awaitable* object if it can be used in an :keyword:`await` expression."
msgstr ""

#: ../../library/asyncio-task.rst:118
msgid "Python coroutines are *awaitables*::"
msgstr ""

#: ../../library/asyncio-task.rst:127
msgid "*Tasks* are used to schedule coroutines *concurrently*. See the previous :ref:`section <coroutine>` for an introduction to coroutines and tasks."
msgstr ""

#: ../../library/asyncio-task.rst:131
msgid "Note that in this documentation the term \"coroutine\" can be used for two closely related concepts:"
msgstr ""

#: ../../library/asyncio-task.rst:134
msgid "a *coroutine function*: an :keyword:`async def` function;"
msgstr ""

#: ../../library/asyncio-task.rst:136
msgid "a *coroutine object*: object returned by calling a *coroutine function*."
msgstr ""

#: ../../library/asyncio-task.rst:141
msgid "Futures"
msgstr ""

#: ../../library/asyncio-task.rst:142
msgid "There is a dedicated section about the :ref:`asyncio Future object <asyncio-futures>`, but the concept is fundamental to asyncio so it needs a brief introduction in this section."
msgstr ""

#: ../../library/asyncio-task.rst:146
msgid "A Future is a special **low-level** awaitable object that represents an **eventual result** of an asynchronous operation. Future objects in asyncio are needed to allow callback-based code to be used with async/await."
msgstr ""

#: ../../library/asyncio-task.rst:151
msgid "Normally, **there is no need** to create Future objects at the application level code."
msgstr ""

#: ../../library/asyncio-task.rst:154
msgid "Future objects, sometimes exposed by libraries and some asyncio APIs, should be awaited::"
msgstr ""

#: ../../library/asyncio-task.rst:168
msgid "Running an asyncio Program"
msgstr ""

#: ../../library/asyncio-task.rst:172
msgid "This function runs the passed coroutine, taking care of managing the asyncio event loop and *finalizing asynchronous generators*."
msgstr ""

#: ../../library/asyncio-task.rst:176
msgid "This function cannot be called when another asyncio event loop is running in the same thread."
msgstr ""

#: ../../library/asyncio-task.rst:179
msgid "If *debug* is ``True``, the event loop will be run in debug mode."
msgstr ""

#: ../../library/asyncio-task.rst:181
msgid "This function always creates a new event loop and closes it at the end.  It should be used as a main entry point for asyncio programs, and should ideally only be called once."
msgstr ""

#: ../../library/asyncio-task.rst:185
msgid "**Important:** this function has been added to asyncio in Python 3.7 on a :term:`provisional basis <provisional api>`."
msgstr ""

#: ../../library/asyncio-task.rst:191
msgid "Creating Tasks"
msgstr ""

#: ../../library/asyncio-task.rst:195
msgid "Wrap the *coro* :ref:`coroutine <coroutine>` into a Task and schedule its execution.  Return the Task object."
msgstr ""

#: ../../library/asyncio-task.rst:198
msgid "The task is executed in the loop returned by :func:`get_running_loop`, :exc:`RuntimeError` is raised if there is no running loop in current thread."
msgstr ""

#: ../../library/asyncio-task.rst:202
msgid "This function has been **added in Python 3.7**.  Prior to Python 3.7, the low-level :func:`asyncio.ensure_future` function can be used instead::"
msgstr ""

#: ../../library/asyncio-task.rst:221
msgid "Sleeping"
msgstr ""

#: ../../library/asyncio-task.rst:225
msgid "Block for *delay* seconds."
msgstr ""

#: ../../library/asyncio-task.rst:227
msgid "If *result* is provided, it is returned to the caller when the coroutine completes."
msgstr ""

#: ../../library/asyncio-task.rst:230
#: ../../library/asyncio-task.rst:386
#: ../../library/asyncio-task.rst:432
msgid "The *loop* argument is deprecated and scheduled for removal in Python 4.0."
msgstr ""

#: ../../library/asyncio-task.rst:235
msgid "Example of coroutine displaying the current date every second for 5 seconds::"
msgstr ""

#: ../../library/asyncio-task.rst:254
msgid "Running Tasks Concurrently"
msgstr ""

#: ../../library/asyncio-task.rst:258
msgid "Run :ref:`awaitable objects <asyncio-awaitables>` in the *fs* sequence *concurrently*."
msgstr ""

#: ../../library/asyncio-task.rst:261
#: ../../library/asyncio-task.rst:427
msgid "If any awaitable in *fs* is a coroutine, it is automatically scheduled as a Task."
msgstr ""

#: ../../library/asyncio-task.rst:264
msgid "If all awaitables are completed successfully, the result is an aggregate list of returned values.  The order of result values corresponds to the order of awaitables in *fs*."
msgstr ""

#: ../../library/asyncio-task.rst:268
msgid "If *return_exceptions* is ``True``, exceptions are treated the same as successful results, and aggregated in the result list. Otherwise, the first raised exception is immediately propagated to the task that awaits on ``gather()``."
msgstr ""

#: ../../library/asyncio-task.rst:273
msgid "If ``gather`` is *cancelled*, all submitted awaitables (that have not completed yet) are also *cancelled*."
msgstr ""

#: ../../library/asyncio-task.rst:276
msgid "If any Task or Future from the *fs* sequence is *cancelled*, it is treated as if it raised :exc:`CancelledError` -- the ``gather()`` call is **not** cancelled in this case.  This is to prevent the cancellation of one submitted Task/Future to cause other Tasks/Futures to be cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:284
#: ../../library/asyncio-task.rst:391
#: ../../library/asyncio-task.rst:481
msgid "Example::"
msgstr ""

#: ../../library/asyncio-task.rst:318
msgid "If the *gather* itself is cancelled, the cancellation is propagated regardless of *return_exceptions*."
msgstr ""

#: ../../library/asyncio-task.rst:324
msgid "Shielding Tasks From Cancellation"
msgstr ""

#: ../../library/asyncio-task.rst:328
msgid "Protect an :ref:`awaitable object <asyncio-awaitables>` from being :meth:`cancelled <Task.cancel>`."
msgstr ""

#: ../../library/asyncio-task.rst:331
msgid "*fut* can be a coroutine, a Task, or a Future-like object.  If *fut* is a coroutine it is automatically scheduled as a Task."
msgstr ""

#: ../../library/asyncio-task.rst:334
msgid "The statement::"
msgstr ""

#: ../../library/asyncio-task.rst:338
msgid "is equivalent to::"
msgstr ""

#: ../../library/asyncio-task.rst:342
msgid "*except* that if the coroutine containing it is cancelled, the Task running in ``something()`` is not cancelled.  From the point of view of ``something()``, the cancellation did not happen. Although its caller is still cancelled, so the \"await\" expression still raises a :exc:`CancelledError`."
msgstr ""

#: ../../library/asyncio-task.rst:348
msgid "If ``something()`` is cancelled by other means (i.e. from within itself) that would also cancel ``shield()``."
msgstr ""

#: ../../library/asyncio-task.rst:351
msgid "If it is desired to completely ignore cancellation (not recommended) the ``shield()`` function should be combined with a try/except clause, as follows::"
msgstr ""

#: ../../library/asyncio-task.rst:362
msgid "Timeouts"
msgstr ""

#: ../../library/asyncio-task.rst:366
msgid "Wait for the *fut* :ref:`awaitable <asyncio-awaitables>` to complete with a timeout."
msgstr ""

#: ../../library/asyncio-task.rst:369
msgid "If *fut* is a coroutine it is automatically scheduled as a Task."
msgstr ""

#: ../../library/asyncio-task.rst:371
msgid "*timeout* can either be ``None`` or a float or int number of seconds to wait for.  If *timeout* is ``None``, block until the future completes."
msgstr ""

#: ../../library/asyncio-task.rst:375
msgid "If a timeout occurs, it cancels the task and raises :exc:`asyncio.TimeoutError`."
msgstr ""

#: ../../library/asyncio-task.rst:378
msgid "To avoid the task :meth:`cancellation <Task.cancel>`, wrap it in :func:`shield`."
msgstr ""

#: ../../library/asyncio-task.rst:381
msgid "The function will wait until the future is actually cancelled, so the total wait time may exceed the *timeout*."
msgstr ""

#: ../../library/asyncio-task.rst:384
msgid "If the wait is cancelled, the future *fut* is also cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:411
msgid "When *fut* is cancelled due to a timeout, ``wait_for`` waits for *fut* to be cancelled.  Previously, it raised :exc:`asyncio.TimeoutError` immediately."
msgstr ""

#: ../../library/asyncio-task.rst:418
msgid "Waiting Primitives"
msgstr ""

#: ../../library/asyncio-task.rst:423
msgid "Run :ref:`awaitable objects <asyncio-awaitables>` in the *fs* sequence concurrently and block until the condition specified by *return_when*."
msgstr ""

#: ../../library/asyncio-task.rst:430
msgid "Returns two sets of Tasks/Futures: ``(done, pending)``."
msgstr ""

#: ../../library/asyncio-task.rst:435
msgid "*timeout* (a float or int), if specified, can be used to control the maximum number of seconds to wait before returning."
msgstr ""

#: ../../library/asyncio-task.rst:438
msgid "Note that this function does not raise :exc:`asyncio.TimeoutError`. Futures or Tasks that aren't done when the timeout occurs are simply returned in the second set."
msgstr ""

#: ../../library/asyncio-task.rst:442
msgid "*return_when* indicates when this function should return.  It must be one of the following constants:"
msgstr ""

#: ../../library/asyncio-task.rst:448
msgid "Constant"
msgstr ""

#: ../../library/asyncio-task.rst:448
msgid "Description"
msgstr ""

#: ../../library/asyncio-task.rst:450
msgid ":const:`FIRST_COMPLETED`"
msgstr ""

#: ../../library/asyncio-task.rst:450
msgid "The function will return when any future finishes or is cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:453
msgid ":const:`FIRST_EXCEPTION`"
msgstr ""

#: ../../library/asyncio-task.rst:453
msgid "The function will return when any future finishes by raising an exception.  If no future raises an exception then it is equivalent to :const:`ALL_COMPLETED`."
msgstr ""

#: ../../library/asyncio-task.rst:459
msgid ":const:`ALL_COMPLETED`"
msgstr ""

#: ../../library/asyncio-task.rst:459
msgid "The function will return when all futures finish or are cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:463
msgid "Unlike :func:`~asyncio.wait_for`, ``wait()`` does not cancel the futures when a timeout occurs."
msgstr ""

#: ../../library/asyncio-task.rst:466
msgid "Usage::"
msgstr ""

#: ../../library/asyncio-task.rst:473
msgid "Run :ref:`awaitable objects <asyncio-awaitables>` in the *fs* set concurrently.  Return an iterator of :class:`Future` objects. Each Future object returned represents the earliest result from the set of the remaining awaitables."
msgstr ""

#: ../../library/asyncio-task.rst:478
msgid "Raises :exc:`asyncio.TimeoutError` if the timeout occurs before all Futures are done."
msgstr ""

#: ../../library/asyncio-task.rst:489
msgid "Scheduling From Other Threads"
msgstr ""

#: ../../library/asyncio-task.rst:493
msgid "Submit a coroutine to the given event loop.  Thread-safe."
msgstr ""

#: ../../library/asyncio-task.rst:495
msgid "Return a :class:`concurrent.futures.Future` to wait for the result from another OS thread."
msgstr ""

#: ../../library/asyncio-task.rst:498
msgid "This function is meant to be called from a different OS thread than the one where the event loop is running.  Example::"
msgstr ""

#: ../../library/asyncio-task.rst:510
msgid "If an exception is raised in the coroutine, the returned Future will be notified.  It can also be used to cancel the task in the event loop::"
msgstr ""

#: ../../library/asyncio-task.rst:524
msgid "See the :ref:`concurrency and multithreading <asyncio-multithreading>` section of the documentation."
msgstr ""

#: ../../library/asyncio-task.rst:527
msgid "Unlike other asyncio functions this functions requires the *loop* argument to be passed explicitly."
msgstr ""

#: ../../library/asyncio-task.rst:534
msgid "Introspection"
msgstr ""

#: ../../library/asyncio-task.rst:539
msgid "Return the currently running :class:`Task` instance, or ``None`` if no task is running."
msgstr ""

#: ../../library/asyncio-task.rst:542
msgid "If *loop* is ``None`` :func:`get_running_loop` is used to get the current loop."
msgstr ""

#: ../../library/asyncio-task.rst:550
msgid "Return a set of not yet finished :class:`Task` objects run by the loop."
msgstr ""

#: ../../library/asyncio-task.rst:553
msgid "If *loop* is ``None``, :func:`get_running_loop` is used for getting current loop."
msgstr ""

#: ../../library/asyncio-task.rst:560
msgid "Task Object"
msgstr ""

#: ../../library/asyncio-task.rst:564
msgid "A :class:`Future`-like object that wraps a Python :ref:`coroutine <coroutine>`.  Not thread-safe."
msgstr ""

#: ../../library/asyncio-task.rst:567
msgid "Tasks are used to run coroutines in event loops. If a coroutine awaits on a Future, the Task suspends the execution of the coroutine and waits for the completion of the Future.  When the Future is *done*, the execution of the wrapped coroutine resumes."
msgstr ""

#: ../../library/asyncio-task.rst:573
msgid "Event loops use cooperative scheduling: an event loop runs one Task at a time.  While a Task awaits for the completion of a Future, the event loop runs other Tasks, callbacks, or performs IO operations."
msgstr ""

#: ../../library/asyncio-task.rst:578
msgid "Use the high-level :func:`asyncio.create_task` function to create Tasks, or the low-level :meth:`loop.create_task` or :func:`ensure_future` functions.  Manual instantiation of Tasks is discouraged."
msgstr ""

#: ../../library/asyncio-task.rst:583
msgid "To cancel a running Task use the :meth:`cancel` method.  Calling it will cause the Task to throw a :exc:`CancelledError` exception into the wrapped coroutine.  If a coroutine is awaiting on a Future object during cancellation, the Future object will be cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:588
msgid ":meth:`cancelled` can be used to check if the Task was cancelled. The method returns ``True`` if the wrapped coroutine did not suppress the :exc:`CancelledError` exception and was actually cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:593
msgid ":class:`asyncio.Task` inherits from :class:`Future` all of its APIs except :meth:`Future.set_result` and :meth:`Future.set_exception`."
msgstr ""

#: ../../library/asyncio-task.rst:597
msgid "Tasks support the :mod:`contextvars` module.  When a Task is created it copies the current context and later runs its coroutine in the copied context."
msgstr ""

#: ../../library/asyncio-task.rst:601
msgid "Added support for the :mod:`contextvars` module."
msgstr ""

#: ../../library/asyncio-task.rst:606
msgid "Request the Task to be cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:608
msgid "This arranges for a :exc:`CancelledError` exception to be thrown into the wrapped coroutine on the next cycle of the event loop."
msgstr ""

#: ../../library/asyncio-task.rst:611
msgid "The coroutine then has a chance to clean up or even deny the request by suppressing the exception with a :keyword:`try` ... ... ``except CancelledError`` ... :keyword:`finally` block. Therefore, unlike :meth:`Future.cancel`, :meth:`Task.cancel` does not guarantee that the Task will be cancelled, although suppressing cancellation completely is not common and is actively discouraged."
msgstr ""

#: ../../library/asyncio-task.rst:621
msgid "The following example illustrates how coroutines can intercept the cancellation request::"
msgstr ""

#: ../../library/asyncio-task.rst:660
msgid "Return ``True`` if the Task is *cancelled*."
msgstr ""

#: ../../library/asyncio-task.rst:662
msgid "The Task is *cancelled* when the cancellation was requested with :meth:`cancel` and the wrapped coroutine propagated the :exc:`CancelledError` exception thrown into it."
msgstr ""

#: ../../library/asyncio-task.rst:668
msgid "Return ``True`` if the Task is *done*."
msgstr ""

#: ../../library/asyncio-task.rst:670
msgid "A Task is *done* when the wrapped coroutine either returned a value, raised an exception, or the Task was cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:675
msgid "Return the list of stack frames for this Task."
msgstr ""

#: ../../library/asyncio-task.rst:677
msgid "If the wrapped coroutine is not done, this returns the stack where it is suspended.  If the coroutine has completed successfully or was cancelled, this returns an empty list. If the coroutine was terminated by an exception, this returns the list of traceback frames."
msgstr ""

#: ../../library/asyncio-task.rst:683
msgid "The frames are always ordered from oldest to newest."
msgstr ""

#: ../../library/asyncio-task.rst:685
msgid "Only one stack frame is returned for a suspended coroutine."
msgstr ""

#: ../../library/asyncio-task.rst:687
msgid "The optional *limit* argument sets the maximum number of frames to return; by default all available frames are returned. The ordering of the returned list differs depending on whether a stack or a traceback is returned: the newest frames of a stack are returned, but the oldest frames of a traceback are returned.  (This matches the behavior of the traceback module.)"
msgstr ""

#: ../../library/asyncio-task.rst:696
msgid "Print the stack or traceback for this Task."
msgstr ""

#: ../../library/asyncio-task.rst:698
msgid "This produces output similar to that of the traceback module for the frames retrieved by :meth:`get_stack`."
msgstr ""

#: ../../library/asyncio-task.rst:701
msgid "The *limit* argument is passed to :meth:`get_stack` directly."
msgstr ""

#: ../../library/asyncio-task.rst:703
msgid "The *file* argument is an I/O stream to which the output is written; by default output is written to :data:`sys.stderr`."
msgstr ""

#: ../../library/asyncio-task.rst:708
msgid "Return a set of all tasks for an event loop."
msgstr ""

#: ../../library/asyncio-task.rst:710
msgid "By default all tasks for the current event loop are returned. If *loop* is ``None``, the :func:`get_event_loop` function is used to get the current loop."
msgstr ""

#: ../../library/asyncio-task.rst:714
msgid "This method is **deprecated** and will be removed in Python 3.9.  Use the :func:`all_tasks` function instead."
msgstr ""

#: ../../library/asyncio-task.rst:719
msgid "Return the currently running task or ``None``."
msgstr ""

#: ../../library/asyncio-task.rst:721
msgid "If *loop* is ``None``, the :func:`get_event_loop` function is used to get the current loop."
msgstr ""

#: ../../library/asyncio-task.rst:724
msgid "This method is **deprecated** and will be removed in Python 3.9.  Use the :func:`current_task` function instead."
msgstr ""

#: ../../library/asyncio-task.rst:731
msgid "Generator-based Coroutines"
msgstr ""

#: ../../library/asyncio-task.rst:735
msgid "Support for generator-based coroutines is **deprecated** and is scheduled for removal in Python 4.0."
msgstr ""

#: ../../library/asyncio-task.rst:738
msgid "Generator-based coroutines predate async/await syntax.  They are Python generators that use ``yield from`` expressions to await on Futures and other coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:742
msgid "Generator-based coroutines should be decorated with :func:`@asyncio.coroutine <asyncio.coroutine>`, although this is not enforced."
msgstr ""

#: ../../library/asyncio-task.rst:749
msgid "Decorator to mark generator-based coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:751
msgid "This decorator enables legacy generator-based coroutines to be compatible with async/await code::"
msgstr ""

#: ../../library/asyncio-task.rst:761
msgid "This decorator is **deprecated** and is scheduled for removal in Python 4.0."
msgstr ""

#: ../../library/asyncio-task.rst:764
msgid "This decorator should not be used for :keyword:`async def` coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:769
msgid "Return ``True`` if *obj* is a :ref:`coroutine object <coroutine>`."
msgstr ""

#: ../../library/asyncio-task.rst:771
msgid "This method is different from :func:`inspect.iscoroutine` because it returns ``True`` for generator-based coroutines decorated with :func:`@coroutine <coroutine>`."
msgstr ""

#: ../../library/asyncio-task.rst:777
msgid "Return ``True`` if *func* is a :ref:`coroutine function <coroutine>`."
msgstr ""

#: ../../library/asyncio-task.rst:780
msgid "This method is different from :func:`inspect.iscoroutinefunction` because it returns ``True`` for generator-based coroutine functions decorated with :func:`@coroutine <coroutine>`."
msgstr ""


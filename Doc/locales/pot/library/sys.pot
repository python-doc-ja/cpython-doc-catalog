# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-27 09:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/sys.rst:2
msgid ":mod:`sys` --- System-specific parameters and functions"
msgstr ""

#: ../../library/sys.rst:9
msgid "This module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter. It is always available."
msgstr ""

#: ../../library/sys.rst:16
msgid "On POSIX systems where Python was built with the standard ``configure`` script, this contains the ABI flags as specified by :pep:`3149`."
msgstr ""

#: ../../library/sys.rst:24
msgid "The list of command line arguments passed to a Python script. ``argv[0]`` is the script name (it is operating system dependent whether this is a full pathname or not).  If the command was executed using the :option:`-c` command line option to the interpreter, ``argv[0]`` is set to the string ``'-c'``.  If no script name was passed to the Python interpreter, ``argv[0]`` is the empty string."
msgstr ""

#: ../../library/sys.rst:30
msgid "To loop over the standard input, or the list of files given on the command line, see the :mod:`fileinput` module."
msgstr ""

#: ../../library/sys.rst:36
msgid "Set during Python startup, before ``site.py`` is run, to the same value as :data:`exec_prefix`. If not running in a :ref:`virtual environment <venv-def>`, the values will stay the same; if ``site.py`` finds that a virtual environment is in use, the values of :data:`prefix` and :data:`exec_prefix` will be changed to point to the virtual environment, whereas :data:`base_prefix` and :data:`base_exec_prefix` will remain pointing to the base Python installation (the one which the virtual environment was created from)."
msgstr ""

#: ../../library/sys.rst:50
msgid "Set during Python startup, before ``site.py`` is run, to the same value as :data:`prefix`. If not running in a :ref:`virtual environment <venv-def>`, the values will stay the same; if ``site.py`` finds that a virtual environment is in use, the values of :data:`prefix` and :data:`exec_prefix` will be changed to point to the virtual environment, whereas :data:`base_prefix` and :data:`base_exec_prefix` will remain pointing to the base Python installation (the one which the virtual environment was created from)."
msgstr ""

#: ../../library/sys.rst:63
msgid "An indicator of the native byte order.  This will have the value ``'big'`` on big-endian (most-significant byte first) platforms, and ``'little'`` on little-endian (least-significant byte first) platforms."
msgstr ""

#: ../../library/sys.rst:70
msgid "A tuple of strings giving the names of all modules that are compiled into this Python interpreter.  (This information is not available in any other way --- ``modules.keys()`` only lists the imported modules.)"
msgstr ""

#: ../../library/sys.rst:77
msgid "Call ``func(*args)``, while tracing is enabled.  The tracing state is saved, and restored afterwards.  This is intended to be called from a debugger from a checkpoint, to recursively debug some other code."
msgstr ""

#: ../../library/sys.rst:84
msgid "A string containing the copyright pertaining to the Python interpreter."
msgstr ""

#: ../../library/sys.rst:89
msgid "Clear the internal type cache. The type cache is used to speed up attribute and method lookups. Use the function *only* to drop unnecessary references during reference leak debugging."
msgstr ""

#: ../../library/sys.rst:93
#: ../../library/sys.rst:109
msgid "This function should be used for internal and specialized purposes only."
msgstr ""

#: ../../library/sys.rst:98
msgid "Return a dictionary mapping each thread's identifier to the topmost stack frame currently active in that thread at the time the function is called. Note that functions in the :mod:`traceback` module can build the call stack given such a frame."
msgstr ""

#: ../../library/sys.rst:103
msgid "This is most useful for debugging deadlock:  this function does not require the deadlocked threads' cooperation, and such threads' call stacks are frozen for as long as they remain deadlocked.  The frame returned for a non-deadlocked thread may bear no relationship to that thread's current activity by the time calling code examines the frame."
msgstr ""

#: ../../library/sys.rst:114
msgid "This hook function is called by built-in :func:`breakpoint`.  By default, it drops you into the :mod:`pdb` debugger, but it can be set to any other function so that you can choose which debugger gets used."
msgstr ""

#: ../../library/sys.rst:118
msgid "The signature of this function is dependent on what it calls.  For example, the default binding (e.g. ``pdb.set_trace()``) expects no arguments, but you might bind it to a function that expects additional arguments (positional and/or keyword).  The built-in ``breakpoint()`` function passes its ``*args`` and ``**kws`` straight through.  Whatever ``breakpointhooks()`` returns is returned from ``breakpoint()``."
msgstr ""

#: ../../library/sys.rst:125
msgid "The default implementation first consults the environment variable :envvar:`PYTHONBREAKPOINT`.  If that is set to ``\"0\"`` then this function returns immediately; i.e. it is a no-op.  If the environment variable is not set, or is set to the empty string, ``pdb.set_trace()`` is called. Otherwise this variable should name a function to run, using Python's dotted-import nomenclature, e.g. ``package.subpackage.module.function``. In this case, ``package.subpackage.module`` would be imported and the resulting module must have a callable named ``function()``.  This is run, passing in ``*args`` and ``**kws``, and whatever ``function()`` returns, ``sys.breakpointhook()`` returns to the built-in :func:`breakpoint` function."
msgstr ""

#: ../../library/sys.rst:137
msgid "Note that if anything goes wrong while importing the callable named by :envvar:`PYTHONBREAKPOINT`, a :exc:`RuntimeWarning` is reported and the breakpoint is ignored."
msgstr ""

#: ../../library/sys.rst:141
msgid "Also note that if ``sys.breakpointhook()`` is overridden programmatically, :envvar:`PYTHONBREAKPOINT` is *not* consulted."
msgstr ""

#: ../../library/sys.rst:148
msgid "Print low-level information to stderr about the state of CPython's memory allocator."
msgstr ""

#: ../../library/sys.rst:151
msgid "If Python is configured --with-pydebug, it also performs some expensive internal consistency checks."
msgstr ""

#: ../../library/sys.rst:158
msgid "This function is specific to CPython.  The exact output format is not defined here, and may change."
msgstr ""

#: ../../library/sys.rst:164
msgid "Integer specifying the handle of the Python DLL."
msgstr ""

#: ../../library/sys.rst:166
#: ../../library/sys.rst:657
#: ../../library/sys.rst:1330
#: ../../library/sys.rst:1477
msgid "Availability: Windows."
msgstr ""

#: ../../library/sys.rst:171
msgid "If *value* is not ``None``, this function prints ``repr(value)`` to ``sys.stdout``, and saves *value* in ``builtins._``. If ``repr(value)`` is not encodable to ``sys.stdout.encoding`` with ``sys.stdout.errors`` error handler (which is probably ``'strict'``), encode it to ``sys.stdout.encoding`` with ``'backslashreplace'`` error handler."
msgstr ""

#: ../../library/sys.rst:177
msgid "``sys.displayhook`` is called on the result of evaluating an :term:`expression` entered in an interactive Python session.  The display of these values can be customized by assigning another one-argument function to ``sys.displayhook``."
msgstr ""

#: ../../library/sys.rst:181
msgid "Pseudo-code::"
msgstr ""

#: ../../library/sys.rst:201
msgid "Use ``'backslashreplace'`` error handler on :exc:`UnicodeEncodeError`."
msgstr ""

#: ../../library/sys.rst:207
msgid "If this is true, Python won't try to write ``.pyc`` files on the import of source modules.  This value is initially set to ``True`` or ``False`` depending on the :option:`-B` command line option and the :envvar:`PYTHONDONTWRITEBYTECODE` environment variable, but you can set it yourself to control bytecode file generation."
msgstr ""

#: ../../library/sys.rst:216
msgid "This function prints out a given traceback and exception to ``sys.stderr``."
msgstr ""

#: ../../library/sys.rst:218
msgid "When an exception is raised and uncaught, the interpreter calls ``sys.excepthook`` with three arguments, the exception class, exception instance, and a traceback object.  In an interactive session this happens just before control is returned to the prompt; in a Python program this happens just before the program exits.  The handling of such top-level exceptions can be customized by assigning another three-argument function to ``sys.excepthook``."
msgstr ""

#: ../../library/sys.rst:230
msgid "These objects contain the original values of ``breakpointhook``, ``displayhook``, and ``excepthook`` at the start of the program.  They are saved so that ``breakpointhook``, ``displayhook`` and ``excepthook`` can be restored in case they happen to get replaced with broken or alternative objects."
msgstr ""

#: ../../library/sys.rst:236
msgid "__breakpointhook__"
msgstr ""

#: ../../library/sys.rst:242
msgid "This function returns a tuple of three values that give information about the exception that is currently being handled.  The information returned is specific both to the current thread and to the current stack frame.  If the current stack frame is not handling an exception, the information is taken from the calling stack frame, or its caller, and so on until a stack frame is found that is handling an exception.  Here, \"handling an exception\" is defined as \"executing an except clause.\"  For any stack frame, only information about the exception being currently handled is accessible."
msgstr ""

#: ../../library/sys.rst:253
msgid "If no exception is being handled anywhere on the stack, a tuple containing three ``None`` values is returned.  Otherwise, the values returned are ``(type, value, traceback)``.  Their meaning is: *type* gets the type of the exception being handled (a subclass of :exc:`BaseException`); *value* gets the exception instance (an instance of the exception type); *traceback* gets a traceback object (see the Reference Manual) which encapsulates the call stack at the point where the exception originally occurred."
msgstr ""

#: ../../library/sys.rst:264
msgid "A string giving the site-specific directory prefix where the platform-dependent Python files are installed; by default, this is also ``'/usr/local'``.  This can be set at build time with the ``--exec-prefix`` argument to the :program:`configure` script.  Specifically, all configuration files (e.g. the :file:`pyconfig.h` header file) are installed in the directory :file:`{exec_prefix}/lib/python{X.Y}/config`, and shared library modules are installed in :file:`{exec_prefix}/lib/python{X.Y}/lib-dynload`, where *X.Y* is the version number of Python, for example ``3.2``."
msgstr ""

#: ../../library/sys.rst:275
msgid "If a :ref:`virtual environment <venv-def>` is in effect, this value will be changed in ``site.py`` to point to the virtual environment. The value for the Python installation will still be available, via :data:`base_exec_prefix`."
msgstr ""

#: ../../library/sys.rst:283
msgid "A string giving the absolute path of the executable binary for the Python interpreter, on systems where this makes sense. If Python is unable to retrieve the real path to its executable, :data:`sys.executable` will be an empty string or ``None``."
msgstr ""

#: ../../library/sys.rst:291
msgid "Exit from Python.  This is implemented by raising the :exc:`SystemExit` exception, so cleanup actions specified by finally clauses of :keyword:`try` statements are honored, and it is possible to intercept the exit attempt at an outer level."
msgstr ""

#: ../../library/sys.rst:296
msgid "The optional argument *arg* can be an integer giving the exit status (defaulting to zero), or another type of object.  If it is an integer, zero is considered \"successful termination\" and any nonzero value is considered \"abnormal termination\" by shells and the like.  Most systems require it to be in the range 0--127, and produce undefined results otherwise.  Some systems have a convention for assigning specific meanings to specific exit codes, but these are generally underdeveloped; Unix programs generally use 2 for command line syntax errors and 1 for all other kind of errors.  If another type of object is passed, ``None`` is equivalent to passing zero, and any other object is printed to :data:`stderr` and results in an exit code of 1.  In particular, ``sys.exit(\"some error message\")`` is a quick way to exit a program when an error occurs."
msgstr ""

#: ../../library/sys.rst:309
msgid "Since :func:`exit` ultimately \"only\" raises an exception, it will only exit the process when called from the main thread, and the exception is not intercepted."
msgstr ""

#: ../../library/sys.rst:313
msgid "If an error occurs in the cleanup after the Python interpreter has caught :exc:`SystemExit` (such as an error flushing buffered data in the standard streams), the exit status is changed to 120."
msgstr ""

#: ../../library/sys.rst:321
msgid "The :term:`struct sequence` *flags* exposes the status of command line flags. The attributes are read only."
msgstr ""

#: ../../library/sys.rst:325
#: ../../library/sys.rst:373
#: ../../library/sys.rst:718
msgid "attribute"
msgstr ""

#: ../../library/sys.rst:325
msgid "flag"
msgstr ""

#: ../../library/sys.rst:327
msgid ":const:`debug`"
msgstr ""

#: ../../library/sys.rst:327
msgid ":option:`-d`"
msgstr ""

#: ../../library/sys.rst:328
msgid ":const:`inspect`"
msgstr ""

#: ../../library/sys.rst:328
#: ../../library/sys.rst:329
msgid ":option:`-i`"
msgstr ""

#: ../../library/sys.rst:329
msgid ":const:`interactive`"
msgstr ""

#: ../../library/sys.rst:330
msgid ":const:`isolated`"
msgstr ""

#: ../../library/sys.rst:330
msgid ":option:`-I`"
msgstr ""

#: ../../library/sys.rst:331
msgid ":const:`optimize`"
msgstr ""

#: ../../library/sys.rst:331
msgid ":option:`-O` or :option:`-OO`"
msgstr ""

#: ../../library/sys.rst:332
msgid ":const:`dont_write_bytecode`"
msgstr ""

#: ../../library/sys.rst:332
msgid ":option:`-B`"
msgstr ""

#: ../../library/sys.rst:333
msgid ":const:`no_user_site`"
msgstr ""

#: ../../library/sys.rst:333
msgid ":option:`-s`"
msgstr ""

#: ../../library/sys.rst:334
msgid ":const:`no_site`"
msgstr ""

#: ../../library/sys.rst:334
msgid ":option:`-S`"
msgstr ""

#: ../../library/sys.rst:335
msgid ":const:`ignore_environment`"
msgstr ""

#: ../../library/sys.rst:335
msgid ":option:`-E`"
msgstr ""

#: ../../library/sys.rst:336
msgid ":const:`verbose`"
msgstr ""

#: ../../library/sys.rst:336
msgid ":option:`-v`"
msgstr ""

#: ../../library/sys.rst:337
msgid ":const:`bytes_warning`"
msgstr ""

#: ../../library/sys.rst:337
msgid ":option:`-b`"
msgstr ""

#: ../../library/sys.rst:338
msgid ":const:`quiet`"
msgstr ""

#: ../../library/sys.rst:338
msgid ":option:`-q`"
msgstr ""

#: ../../library/sys.rst:339
msgid ":const:`hash_randomization`"
msgstr ""

#: ../../library/sys.rst:339
msgid ":option:`-R`"
msgstr ""

#: ../../library/sys.rst:340
msgid ":const:`dev_mode`"
msgstr ""

#: ../../library/sys.rst:340
msgid ":option:`-X` ``dev``"
msgstr ""

#: ../../library/sys.rst:341
msgid ":const:`utf8_mode`"
msgstr ""

#: ../../library/sys.rst:341
msgid ":option:`-X` ``utf8``"
msgstr ""

#: ../../library/sys.rst:344
msgid "Added ``quiet`` attribute for the new :option:`-q` flag."
msgstr ""

#: ../../library/sys.rst:347
msgid "The ``hash_randomization`` attribute."
msgstr ""

#: ../../library/sys.rst:350
msgid "Removed obsolete ``division_warning`` attribute."
msgstr ""

#: ../../library/sys.rst:353
msgid "Added ``isolated`` attribute for :option:`-I` ``isolated`` flag."
msgstr ""

#: ../../library/sys.rst:356
msgid "Added ``dev_mode`` attribute for the new :option:`-X` ``dev`` flag and ``utf8_mode`` attribute for the new  :option:`-X` ``utf8`` flag."
msgstr ""

#: ../../library/sys.rst:363
msgid "A :term:`struct sequence` holding information about the float type. It contains low level information about the precision and internal representation.  The values correspond to the various floating-point constants defined in the standard header file :file:`float.h` for the 'C' programming language; see section 5.2.4.2.2 of the 1999 ISO/IEC C standard [C99]_, 'Characteristics of floating types', for details."
msgstr ""

#: ../../library/sys.rst:373
msgid "float.h macro"
msgstr ""

#: ../../library/sys.rst:373
#: ../../library/sys.rst:718
msgid "explanation"
msgstr ""

#: ../../library/sys.rst:375
msgid ":const:`epsilon`"
msgstr ""

#: ../../library/sys.rst:375
msgid "DBL_EPSILON"
msgstr ""

#: ../../library/sys.rst:375
msgid "difference between 1 and the least value greater than 1 that is representable as a float"
msgstr ""

#: ../../library/sys.rst:378
msgid ":const:`dig`"
msgstr ""

#: ../../library/sys.rst:378
msgid "DBL_DIG"
msgstr ""

#: ../../library/sys.rst:378
msgid "maximum number of decimal digits that can be faithfully represented in a float;  see below"
msgstr ""

#: ../../library/sys.rst:381
msgid ":const:`mant_dig`"
msgstr ""

#: ../../library/sys.rst:381
msgid "DBL_MANT_DIG"
msgstr ""

#: ../../library/sys.rst:381
msgid "float precision: the number of base-``radix`` digits in the significand of a float"
msgstr ""

#: ../../library/sys.rst:384
msgid ":const:`max`"
msgstr ""

#: ../../library/sys.rst:384
msgid "DBL_MAX"
msgstr ""

#: ../../library/sys.rst:384
msgid "maximum representable finite float"
msgstr ""

#: ../../library/sys.rst:386
msgid ":const:`max_exp`"
msgstr ""

#: ../../library/sys.rst:386
msgid "DBL_MAX_EXP"
msgstr ""

#: ../../library/sys.rst:386
msgid "maximum integer e such that ``radix**(e-1)`` is a representable finite float"
msgstr ""

#: ../../library/sys.rst:389
msgid ":const:`max_10_exp`"
msgstr ""

#: ../../library/sys.rst:389
msgid "DBL_MAX_10_EXP"
msgstr ""

#: ../../library/sys.rst:389
msgid "maximum integer e such that ``10**e`` is in the range of representable finite floats"
msgstr ""

#: ../../library/sys.rst:392
msgid ":const:`min`"
msgstr ""

#: ../../library/sys.rst:392
msgid "DBL_MIN"
msgstr ""

#: ../../library/sys.rst:392
msgid "minimum positive normalized float"
msgstr ""

#: ../../library/sys.rst:394
msgid ":const:`min_exp`"
msgstr ""

#: ../../library/sys.rst:394
msgid "DBL_MIN_EXP"
msgstr ""

#: ../../library/sys.rst:394
msgid "minimum integer e such that ``radix**(e-1)`` is a normalized float"
msgstr ""

#: ../../library/sys.rst:397
msgid ":const:`min_10_exp`"
msgstr ""

#: ../../library/sys.rst:397
msgid "DBL_MIN_10_EXP"
msgstr ""

#: ../../library/sys.rst:397
msgid "minimum integer e such that ``10**e`` is a normalized float"
msgstr ""

#: ../../library/sys.rst:400
msgid ":const:`radix`"
msgstr ""

#: ../../library/sys.rst:400
msgid "FLT_RADIX"
msgstr ""

#: ../../library/sys.rst:400
msgid "radix of exponent representation"
msgstr ""

#: ../../library/sys.rst:402
msgid ":const:`rounds`"
msgstr ""

#: ../../library/sys.rst:402
msgid "FLT_ROUNDS"
msgstr ""

#: ../../library/sys.rst:402
msgid "integer constant representing the rounding mode used for arithmetic operations.  This reflects the value of the system FLT_ROUNDS macro at interpreter startup time.  See section 5.2.4.2.2 of the C99 standard for an explanation of the possible values and their meanings."
msgstr ""

#: ../../library/sys.rst:410
msgid "The attribute :attr:`sys.float_info.dig` needs further explanation.  If ``s`` is any string representing a decimal number with at most :attr:`sys.float_info.dig` significant digits, then converting ``s`` to a float and back again will recover a string representing the same decimal value::"
msgstr ""

#: ../../library/sys.rst:423
msgid "But for strings with more than :attr:`sys.float_info.dig` significant digits, this isn't always true::"
msgstr ""

#: ../../library/sys.rst:432
msgid "A string indicating how the :func:`repr` function behaves for floats.  If the string has value ``'short'`` then for a finite float ``x``, ``repr(x)`` aims to produce a short string with the property that ``float(repr(x)) == x``.  This is the usual behaviour in Python 3.1 and later.  Otherwise, ``float_repr_style`` has value ``'legacy'`` and ``repr(x)`` behaves in the same way as it did in versions of Python prior to 3.1."
msgstr ""

#: ../../library/sys.rst:445
msgid "Return the number of memory blocks currently allocated by the interpreter, regardless of their size.  This function is mainly useful for tracking and debugging memory leaks.  Because of the interpreter's internal caches, the result can vary from call to call; you may have to call :func:`_clear_type_cache()` and :func:`gc.collect()` to get more predictable results."
msgstr ""

#: ../../library/sys.rst:452
msgid "If a Python build or implementation cannot reasonably compute this information, :func:`getallocatedblocks()` is allowed to return 0 instead."
msgstr ""

#: ../../library/sys.rst:460
msgid "Return the build time API version of Android as an integer."
msgstr ""

#: ../../library/sys.rst:463
msgid "Availability: Android."
msgstr ""

#: ../../library/sys.rst:469
msgid "Return the interpreter's \"check interval\"; see :func:`setcheckinterval`."
msgstr ""

#: ../../library/sys.rst:471
msgid "Use :func:`getswitchinterval` instead."
msgstr ""

#: ../../library/sys.rst:477
msgid "Return the name of the current default string encoding used by the Unicode implementation."
msgstr ""

#: ../../library/sys.rst:483
msgid "Return the current value of the flags that are used for :c:func:`dlopen` calls.  Symbolic names for the flag values can be found in the :mod:`os` module (``RTLD_xxx`` constants, e.g. :data:`os.RTLD_LAZY`)."
msgstr ""

#: ../../library/sys.rst:488
#: ../../library/sys.rst:1083
msgid "Availability: Unix."
msgstr ""

#: ../../library/sys.rst:493
msgid "Return the name of the encoding used to convert between Unicode filenames and bytes filenames. For best compatibility, str should be used for filenames in all cases, although representing filenames as bytes is also supported. Functions accepting or returning filenames should support either str or bytes and internally convert to the system's preferred representation."
msgstr ""

#: ../../library/sys.rst:500
msgid "This encoding is always ASCII-compatible."
msgstr ""

#: ../../library/sys.rst:502
#: ../../library/sys.rst:531
msgid ":func:`os.fsencode` and :func:`os.fsdecode` should be used to ensure that the correct encoding and errors mode are used."
msgstr ""

#: ../../library/sys.rst:505
msgid "In the UTF-8 mode, the encoding is ``utf-8`` on any platform."
msgstr ""

#: ../../library/sys.rst:507
msgid "On Mac OS X, the encoding is ``'utf-8'``."
msgstr ""

#: ../../library/sys.rst:509
msgid "On Unix, the encoding is the locale encoding."
msgstr ""

#: ../../library/sys.rst:511
msgid "On Windows, the encoding may be ``'utf-8'`` or ``'mbcs'``, depending on user configuration."
msgstr ""

#: ../../library/sys.rst:514
msgid ":func:`getfilesystemencoding` result cannot be ``None`` anymore."
msgstr ""

#: ../../library/sys.rst:517
msgid "Windows is no longer guaranteed to return ``'mbcs'``. See :pep:`529` and :func:`_enablelegacywindowsfsencoding` for more information."
msgstr ""

#: ../../library/sys.rst:521
msgid "Return 'utf-8' in the UTF-8 mode."
msgstr ""

#: ../../library/sys.rst:527
msgid "Return the name of the error mode used to convert between Unicode filenames and bytes filenames. The encoding name is returned from :func:`getfilesystemencoding`."
msgstr ""

#: ../../library/sys.rst:538
msgid "Return the reference count of the *object*.  The count returned is generally one higher than you might expect, because it includes the (temporary) reference as an argument to :func:`getrefcount`."
msgstr ""

#: ../../library/sys.rst:545
msgid "Return the current value of the recursion limit, the maximum depth of the Python interpreter stack.  This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python.  It can be set by :func:`setrecursionlimit`."
msgstr ""

#: ../../library/sys.rst:553
msgid "Return the size of an object in bytes. The object can be any type of object. All built-in objects will return correct results, but this does not have to hold true for third-party extensions as it is implementation specific."
msgstr ""

#: ../../library/sys.rst:558
msgid "Only the memory consumption directly attributed to the object is accounted for, not the memory consumption of objects it refers to."
msgstr ""

#: ../../library/sys.rst:561
msgid "If given, *default* will be returned if the object does not provide means to retrieve the size.  Otherwise a :exc:`TypeError` will be raised."
msgstr ""

#: ../../library/sys.rst:564
msgid ":func:`getsizeof` calls the object's ``__sizeof__`` method and adds an additional garbage collector overhead if the object is managed by the garbage collector."
msgstr ""

#: ../../library/sys.rst:568
msgid "See `recursive sizeof recipe <https://code.activestate.com/recipes/577504>`_ for an example of using :func:`getsizeof` recursively to find the size of containers and all their contents."
msgstr ""

#: ../../library/sys.rst:574
msgid "Return the interpreter's \"thread switch interval\"; see :func:`setswitchinterval`."
msgstr ""

#: ../../library/sys.rst:582
msgid "Return a frame object from the call stack.  If optional integer *depth* is given, return the frame object that many calls below the top of the stack.  If that is deeper than the call stack, :exc:`ValueError` is raised.  The default for *depth* is zero, returning the frame at the top of the call stack."
msgstr ""

#: ../../library/sys.rst:589
msgid "This function should be used for internal and specialized purposes only. It is not guaranteed to exist in all implementations of Python."
msgstr ""

#: ../../library/sys.rst:599
msgid "Get the profiler function as set by :func:`setprofile`."
msgstr ""

#: ../../library/sys.rst:608
msgid "Get the trace function as set by :func:`settrace`."
msgstr ""

#: ../../library/sys.rst:612
msgid "The :func:`gettrace` function is intended only for implementing debuggers, profilers, coverage tools and the like.  Its behavior is part of the implementation platform, rather than part of the language definition, and thus may not be available in all Python implementations."
msgstr ""

#: ../../library/sys.rst:620
msgid "Return a named tuple describing the Windows version currently running.  The named elements are *major*, *minor*, *build*, *platform*, *service_pack*, *service_pack_minor*, *service_pack_major*, *suite_mask*, *product_type* and *platform_version*. *service_pack* contains a string, *platform_version* a 3-tuple and all other values are integers. The components can also be accessed by name, so ``sys.getwindowsversion()[0]`` is equivalent to ``sys.getwindowsversion().major``. For compatibility with prior versions, only the first 5 elements are retrievable by indexing."
msgstr ""

#: ../../library/sys.rst:631
msgid "*platform* will be :const:`2 (VER_PLATFORM_WIN32_NT)`."
msgstr ""

#: ../../library/sys.rst:633
msgid "*product_type* may be one of the following values:"
msgstr ""

#: ../../library/sys.rst:636
msgid "Constant"
msgstr ""

#: ../../library/sys.rst:636
msgid "Meaning"
msgstr ""

#: ../../library/sys.rst:638
msgid ":const:`1 (VER_NT_WORKSTATION)`"
msgstr ""

#: ../../library/sys.rst:638
msgid "The system is a workstation."
msgstr ""

#: ../../library/sys.rst:640
msgid ":const:`2 (VER_NT_DOMAIN_CONTROLLER)`"
msgstr ""

#: ../../library/sys.rst:640
msgid "The system is a domain controller."
msgstr ""

#: ../../library/sys.rst:643
msgid ":const:`3 (VER_NT_SERVER)`"
msgstr ""

#: ../../library/sys.rst:643
msgid "The system is a server, but not a domain controller."
msgstr ""

#: ../../library/sys.rst:647
msgid "This function wraps the Win32 :c:func:`GetVersionEx` function; see the Microsoft documentation on :c:func:`OSVERSIONINFOEX` for more information about these fields."
msgstr ""

#: ../../library/sys.rst:651
msgid "*platform_version* returns the accurate major version, minor version and build number of the current operating system, rather than the version that is being emulated for the process. It is intended for use in logging rather than for feature detection."
msgstr ""

#: ../../library/sys.rst:658
msgid "Changed to a named tuple and added *service_pack_minor*, *service_pack_major*, *suite_mask*, and *product_type*."
msgstr ""

#: ../../library/sys.rst:662
msgid "Added *platform_version*"
msgstr ""

#: ../../library/sys.rst:668
msgid "Returns an *asyncgen_hooks* object, which is similar to a :class:`~collections.namedtuple` of the form `(firstiter, finalizer)`, where *firstiter* and *finalizer* are expected to be either ``None`` or functions which take an :term:`asynchronous generator iterator` as an argument, and are used to schedule finalization of an asynchronous generator by an event loop."
msgstr ""

#: ../../library/sys.rst:675
msgid "See :pep:`525` for more details."
msgstr ""

#: ../../library/sys.rst:679
#: ../../library/sys.rst:1254
msgid "This function has been added on a provisional basis (see :pep:`411` for details.)"
msgstr ""

#: ../../library/sys.rst:685
msgid "Get the current coroutine origin tracking depth, as set by func:`set_coroutine_origin_tracking_depth`."
msgstr ""

#: ../../library/sys.rst:691
#: ../../library/sys.rst:703
#: ../../library/sys.rst:1275
#: ../../library/sys.rst:1314
msgid "This function has been added on a provisional basis (see :pep:`411` for details.)  Use it only for debugging purposes."
msgstr ""

#: ../../library/sys.rst:697
msgid "Returns ``None``, or a wrapper set by :func:`set_coroutine_wrapper`."
msgstr ""

#: ../../library/sys.rst:699
#: ../../library/sys.rst:1310
msgid "See :pep:`492` for more details."
msgstr ""

#: ../../library/sys.rst:706
#: ../../library/sys.rst:1317
msgid "The coroutine wrapper functionality has been deprecated, and will be removed in 3.8. See :issue:`32591` for details."
msgstr ""

#: ../../library/sys.rst:713
msgid "A :term:`struct sequence` giving parameters of the numeric hash implementation.  For more details about hashing of numeric types, see :ref:`numeric-hash`."
msgstr ""

#: ../../library/sys.rst:720
msgid ":const:`width`"
msgstr ""

#: ../../library/sys.rst:720
msgid "width in bits used for hash values"
msgstr ""

#: ../../library/sys.rst:722
msgid ":const:`modulus`"
msgstr ""

#: ../../library/sys.rst:722
msgid "prime modulus P used for numeric hash scheme"
msgstr ""

#: ../../library/sys.rst:724
msgid ":const:`inf`"
msgstr ""

#: ../../library/sys.rst:724
msgid "hash value returned for a positive infinity"
msgstr ""

#: ../../library/sys.rst:726
msgid ":const:`nan`"
msgstr ""

#: ../../library/sys.rst:726
msgid "hash value returned for a nan"
msgstr ""

#: ../../library/sys.rst:728
msgid ":const:`imag`"
msgstr ""

#: ../../library/sys.rst:728
msgid "multiplier used for the imaginary part of a complex number"
msgstr ""

#: ../../library/sys.rst:731
msgid ":const:`algorithm`"
msgstr ""

#: ../../library/sys.rst:731
msgid "name of the algorithm for hashing of str, bytes, and memoryview"
msgstr ""

#: ../../library/sys.rst:734
msgid ":const:`hash_bits`"
msgstr ""

#: ../../library/sys.rst:734
msgid "internal output size of the hash algorithm"
msgstr ""

#: ../../library/sys.rst:736
msgid ":const:`seed_bits`"
msgstr ""

#: ../../library/sys.rst:736
msgid "size of the seed key of the hash algorithm"
msgstr ""

#: ../../library/sys.rst:742
msgid "Added *algorithm*, *hash_bits* and *seed_bits*"
msgstr ""

#: ../../library/sys.rst:748
msgid "The version number encoded as a single integer.  This is guaranteed to increase with each version, including proper support for non-production releases.  For example, to test that the Python interpreter is at least version 1.5.2, use::"
msgstr ""

#: ../../library/sys.rst:759
msgid "This is called ``hexversion`` since it only really looks meaningful when viewed as the result of passing it to the built-in :func:`hex` function.  The :term:`struct sequence`  :data:`sys.version_info` may be used for a more human-friendly encoding of the same information."
msgstr ""

#: ../../library/sys.rst:764
msgid "More details of ``hexversion`` can be found at :ref:`apiabiversion`."
msgstr ""

#: ../../library/sys.rst:769
msgid "An object containing information about the implementation of the currently running Python interpreter.  The following attributes are required to exist in all Python implementations."
msgstr ""

#: ../../library/sys.rst:773
msgid "*name* is the implementation's identifier, e.g. ``'cpython'``.  The actual string is defined by the Python implementation, but it is guaranteed to be lower case."
msgstr ""

#: ../../library/sys.rst:777
msgid "*version* is a named tuple, in the same format as :data:`sys.version_info`.  It represents the version of the Python *implementation*.  This has a distinct meaning from the specific version of the Python *language* to which the currently running interpreter conforms, which ``sys.version_info`` represents.  For example, for PyPy 1.8 ``sys.implementation.version`` might be ``sys.version_info(1, 8, 0, 'final', 0)``, whereas ``sys.version_info`` would be ``sys.version_info(2, 7, 2, 'final', 0)``.  For CPython they are the same value, since it is the reference implementation."
msgstr ""

#: ../../library/sys.rst:787
msgid "*hexversion* is the implementation version in hexadecimal format, like :data:`sys.hexversion`."
msgstr ""

#: ../../library/sys.rst:790
msgid "*cache_tag* is the tag used by the import machinery in the filenames of cached modules.  By convention, it would be a composite of the implementation's name and version, like ``'cpython-33'``.  However, a Python implementation may use some other value if appropriate.  If ``cache_tag`` is set to ``None``, it indicates that module caching should be disabled."
msgstr ""

#: ../../library/sys.rst:797
msgid ":data:`sys.implementation` may contain additional attributes specific to the Python implementation.  These non-standard attributes must start with an underscore, and are not described here.  Regardless of its contents, :data:`sys.implementation` will not change during a run of the interpreter, nor between implementation versions.  (It may change between Python language versions, however.)  See :pep:`421` for more information."
msgstr ""

#: ../../library/sys.rst:809
msgid "A :term:`struct sequence` that holds information about Python's internal representation of integers.  The attributes are read only."
msgstr ""

#: ../../library/sys.rst:815
#: ../../library/sys.rst:1404
msgid "Attribute"
msgstr ""

#: ../../library/sys.rst:815
#: ../../library/sys.rst:1404
msgid "Explanation"
msgstr ""

#: ../../library/sys.rst:817
msgid ":const:`bits_per_digit`"
msgstr ""

#: ../../library/sys.rst:817
msgid "number of bits held in each digit.  Python integers are stored internally in base ``2**int_info.bits_per_digit``"
msgstr ""

#: ../../library/sys.rst:821
msgid ":const:`sizeof_digit`"
msgstr ""

#: ../../library/sys.rst:821
msgid "size in bytes of the C type used to represent a digit"
msgstr ""

#: ../../library/sys.rst:830
msgid "When this attribute exists, its value is automatically called (with no arguments) when the interpreter is launched in :ref:`interactive mode <tut-interactive>`.  This is done after the :envvar:`PYTHONSTARTUP` file is read, so that you can set this hook there.  The :mod:`site` module :ref:`sets this <rlcompleter-config>`."
msgstr ""

#: ../../library/sys.rst:841
msgid "Enter *string* in the table of \"interned\" strings and return the interned string -- which is *string* itself or a copy. Interning strings is useful to gain a little performance on dictionary lookup -- if the keys in a dictionary are interned, and the lookup key is interned, the key comparisons (after hashing) can be done by a pointer compare instead of a string compare.  Normally, the names used in Python programs are automatically interned, and the dictionaries used to hold module, class or instance attributes have interned keys."
msgstr ""

#: ../../library/sys.rst:849
msgid "Interned strings are not immortal; you must keep a reference to the return value of :func:`intern` around to benefit from it."
msgstr ""

#: ../../library/sys.rst:855
msgid "Return :const:`True` if the Python interpreter is :term:`shutting down <interpreter shutdown>`, :const:`False` otherwise."
msgstr ""

#: ../../library/sys.rst:865
msgid "These three variables are not always defined; they are set when an exception is not handled and the interpreter prints an error message and a stack traceback. Their intended use is to allow an interactive user to import a debugger module and engage in post-mortem debugging without having to re-execute the command that caused the error.  (Typical use is ``import pdb; pdb.pm()`` to enter the post-mortem debugger; see :mod:`pdb` module for more information.)"
msgstr ""

#: ../../library/sys.rst:873
msgid "The meaning of the variables is the same as that of the return values from :func:`exc_info` above."
msgstr ""

#: ../../library/sys.rst:879
msgid "An integer giving the maximum value a variable of type :c:type:`Py_ssize_t` can take.  It's usually ``2**31 - 1`` on a 32-bit platform and ``2**63 - 1`` on a 64-bit platform."
msgstr ""

#: ../../library/sys.rst:886
msgid "An integer giving the value of the largest Unicode code point, i.e. ``1114111`` (``0x10FFFF`` in hexadecimal)."
msgstr ""

#: ../../library/sys.rst:889
msgid "Before :pep:`393`, ``sys.maxunicode`` used to be either ``0xFFFF`` or ``0x10FFFF``, depending on the configuration option that specified whether Unicode characters were stored as UCS-2 or UCS-4."
msgstr ""

#: ../../library/sys.rst:897
msgid "A list of :term:`meta path finder` objects that have their :meth:`~importlib.abc.MetaPathFinder.find_spec` methods called to see if one of the objects can find the module to be imported. The :meth:`~importlib.abc.MetaPathFinder.find_spec` method is called with at least the absolute name of the module being imported. If the module to be imported is contained in a package, then the parent package's :attr:`__path__` attribute is passed in as a second argument. The method returns a :term:`module spec`, or ``None`` if the module cannot be found."
msgstr ""

#: ../../library/sys.rst:909
msgid ":class:`importlib.abc.MetaPathFinder`"
msgstr ""

#: ../../library/sys.rst:909
msgid "The abstract base class defining the interface of finder objects on :data:`meta_path`."
msgstr ""

#: ../../library/sys.rst:913
msgid ":class:`importlib.machinery.ModuleSpec`"
msgstr ""

#: ../../library/sys.rst:912
msgid "The concrete class which :meth:`~importlib.abc.MetaPathFinder.find_spec` should return instances of."
msgstr ""

#: ../../library/sys.rst:918
msgid ":term:`Module specs <module spec>` were introduced in Python 3.4, by :pep:`451`. Earlier versions of Python looked for a method called :meth:`~importlib.abc.MetaPathFinder.find_module`. This is still called as a fallback if a :data:`meta_path` entry doesn't have a :meth:`~importlib.abc.MetaPathFinder.find_spec` method."
msgstr ""

#: ../../library/sys.rst:926
msgid "This is a dictionary that maps module names to modules which have already been loaded.  This can be manipulated to force reloading of modules and other tricks. However, replacing the dictionary will not necessarily work as expected and deleting essential items from the dictionary may cause Python to fail."
msgstr ""

#: ../../library/sys.rst:936
msgid "A list of strings that specifies the search path for modules. Initialized from the environment variable :envvar:`PYTHONPATH`, plus an installation-dependent default."
msgstr ""

#: ../../library/sys.rst:940
msgid "As initialized upon program startup, the first item of this list, ``path[0]``, is the directory containing the script that was used to invoke the Python interpreter.  If the script directory is not available (e.g.  if the interpreter is invoked interactively or if the script is read from standard input), ``path[0]`` is the empty string, which directs Python to search modules in the current directory first.  Notice that the script directory is inserted *before* the entries inserted as a result of :envvar:`PYTHONPATH`."
msgstr ""

#: ../../library/sys.rst:948
msgid "A program is free to modify this list for its own purposes.  Only strings and bytes should be added to :data:`sys.path`; all other data types are ignored during import."
msgstr ""

#: ../../library/sys.rst:954
msgid "Module :mod:`site` This describes how to use .pth files to extend :data:`sys.path`."
msgstr ""

#: ../../library/sys.rst:960
msgid "A list of callables that take a path argument to try to create a :term:`finder` for the path. If a finder can be created, it is to be returned by the callable, else raise :exc:`ImportError`."
msgstr ""

#: ../../library/sys.rst:964
#: ../../library/sys.rst:975
msgid "Originally specified in :pep:`302`."
msgstr ""

#: ../../library/sys.rst:969
msgid "A dictionary acting as a cache for :term:`finder` objects. The keys are paths that have been passed to :data:`sys.path_hooks` and the values are the finders that are found. If a path is a valid file system path but no finder is found on :data:`sys.path_hooks` then ``None`` is stored."
msgstr ""

#: ../../library/sys.rst:977
msgid "``None`` is stored instead of :class:`imp.NullImporter` when no finder is found."
msgstr ""

#: ../../library/sys.rst:984
msgid "This string contains a platform identifier that can be used to append platform-specific components to :data:`sys.path`, for instance."
msgstr ""

#: ../../library/sys.rst:987
msgid "For Unix systems, except on Linux, this is the lowercased OS name as returned by ``uname -s`` with the first part of the version as returned by ``uname -r`` appended, e.g. ``'sunos5'`` or ``'freebsd8'``, *at the time when Python was built*.  Unless you want to test for a specific system version, it is therefore recommended to use the following idiom::"
msgstr ""

#: ../../library/sys.rst:998
msgid "For other systems, the values are:"
msgstr ""

#: ../../library/sys.rst:1001
msgid "System"
msgstr ""

#: ../../library/sys.rst:1001
msgid "``platform`` value"
msgstr ""

#: ../../library/sys.rst:1003
msgid "Linux"
msgstr ""

#: ../../library/sys.rst:1003
msgid "``'linux'``"
msgstr ""

#: ../../library/sys.rst:1004
msgid "Windows"
msgstr ""

#: ../../library/sys.rst:1004
msgid "``'win32'``"
msgstr ""

#: ../../library/sys.rst:1005
msgid "Windows/Cygwin"
msgstr ""

#: ../../library/sys.rst:1005
msgid "``'cygwin'``"
msgstr ""

#: ../../library/sys.rst:1006
msgid "Mac OS X"
msgstr ""

#: ../../library/sys.rst:1006
msgid "``'darwin'``"
msgstr ""

#: ../../library/sys.rst:1009
msgid "On Linux, :attr:`sys.platform` doesn't contain the major version anymore. It is always ``'linux'``, instead of ``'linux2'`` or ``'linux3'``.  Since older Python versions include the version number, it is recommended to always use the ``startswith`` idiom presented above."
msgstr ""

#: ../../library/sys.rst:1017
msgid ":attr:`os.name` has a coarser granularity.  :func:`os.uname` gives system-dependent version information."
msgstr ""

#: ../../library/sys.rst:1020
msgid "The :mod:`platform` module provides detailed checks for the system's identity."
msgstr ""

#: ../../library/sys.rst:1026
msgid "A string giving the site-specific directory prefix where the platform independent Python files are installed; by default, this is the string ``'/usr/local'``.  This can be set at build time with the ``--prefix`` argument to the :program:`configure` script.  The main collection of Python library modules is installed in the directory :file:`{prefix}/lib/python{X.Y}` while the platform independent header files (all except :file:`pyconfig.h`) are stored in :file:`{prefix}/include/python{X.Y}`, where *X.Y* is the version number of Python, for example ``3.2``."
msgstr ""

#: ../../library/sys.rst:1035
msgid "If a :ref:`virtual environment <venv-def>` is in effect, this value will be changed in ``site.py`` to point to the virtual environment. The value for the Python installation will still be available, via :data:`base_prefix`."
msgstr ""

#: ../../library/sys.rst:1050
msgid "Strings specifying the primary and secondary prompt of the interpreter.  These are only defined if the interpreter is in interactive mode.  Their initial values in this case are ``'>>> '`` and ``'... '``.  If a non-string object is assigned to either variable, its :func:`str` is re-evaluated each time the interpreter prepares to read a new interactive command; this can be used to implement a dynamic prompt."
msgstr ""

#: ../../library/sys.rst:1060
msgid "Set the interpreter's \"check interval\".  This integer value determines how often the interpreter checks for periodic things such as thread switches and signal handlers.  The default is ``100``, meaning the check is performed every 100 Python virtual instructions. Setting it to a larger value may increase performance for programs using threads.  Setting it to a value ``<=`` 0 checks every virtual instruction, maximizing responsiveness as well as overhead."
msgstr ""

#: ../../library/sys.rst:1067
msgid "This function doesn't have an effect anymore, as the internal logic for thread switching and asynchronous tasks has been rewritten.  Use :func:`setswitchinterval` instead."
msgstr ""

#: ../../library/sys.rst:1075
msgid "Set the flags used by the interpreter for :c:func:`dlopen` calls, such as when the interpreter loads extension modules.  Among other things, this will enable a lazy resolving of symbols when importing a module, if called as ``sys.setdlopenflags(0)``.  To share symbols across extension modules, call as ``sys.setdlopenflags(os.RTLD_GLOBAL)``.  Symbolic names for the flag values can be found in the :mod:`os` module (``RTLD_xxx`` constants, e.g. :data:`os.RTLD_LAZY`)."
msgstr ""

#: ../../library/sys.rst:1091
msgid "Set the system's profile function, which allows you to implement a Python source code profiler in Python.  See chapter :ref:`profile` for more information on the Python profiler.  The system's profile function is called similarly to the system's trace function (see :func:`settrace`), but it is called with different events, for example it isn't called for each executed line of code (only on call and return, but the return event is reported even when an exception has been set). The function is thread-specific, but there is no way for the profiler to know about context switches between threads, so it does not make sense to use this in the presence of multiple threads. Also, its return value is not used, so it can simply return ``None``.  Error in the profile function will cause itself unset."
msgstr ""

#: ../../library/sys.rst:1102
msgid "Profile functions should have three arguments: *frame*, *event*, and *arg*. *frame* is the current stack frame.  *event* is a string: ``'call'``, ``'return'``, ``'c_call'``, ``'c_return'``, or ``'c_exception'``. *arg* depends on the event type."
msgstr ""

#: ../../library/sys.rst:1107
#: ../../library/sys.rst:1187
msgid "The events have the following meaning:"
msgstr ""

#: ../../library/sys.rst:1111
#: ../../library/sys.rst:1192
msgid "``'call'``"
msgstr ""

#: ../../library/sys.rst:1110
msgid "A function is called (or some other code block entered).  The profile function is called; *arg* is ``None``."
msgstr ""

#: ../../library/sys.rst:1116
#: ../../library/sys.rst:1207
msgid "``'return'``"
msgstr ""

#: ../../library/sys.rst:1114
msgid "A function (or other code block) is about to return.  The profile function is called; *arg* is the value that will be returned, or ``None`` if the event is caused by an exception being raised."
msgstr ""

#: ../../library/sys.rst:1120
msgid "``'c_call'``"
msgstr ""

#: ../../library/sys.rst:1119
msgid "A C function is about to be called.  This may be an extension function or a built-in.  *arg* is the C function object."
msgstr ""

#: ../../library/sys.rst:1123
msgid "``'c_return'``"
msgstr ""

#: ../../library/sys.rst:1123
msgid "A C function has returned. *arg* is the C function object."
msgstr ""

#: ../../library/sys.rst:1125
msgid "``'c_exception'``"
msgstr ""

#: ../../library/sys.rst:1126
msgid "A C function has raised an exception.  *arg* is the C function object."
msgstr ""

#: ../../library/sys.rst:1130
msgid "Set the maximum depth of the Python interpreter stack to *limit*.  This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python."
msgstr ""

#: ../../library/sys.rst:1134
msgid "The highest possible limit is platform-dependent.  A user may need to set the limit higher when they have a program that requires deep recursion and a platform that supports a higher limit.  This should be done with care, because a too-high limit can lead to a crash."
msgstr ""

#: ../../library/sys.rst:1139
msgid "If the new limit is too low at the current recursion depth, a :exc:`RecursionError` exception is raised."
msgstr ""

#: ../../library/sys.rst:1142
msgid "A :exc:`RecursionError` exception is now raised if the new limit is too low at the current recursion depth."
msgstr ""

#: ../../library/sys.rst:1149
msgid "Set the interpreter's thread switch interval (in seconds).  This floating-point value determines the ideal duration of the \"timeslices\" allocated to concurrently running Python threads.  Please note that the actual value can be higher, especially if long-running internal functions or methods are used.  Also, which thread becomes scheduled at the end of the interval is the operating system's decision.  The interpreter doesn't have its own scheduler."
msgstr ""

#: ../../library/sys.rst:1166
msgid "Set the system's trace function, which allows you to implement a Python source code debugger in Python.  The function is thread-specific; for a debugger to support multiple threads, it must be registered using :func:`settrace` for each thread being debugged."
msgstr ""

#: ../../library/sys.rst:1171
msgid "Trace functions should have three arguments: *frame*, *event*, and *arg*. *frame* is the current stack frame.  *event* is a string: ``'call'``, ``'line'``, ``'return'``, ``'exception'`` or ``'opcode'``.  *arg* depends on the event type."
msgstr ""

#: ../../library/sys.rst:1176
msgid "The trace function is invoked (with *event* set to ``'call'``) whenever a new local scope is entered; it should return a reference to a local trace function to be used that scope, or ``None`` if the scope shouldn't be traced."
msgstr ""

#: ../../library/sys.rst:1180
msgid "The local trace function should return a reference to itself (or to another function for further tracing in that scope), or ``None`` to turn off tracing in that scope."
msgstr ""

#: ../../library/sys.rst:1184
msgid "If there is any error occurred in the trace function, it will be unset, just like ``settrace(None)`` is called."
msgstr ""

#: ../../library/sys.rst:1190
msgid "A function is called (or some other code block entered).  The global trace function is called; *arg* is ``None``; the return value specifies the local trace function."
msgstr ""

#: ../../library/sys.rst:1201
msgid "``'line'``"
msgstr ""

#: ../../library/sys.rst:1195
msgid "The interpreter is about to execute a new line of code or re-execute the condition of a loop.  The local trace function is called; *arg* is ``None``; the return value specifies the new local trace function.  See :file:`Objects/lnotab_notes.txt` for a detailed explanation of how this works. Per-line events may be disabled for a frame by setting :attr:`f_trace_lines` to :const:`False` on that frame."
msgstr ""

#: ../../library/sys.rst:1204
msgid "A function (or other code block) is about to return.  The local trace function is called; *arg* is the value that will be returned, or ``None`` if the event is caused by an exception being raised.  The trace function's return value is ignored."
msgstr ""

#: ../../library/sys.rst:1212
msgid "``'exception'``"
msgstr ""

#: ../../library/sys.rst:1210
msgid "An exception has occurred.  The local trace function is called; *arg* is a tuple ``(exception, value, traceback)``; the return value specifies the new local trace function."
msgstr ""

#: ../../library/sys.rst:1220
msgid "``'opcode'``"
msgstr ""

#: ../../library/sys.rst:1215
msgid "The interpreter is about to execute a new opcode (see :mod:`dis` for opcode details).  The local trace function is called; *arg* is ``None``; the return value specifies the new local trace function. Per-opcode events are not emitted by default: they must be explicitly requested by setting :attr:`f_trace_opcodes` to :const:`True` on the frame."
msgstr ""

#: ../../library/sys.rst:1222
msgid "Note that as an exception is propagated down the chain of callers, an ``'exception'`` event is generated at each level."
msgstr ""

#: ../../library/sys.rst:1225
msgid "For more information on code and frame objects, refer to :ref:`types`."
msgstr ""

#: ../../library/sys.rst:1229
msgid "The :func:`settrace` function is intended only for implementing debuggers, profilers, coverage tools and the like.  Its behavior is part of the implementation platform, rather than part of the language definition, and thus may not be available in all Python implementations."
msgstr ""

#: ../../library/sys.rst:1236
msgid "``'opcode'`` event type added; :attr:`f_trace_lines` and :attr:`f_trace_opcodes` attributes added to frames"
msgstr ""

#: ../../library/sys.rst:1241
msgid "Accepts two optional keyword arguments which are callables that accept an :term:`asynchronous generator iterator` as an argument. The *firstiter* callable will be called when an asynchronous generator is iterated for the first time. The *finalizer* will be called when an asynchronous generator is about to be garbage collected."
msgstr ""

#: ../../library/sys.rst:1247
msgid "See :pep:`525` for more details, and for a reference example of a *finalizer* method see the implementation of ``asyncio.Loop.shutdown_asyncgens`` in :source:`Lib/asyncio/base_events.py`"
msgstr ""

#: ../../library/sys.rst:1259
msgid "Allows enabling or disabling coroutine origin tracking. When enabled, the ``cr_origin`` attribute on coroutine objects will contain a tuple of (filename, line number, function name) tuples describing the traceback where the coroutine object was created, with the most recent call first. When disabled, ``cr_origin`` will be None."
msgstr ""

#: ../../library/sys.rst:1266
msgid "To enable, pass a *depth* value greater than zero; this sets the number of frames whose information will be captured. To disable, pass set *depth* to zero."
msgstr ""

#: ../../library/sys.rst:1270
msgid "This setting is thread-specific."
msgstr ""

#: ../../library/sys.rst:1280
msgid "Allows intercepting creation of :term:`coroutine` objects (only ones that are created by an :keyword:`async def` function; generators decorated with :func:`types.coroutine` or :func:`asyncio.coroutine` will not be intercepted)."
msgstr ""

#: ../../library/sys.rst:1285
msgid "The *wrapper* argument must be either:"
msgstr ""

#: ../../library/sys.rst:1287
msgid "a callable that accepts one argument (a coroutine object);"
msgstr ""

#: ../../library/sys.rst:1288
msgid "``None``, to reset the wrapper."
msgstr ""

#: ../../library/sys.rst:1290
msgid "If called twice, the new wrapper replaces the previous one.  The function is thread-specific."
msgstr ""

#: ../../library/sys.rst:1293
msgid "The *wrapper* callable cannot define new coroutines directly or indirectly::"
msgstr ""

#: ../../library/sys.rst:1308
msgid "See also :func:`get_coroutine_wrapper`."
msgstr ""

#: ../../library/sys.rst:1323
msgid "Changes the default filesystem encoding and errors mode to 'mbcs' and 'replace' respectively, for consistency with versions of Python prior to 3.6."
msgstr ""

#: ../../library/sys.rst:1326
msgid "This is equivalent to defining the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` environment variable before launching Python."
msgstr ""

#: ../../library/sys.rst:1331
msgid "See :pep:`529` for more details."
msgstr ""

#: ../../library/sys.rst:1338
msgid ":term:`File objects <file object>` used by the interpreter for standard input, output and errors:"
msgstr ""

#: ../../library/sys.rst:1341
msgid "``stdin`` is used for all interactive input (including calls to :func:`input`);"
msgstr ""

#: ../../library/sys.rst:1343
msgid "``stdout`` is used for the output of :func:`print` and :term:`expression` statements and for the prompts of :func:`input`;"
msgstr ""

#: ../../library/sys.rst:1345
msgid "The interpreter's own prompts and its error messages go to ``stderr``."
msgstr ""

#: ../../library/sys.rst:1347
msgid "These streams are regular :term:`text files <text file>` like those returned by the :func:`open` function.  Their parameters are chosen as follows:"
msgstr ""

#: ../../library/sys.rst:1351
msgid "The character encoding is platform-dependent.  Under Windows, if the stream is interactive (that is, if its :meth:`isatty` method returns ``True``), the console codepage is used, otherwise the ANSI code page.  Under other platforms, the locale encoding is used (see :meth:`locale.getpreferredencoding`)."
msgstr ""

#: ../../library/sys.rst:1356
msgid "Under all platforms though, you can override this value by setting the :envvar:`PYTHONIOENCODING` environment variable before starting Python."
msgstr ""

#: ../../library/sys.rst:1359
msgid "When interactive, ``stdout`` and ``stderr`` streams are line-buffered. Otherwise, they are block-buffered like regular text files.  You can override this value with the :option:`-u` command-line option."
msgstr ""

#: ../../library/sys.rst:1365
msgid "To write or read binary data from/to the standard streams, use the underlying binary :data:`~io.TextIOBase.buffer` object.  For example, to write bytes to :data:`stdout`, use ``sys.stdout.buffer.write(b'abc')``."
msgstr ""

#: ../../library/sys.rst:1369
msgid "However, if you are writing a library (and do not control in which context its code will be executed), be aware that the standard streams may be replaced with file-like objects like :class:`io.StringIO` which do not support the :attr:`~io.BufferedIOBase.buffer` attribute."
msgstr ""

#: ../../library/sys.rst:1379
msgid "These objects contain the original values of ``stdin``, ``stderr`` and ``stdout`` at the start of the program.  They are used during finalization, and could be useful to print to the actual standard stream no matter if the ``sys.std*`` object has been redirected."
msgstr ""

#: ../../library/sys.rst:1384
msgid "It can also be used to restore the actual files to known working file objects in case they have been overwritten with a broken object.  However, the preferred way to do this is to explicitly save the previous stream before replacing it, and restore the saved object."
msgstr ""

#: ../../library/sys.rst:1390
msgid "Under some conditions ``stdin``, ``stdout`` and ``stderr`` as well as the original values ``__stdin__``, ``__stdout__`` and ``__stderr__`` can be ``None``. It is usually the case for Windows GUI apps that aren't connected to a console and Python apps started with :program:`pythonw`."
msgstr ""

#: ../../library/sys.rst:1398
msgid "A :term:`struct sequence` holding information about the thread implementation."
msgstr ""

#: ../../library/sys.rst:1406
msgid ":const:`name`"
msgstr ""

#: ../../library/sys.rst:1406
msgid "Name of the thread implementation:"
msgstr ""

#: ../../library/sys.rst:1408
msgid "``'nt'``: Windows threads"
msgstr ""

#: ../../library/sys.rst:1409
msgid "``'pthread'``: POSIX threads"
msgstr ""

#: ../../library/sys.rst:1410
msgid "``'solaris'``: Solaris threads"
msgstr ""

#: ../../library/sys.rst:1412
msgid ":const:`lock`"
msgstr ""

#: ../../library/sys.rst:1412
msgid "Name of the lock implementation:"
msgstr ""

#: ../../library/sys.rst:1414
msgid "``'semaphore'``: a lock uses a semaphore"
msgstr ""

#: ../../library/sys.rst:1415
msgid "``'mutex+cond'``: a lock uses a mutex and a condition variable"
msgstr ""

#: ../../library/sys.rst:1417
msgid "``None`` if this information is unknown"
msgstr ""

#: ../../library/sys.rst:1419
msgid ":const:`version`"
msgstr ""

#: ../../library/sys.rst:1419
msgid "Name and version of the thread library. It is a string, or ``None`` if this information is unknown."
msgstr ""

#: ../../library/sys.rst:1428
msgid "When this variable is set to an integer value, it determines the maximum number of levels of traceback information printed when an unhandled exception occurs. The default is ``1000``.  When set to ``0`` or less, all traceback information is suppressed and only the exception type and value are printed."
msgstr ""

#: ../../library/sys.rst:1436
msgid "A string containing the version number of the Python interpreter plus additional information on the build number and compiler used.  This string is displayed when the interactive interpreter is started.  Do not extract version information out of it, rather, use :data:`version_info` and the functions provided by the :mod:`platform` module."
msgstr ""

#: ../../library/sys.rst:1445
msgid "The C API version for this interpreter.  Programmers may find this useful when debugging version conflicts between Python and extension modules."
msgstr ""

#: ../../library/sys.rst:1451
msgid "A tuple containing the five components of the version number: *major*, *minor*, *micro*, *releaselevel*, and *serial*.  All values except *releaselevel* are integers; the release level is ``'alpha'``, ``'beta'``, ``'candidate'``, or ``'final'``.  The ``version_info`` value corresponding to the Python version 2.0 is ``(2, 0, 0, 'final', 0)``.  The components can also be accessed by name, so ``sys.version_info[0]`` is equivalent to ``sys.version_info.major`` and so on."
msgstr ""

#: ../../library/sys.rst:1459
msgid "Added named component attributes."
msgstr ""

#: ../../library/sys.rst:1464
msgid "This is an implementation detail of the warnings framework; do not modify this value.  Refer to the :mod:`warnings` module for more information on the warnings framework."
msgstr ""

#: ../../library/sys.rst:1471
msgid "The version number used to form registry keys on Windows platforms. This is stored as string resource 1000 in the Python DLL.  The value is normally the first three characters of :const:`version`.  It is provided in the :mod:`sys` module for informational purposes; modifying this value has no effect on the registry keys used by Python."
msgstr ""

#: ../../library/sys.rst:1482
msgid "A dictionary of the various implementation-specific flags passed through the :option:`-X` command-line option.  Option names are either mapped to their values, if given explicitly, or to :const:`True`.  Example:"
msgstr ""

#: ../../library/sys.rst:1498
msgid "This is a CPython-specific way of accessing options passed through :option:`-X`.  Other implementations may export them through other means, or not at all."
msgstr ""

#: ../../library/sys.rst:1506
msgid "Citations"
msgstr ""

#: ../../library/sys.rst:1507
msgid "ISO/IEC 9899:1999.  \"Programming languages -- C.\"  A public draft of this standard is available at http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\\ ."
msgstr ""


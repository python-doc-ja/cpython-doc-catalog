# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-16 18:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:2
msgid ":mod:`Queue` --- A synchronized queue class"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:8
msgid "The :mod:`Queue` module has been renamed to :mod:`queue` in Python 3.  The :term:`2to3` tool will automatically adapt imports when converting your sources to Python 3."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:12
msgid "**Source code:** :source:`Lib/Queue.py`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:16
msgid "The :mod:`Queue` module implements multi-producer, multi-consumer queues. It is especially useful in threaded programming when information must be exchanged safely between multiple threads.  The :class:`~Queue.Queue` class in this module implements all the required locking semantics.  It depends on the availability of thread support in Python; see the :mod:`threading` module."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:23
msgid "The module implements three types of queue, which differ only in the order in which the entries are retrieved.  In a FIFO queue, the first tasks added are the first retrieved. In a LIFO queue, the most recently added entry is the first retrieved (operating like a stack).  With a priority queue, the entries are kept sorted (using the :mod:`heapq` module) and the lowest valued entry is retrieved first."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:30
msgid "The :mod:`Queue` module defines the following classes and exceptions:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:34
msgid "Constructor for a FIFO queue.  *maxsize* is an integer that sets the upperbound limit on the number of items that can be placed in the queue.  Insertion will block once this size has been reached, until queue items are consumed.  If *maxsize* is less than or equal to zero, the queue size is infinite."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:41
msgid "Constructor for a LIFO queue.  *maxsize* is an integer that sets the upperbound limit on the number of items that can be placed in the queue.  Insertion will block once this size has been reached, until queue items are consumed.  If *maxsize* is less than or equal to zero, the queue size is infinite."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:50
msgid "Constructor for a priority queue.  *maxsize* is an integer that sets the upperbound limit on the number of items that can be placed in the queue.  Insertion will block once this size has been reached, until queue items are consumed.  If *maxsize* is less than or equal to zero, the queue size is infinite."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:55
msgid "The lowest valued entries are retrieved first (the lowest valued entry is the one returned by ``sorted(list(entries))[0]``).  A typical pattern for entries is a tuple in the form: ``(priority_number, data)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:63
msgid "Exception raised when non-blocking :meth:`~Queue.get` (or :meth:`~Queue.get_nowait`) is called on a :class:`~Queue.Queue` object which is empty."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:70
msgid "Exception raised when non-blocking :meth:`~Queue.put` (or :meth:`~Queue.put_nowait`) is called on a :class:`~Queue.Queue` object which is full."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:76
msgid ":class:`collections.deque` is an alternative implementation of unbounded queues with fast atomic :func:`append` and :func:`popleft` operations that do not require locking."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:84
msgid "Queue Objects"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:86
msgid "Queue objects (:class:`~Queue.Queue`, :class:`LifoQueue`, or :class:`PriorityQueue`) provide the public methods described below."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:92
msgid "Return the approximate size of the queue.  Note, qsize() > 0 doesn't guarantee that a subsequent get() will not block, nor will qsize() < maxsize guarantee that put() will not block."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:99
msgid "Return ``True`` if the queue is empty, ``False`` otherwise.  If empty() returns ``True`` it doesn't guarantee that a subsequent call to put() will not block.  Similarly, if empty() returns ``False`` it doesn't guarantee that a subsequent call to get() will not block."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:107
msgid "Return ``True`` if the queue is full, ``False`` otherwise.  If full() returns ``True`` it doesn't guarantee that a subsequent call to get() will not block.  Similarly, if full() returns ``False`` it doesn't guarantee that a subsequent call to put() will not block."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:115
msgid "Put *item* into the queue. If optional args *block* is true and *timeout* is ``None`` (the default), block if necessary until a free slot is available. If *timeout* is a positive number, it blocks at most *timeout* seconds and raises the :exc:`Full` exception if no free slot was available within that time. Otherwise (*block* is false), put an item on the queue if a free slot is immediately available, else raise the :exc:`Full` exception (*timeout* is ignored in that case)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:123
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:141
msgid "The *timeout* parameter."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:129
msgid "Equivalent to ``put(item, False)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:134
msgid "Remove and return an item from the queue. If optional args *block* is true and *timeout* is ``None`` (the default), block if necessary until an item is available. If *timeout* is a positive number, it blocks at most *timeout* seconds and raises the :exc:`Empty` exception if no item was available within that time. Otherwise (*block* is false), return an item if one is immediately available, else raise the :exc:`Empty` exception (*timeout* is ignored in that case)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:147
msgid "Equivalent to ``get(False)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:149
msgid "Two methods are offered to support tracking whether enqueued tasks have been fully processed by daemon consumer threads."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:155
msgid "Indicate that a formerly enqueued task is complete.  Used by queue consumer threads.  For each :meth:`get` used to fetch a task, a subsequent call to :meth:`task_done` tells the queue that the processing on the task is complete."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:159
msgid "If a :meth:`join` is currently blocking, it will resume when all items have been processed (meaning that a :meth:`task_done` call was received for every item that had been :meth:`put` into the queue)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:163
msgid "Raises a :exc:`ValueError` if called more times than there were items placed in the queue."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:171
msgid "Blocks until all items in the queue have been gotten and processed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:173
msgid "The count of unfinished tasks goes up whenever an item is added to the queue. The count goes down whenever a consumer thread calls :meth:`task_done` to indicate that the item was retrieved and all work on it is complete. When the count of unfinished tasks drops to zero, :meth:`join` unblocks."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/queue.rst:180
msgid "Example of how to wait for enqueued tasks to be completed::"
msgstr ""

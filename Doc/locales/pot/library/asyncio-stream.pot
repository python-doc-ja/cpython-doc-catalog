# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-01 14:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/asyncio-stream.rst:7
msgid "Streams"
msgstr ""

#: ../../library/asyncio-stream.rst:9
msgid "Streams are high-level async/await-ready primitives to work with network connections.  Streams allow sending and receiving data without using callbacks or low-level protocols and transports."
msgstr ""

#: ../../library/asyncio-stream.rst:15
msgid "Here is an example of a TCP echo client written using asyncio streams::"
msgstr ""

#: ../../library/asyncio-stream.rst:31
msgid "See also the `Examples`_ section below."
msgstr ""

#: ../../library/asyncio-stream.rst:35
msgid "Stream Functions"
msgstr ""

#: ../../library/asyncio-stream.rst:36
msgid "The following top-level asyncio functions can be used to create and work with streams:"
msgstr ""

#: ../../library/asyncio-stream.rst:46
msgid "Connect to TCP socket on *host* : *port* address and return a :class:`Stream` object of mode :attr:`StreamMode.READWRITE`."
msgstr ""

#: ../../library/asyncio-stream.rst:50
#: ../../library/asyncio-stream.rst:164
msgid "*limit* determines the buffer size limit used by the returned :class:`Stream` instance. By default the *limit* is set to 64 KiB."
msgstr ""

#: ../../library/asyncio-stream.rst:53
#: ../../library/asyncio-stream.rst:84
msgid "The rest of the arguments are passed directly to :meth:`loop.create_connection`."
msgstr ""

#: ../../library/asyncio-stream.rst:55
#: ../../library/asyncio-stream.rst:169
msgid "The function can be used with ``await`` to get a connected stream::"
msgstr ""

#: ../../library/asyncio-stream.rst:59
#: ../../library/asyncio-stream.rst:173
msgid "The function can also be used as an async context manager::"
msgstr ""

#: ../../library/asyncio-stream.rst:71
msgid "Establish a network connection and return a pair of ``(reader, writer)`` objects."
msgstr ""

#: ../../library/asyncio-stream.rst:74
msgid "The returned *reader* and *writer* objects are instances of :class:`StreamReader` and :class:`StreamWriter` classes."
msgstr ""

#: ../../library/asyncio-stream.rst:77
msgid "The *loop* argument is optional and can always be determined automatically when this function is awaited from a coroutine."
msgstr ""

#: ../../library/asyncio-stream.rst:80
#: ../../library/asyncio-stream.rst:117
msgid "*limit* determines the buffer size limit used by the returned :class:`StreamReader` instance.  By default the *limit* is set to 64 KiB."
msgstr ""

#: ../../library/asyncio-stream.rst:89
#: ../../library/asyncio-stream.rst:197
msgid "The *ssl_handshake_timeout* parameter."
msgstr ""

#: ../../library/asyncio-stream.rst:93
msgid "`open_connection()` is deprecated in favor of :func:`connect`."
msgstr ""

#: ../../library/asyncio-stream.rst:103
msgid "Start a socket server."
msgstr ""

#: ../../library/asyncio-stream.rst:105
msgid "The *client_connected_cb* callback is called whenever a new client connection is established.  It receives a ``(reader, writer)`` pair as two arguments, instances of the :class:`StreamReader` and :class:`StreamWriter` classes."
msgstr ""

#: ../../library/asyncio-stream.rst:110
#: ../../library/asyncio-stream.rst:249
#: ../../library/asyncio-stream.rst:316
msgid "*client_connected_cb* can be a plain callable or a :ref:`coroutine function <coroutine>`; if it is a coroutine function, it will be automatically scheduled as a :class:`Task`."
msgstr ""

#: ../../library/asyncio-stream.rst:114
msgid "The *loop* argument is optional and can always be determined automatically when this method is awaited from a coroutine."
msgstr ""

#: ../../library/asyncio-stream.rst:121
#: ../../library/asyncio-stream.rst:257
msgid "The rest of the arguments are passed directly to :meth:`loop.create_server`."
msgstr ""

#: ../../library/asyncio-stream.rst:126
#: ../../library/asyncio-stream.rst:223
msgid "The *ssl_handshake_timeout* and *start_serving* parameters."
msgstr ""

#: ../../library/asyncio-stream.rst:130
msgid "`start_server()` is deprecated if favor of :class:`StreamServer`"
msgstr ""

#: ../../library/asyncio-stream.rst:134
msgid "Takes a :term:`file-like object <file object>` *pipe* to return a :class:`Stream` object of the mode :attr:`StreamMode.READ` that has similar API of :class:`StreamReader`. It can also be used as an async context manager."
msgstr ""

#: ../../library/asyncio-stream.rst:138
#: ../../library/asyncio-stream.rst:149
msgid "*limit* determines the buffer size limit used by the returned :class:`Stream` instance. By default the limit is set to 64 KiB."
msgstr ""

#: ../../library/asyncio-stream.rst:145
msgid "Takes a :term:`file-like object <file object>` *pipe* to return a :class:`Stream` object of the mode :attr:`StreamMode.WRITE` that has similar API of :class:`StreamWriter`. It can also be used as an async context manager."
msgstr ""

#: ../../library/asyncio-stream.rst:155
msgid "Unix Sockets"
msgstr ""

#: ../../library/asyncio-stream.rst:160
msgid "Establish a Unix socket connection to socket with *path* address and return an awaitable :class:`Stream` object of the mode :attr:`StreamMode.READWRITE` that can be used as a reader and a writer."
msgstr ""

#: ../../library/asyncio-stream.rst:167
msgid "The rest of the arguments are passed directly to :meth:`loop.create_unix_connection`."
msgstr ""

#: ../../library/asyncio-stream.rst:179
#: ../../library/asyncio-stream.rst:194
#: ../../library/asyncio-stream.rst:220
#: ../../library/asyncio-stream.rst:360
msgid ":ref:`Availability <availability>`: Unix."
msgstr ""

#: ../../library/asyncio-stream.rst:186
msgid "Establish a Unix socket connection and return a pair of ``(reader, writer)``."
msgstr ""

#: ../../library/asyncio-stream.rst:189
msgid "Similar to :func:`open_connection` but operates on Unix sockets."
msgstr ""

#: ../../library/asyncio-stream.rst:191
msgid "See also the documentation of :meth:`loop.create_unix_connection`."
msgstr ""

#: ../../library/asyncio-stream.rst:201
msgid "The *path* parameter can now be a :term:`path-like object`"
msgstr ""

#: ../../library/asyncio-stream.rst:205
msgid "``open_unix_connection()`` is deprecated if favor of :func:`connect_unix`."
msgstr ""

#: ../../library/asyncio-stream.rst:213
msgid "Start a Unix socket server."
msgstr ""

#: ../../library/asyncio-stream.rst:215
msgid "Similar to :func:`start_server` but works with Unix sockets."
msgstr ""

#: ../../library/asyncio-stream.rst:217
msgid "See also the documentation of :meth:`loop.create_unix_server`."
msgstr ""

#: ../../library/asyncio-stream.rst:227
msgid "The *path* parameter can now be a :term:`path-like object`."
msgstr ""

#: ../../library/asyncio-stream.rst:231
msgid "``start_unix_server()`` is deprecated in favor of :class:`UnixStreamServer`."
msgstr ""

#: ../../library/asyncio-stream.rst:237
msgid "StreamServer"
msgstr ""

#: ../../library/asyncio-stream.rst:245
#: ../../library/asyncio-stream.rst:312
msgid "The *client_connected_cb* callback is called whenever a new client connection is established.  It receives a :class:`Stream` object of the mode :attr:`StreamMode.READWRITE`."
msgstr ""

#: ../../library/asyncio-stream.rst:253
#: ../../library/asyncio-stream.rst:320
msgid "*limit* determines the buffer size limit used by the returned :class:`Stream` instance.  By default the *limit* is set to 64 KiB."
msgstr ""

#: ../../library/asyncio-stream.rst:262
#: ../../library/asyncio-stream.rst:329
msgid "Binds to the given host and port to start the server."
msgstr ""

#: ../../library/asyncio-stream.rst:266
msgid "Start accepting connections until the coroutine is cancelled. Cancellation of ``serve_forever`` task causes the server to be closed."
msgstr ""

#: ../../library/asyncio-stream.rst:270
msgid "This method can be called if the server is already accepting connections.  Only one ``serve_forever`` task can exist per one *Server* object."
msgstr ""

#: ../../library/asyncio-stream.rst:276
#: ../../library/asyncio-stream.rst:333
msgid "Returns ``True`` if the server is bound and currently serving."
msgstr ""

#: ../../library/asyncio-stream.rst:280
msgid "Bind the server to the given *host* and *port*. This method is automatically called during ``__aenter__`` when :class:`StreamServer` is used as an async context manager."
msgstr ""

#: ../../library/asyncio-stream.rst:286
#: ../../library/asyncio-stream.rst:343
msgid "Return ``True`` if the server is bound."
msgstr ""

#: ../../library/asyncio-stream.rst:290
#: ../../library/asyncio-stream.rst:347
msgid "Closes the connection and cancels all pending tasks."
msgstr ""

#: ../../library/asyncio-stream.rst:294
msgid "Closes the connection. This method is automatically called during ``__aexit__`` when :class:`StreamServer` is used as an async context manager."
msgstr ""

#: ../../library/asyncio-stream.rst:300
#: ../../library/asyncio-stream.rst:357
msgid "Returns a tuple of socket objects the server is bound to."
msgstr ""

#: ../../library/asyncio-stream.rst:306
msgid "UnixStreamServer"
msgstr ""

#: ../../library/asyncio-stream.rst:324
msgid "The rest of the arguments are passed directly to :meth:`loop.create_unix_server`."
msgstr ""

#: ../../library/asyncio-stream.rst:337
msgid "Bind the server to the given *host* and *port*. This method is automatically called during ``__aenter__`` when :class:`UnixStreamServer` is used as an async context manager."
msgstr ""

#: ../../library/asyncio-stream.rst:351
msgid "Closes the connection. This method is automatically called during ``__aexit__`` when :class:`UnixStreamServer` is used as an async context manager."
msgstr ""

#: ../../library/asyncio-stream.rst:364
msgid "Stream"
msgstr ""

#: ../../library/asyncio-stream.rst:368
msgid "Represents a Stream object that provides APIs to read and write data to the IO stream . It includes the API provided by :class:`StreamReader` and :class:`StreamWriter`."
msgstr ""

#: ../../library/asyncio-stream.rst:372
msgid "Do not instantiate *Stream* objects directly; use API like :func:`connect` and :class:`StreamServer` instead."
msgstr ""

#: ../../library/asyncio-stream.rst:379
msgid "StreamMode"
msgstr ""

#: ../../library/asyncio-stream.rst:383
msgid "A subclass of :class:`enum.Flag` that defines a set of values that can be used to determine the ``mode`` of :class:`Stream` objects."
msgstr ""

#: ../../library/asyncio-stream.rst:388
msgid "The stream object is readable and provides the API of :class:`StreamReader`."
msgstr ""

#: ../../library/asyncio-stream.rst:392
msgid "The stream object is writeable and provides the API of :class:`StreamWriter`."
msgstr ""

#: ../../library/asyncio-stream.rst:396
msgid "The stream object is readable and writeable and provides the API of both :class:`StreamReader` and :class:`StreamWriter`."
msgstr ""

#: ../../library/asyncio-stream.rst:403
msgid "StreamReader"
msgstr ""

#: ../../library/asyncio-stream.rst:407
msgid "Represents a reader object that provides APIs to read data from the IO stream."
msgstr ""

#: ../../library/asyncio-stream.rst:410
msgid "It is not recommended to instantiate *StreamReader* objects directly; use :func:`open_connection` and :func:`start_server` instead."
msgstr ""

#: ../../library/asyncio-stream.rst:416
msgid "Read up to *n* bytes.  If *n* is not provided, or set to ``-1``, read until EOF and return all read bytes."
msgstr ""

#: ../../library/asyncio-stream.rst:419
msgid "If EOF was received and the internal buffer is empty, return an empty ``bytes`` object."
msgstr ""

#: ../../library/asyncio-stream.rst:424
msgid "Read one line, where \"line\" is a sequence of bytes ending with ``\\n``."
msgstr ""

#: ../../library/asyncio-stream.rst:427
msgid "If EOF is received and ``\\n`` was not found, the method returns partially read data."
msgstr ""

#: ../../library/asyncio-stream.rst:430
msgid "If EOF is received and the internal buffer is empty, return an empty ``bytes`` object."
msgstr ""

#: ../../library/asyncio-stream.rst:435
msgid "Read exactly *n* bytes."
msgstr ""

#: ../../library/asyncio-stream.rst:437
msgid "Raise an :exc:`IncompleteReadError` if EOF is reached before *n* can be read.  Use the :attr:`IncompleteReadError.partial` attribute to get the partially read data."
msgstr ""

#: ../../library/asyncio-stream.rst:443
msgid "Read data from the stream until *separator* is found."
msgstr ""

#: ../../library/asyncio-stream.rst:445
msgid "On success, the data and separator will be removed from the internal buffer (consumed). Returned data will include the separator at the end."
msgstr ""

#: ../../library/asyncio-stream.rst:449
msgid "If the amount of data read exceeds the configured stream limit, a :exc:`LimitOverrunError` exception is raised, and the data is left in the internal buffer and can be read again."
msgstr ""

#: ../../library/asyncio-stream.rst:453
msgid "If EOF is reached before the complete separator is found, an :exc:`IncompleteReadError` exception is raised, and the internal buffer is reset.  The :attr:`IncompleteReadError.partial` attribute may contain a portion of the separator."
msgstr ""

#: ../../library/asyncio-stream.rst:462
msgid "Return ``True`` if the buffer is empty and :meth:`feed_eof` was called."
msgstr ""

#: ../../library/asyncio-stream.rst:467
msgid "StreamWriter"
msgstr ""

#: ../../library/asyncio-stream.rst:471
msgid "Represents a writer object that provides APIs to write data to the IO stream."
msgstr ""

#: ../../library/asyncio-stream.rst:474
msgid "It is not recommended to instantiate *StreamWriter* objects directly; use :func:`open_connection` and :func:`start_server` instead."
msgstr ""

#: ../../library/asyncio-stream.rst:480
msgid "The method attempts to write the *data* to the underlying socket immediately. If that fails, the data is queued in an internal write buffer until it can be sent."
msgstr ""

#: ../../library/asyncio-stream.rst:484
#: ../../library/asyncio-stream.rst:507
msgid "Starting with Python 3.8, it is possible to directly await on the `write()` method::"
msgstr ""

#: ../../library/asyncio-stream.rst:489
#: ../../library/asyncio-stream.rst:512
msgid "The ``await`` pauses the current coroutine until the data is written to the socket."
msgstr ""

#: ../../library/asyncio-stream.rst:492
#: ../../library/asyncio-stream.rst:515
#: ../../library/asyncio-stream.rst:535
msgid "Below is an equivalent code that works with Python <= 3.7::"
msgstr ""

#: ../../library/asyncio-stream.rst:497
msgid "Support ``await stream.write(...)`` syntax."
msgstr ""

#: ../../library/asyncio-stream.rst:502
msgid "The method writes a list (or any iterable) of bytes to the underlying socket immediately. If that fails, the data is queued in an internal write buffer until it can be sent."
msgstr ""

#: ../../library/asyncio-stream.rst:520
msgid "Support ``await stream.writelines()`` syntax."
msgstr ""

#: ../../library/asyncio-stream.rst:525
msgid "The method closes the stream and the underlying socket."
msgstr ""

#: ../../library/asyncio-stream.rst:527
msgid "Starting with Python 3.8, it is possible to directly await on the `close()` method::"
msgstr ""

#: ../../library/asyncio-stream.rst:532
msgid "The ``await`` pauses the current coroutine until the stream and the underlying socket are closed (and SSL shutdown is performed for a secure connection)."
msgstr ""

#: ../../library/asyncio-stream.rst:540
msgid "Support ``await stream.close()`` syntax."
msgstr ""

#: ../../library/asyncio-stream.rst:545
msgid "Return *True* if the underlying transport supports the :meth:`write_eof` method, *False* otherwise."
msgstr ""

#: ../../library/asyncio-stream.rst:550
msgid "Close the write end of the stream after the buffered write data is flushed."
msgstr ""

#: ../../library/asyncio-stream.rst:555
msgid "Return the underlying asyncio transport."
msgstr ""

#: ../../library/asyncio-stream.rst:559
msgid "Access optional transport information; see :meth:`BaseTransport.get_extra_info` for details."
msgstr ""

#: ../../library/asyncio-stream.rst:564
msgid "Wait until it is appropriate to resume writing to the stream. Example::"
msgstr ""

#: ../../library/asyncio-stream.rst:570
msgid "This is a flow control method that interacts with the underlying IO write buffer.  When the size of the buffer reaches the high watermark, *drain()* blocks until the size of the buffer is drained down to the low watermark and writing can be resumed.  When there is nothing to wait for, the :meth:`drain` returns immediately."
msgstr ""

#: ../../library/asyncio-stream.rst:579
msgid "Return ``True`` if the stream is closed or in the process of being closed."
msgstr ""

#: ../../library/asyncio-stream.rst:586
msgid "Wait until the stream is closed."
msgstr ""

#: ../../library/asyncio-stream.rst:588
msgid "Should be called after :meth:`close` to wait until the underlying connection is closed."
msgstr ""

#: ../../library/asyncio-stream.rst:595
msgid "Examples"
msgstr ""

#: ../../library/asyncio-stream.rst:600
msgid "TCP echo client using streams"
msgstr ""

#: ../../library/asyncio-stream.rst:602
msgid "TCP echo client using the :func:`asyncio.connect` function::"
msgstr ""

#: ../../library/asyncio-stream.rst:619
msgid "The :ref:`TCP echo client protocol <asyncio_example_tcp_echo_client_protocol>` example uses the low-level :meth:`loop.create_connection` method."
msgstr ""

#: ../../library/asyncio-stream.rst:626
msgid "TCP echo server using streams"
msgstr ""

#: ../../library/asyncio-stream.rst:628
msgid "TCP echo server using the :class:`asyncio.StreamServer` class::"
msgstr ""

#: ../../library/asyncio-stream.rst:657
msgid "The :ref:`TCP echo server protocol <asyncio_example_tcp_echo_server_protocol>` example uses the :meth:`loop.create_server` method."
msgstr ""

#: ../../library/asyncio-stream.rst:662
msgid "Get HTTP headers"
msgstr ""

#: ../../library/asyncio-stream.rst:664
msgid "Simple example querying HTTP headers of the URL passed on the command line::"
msgstr ""

#: ../../library/asyncio-stream.rst:696
msgid "Usage::"
msgstr ""

#: ../../library/asyncio-stream.rst:700
msgid "or with HTTPS::"
msgstr ""

#: ../../library/asyncio-stream.rst:708
msgid "Register an open socket to wait for data using streams"
msgstr ""

#: ../../library/asyncio-stream.rst:710
msgid "Coroutine waiting until a socket receives data using the :func:`asyncio.connect` function::"
msgstr ""

#: ../../library/asyncio-stream.rst:742
msgid "The :ref:`register an open socket to wait for data using a protocol <asyncio_example_create_connection>` example uses a low-level protocol and the :meth:`loop.create_connection` method."
msgstr ""

#: ../../library/asyncio-stream.rst:746
msgid "The :ref:`watch a file descriptor for read events <asyncio_example_watch_fd>` example uses the low-level :meth:`loop.add_reader` method to watch a file descriptor."
msgstr ""


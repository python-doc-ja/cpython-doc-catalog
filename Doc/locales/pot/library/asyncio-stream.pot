# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-13 11:25+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/asyncio-stream.rst:7
msgid "Streams"
msgstr ""

#: ../../library/asyncio-stream.rst:9
msgid "Streams are high-level async/await-ready primitives to work with network connections.  Streams allow sending and receiving data without using callbacks or low-level protocols and transports."
msgstr ""

#: ../../library/asyncio-stream.rst:15
msgid "Here is an example of a TCP echo client written using asyncio streams::"
msgstr ""

#: ../../library/asyncio-stream.rst:31
msgid "See also the `Examples`_ section below."
msgstr ""

#: ../../library/asyncio-stream.rst:35
msgid "Stream Functions"
msgstr ""

#: ../../library/asyncio-stream.rst:36
msgid "The following top-level asyncio functions can be used to create and work with streams:"
msgstr ""

#: ../../library/asyncio-stream.rst:46
msgid "Connect to TCP socket on *host* : *port* address and return a :class:`Stream` object of mode :attr:`StreamMode.READWRITE`."
msgstr ""

#: ../../library/asyncio-stream.rst:49
#: ../../library/asyncio-stream.rst:163
msgid "*limit* determines the buffer size limit used by the returned :class:`Stream` instance. By default the *limit* is set to 64 KiB."
msgstr ""

#: ../../library/asyncio-stream.rst:52
#: ../../library/asyncio-stream.rst:83
msgid "The rest of the arguments are passed directly to :meth:`loop.create_connection`."
msgstr ""

#: ../../library/asyncio-stream.rst:54
#: ../../library/asyncio-stream.rst:168
msgid "The function can be used with ``await`` to get a connected stream::"
msgstr ""

#: ../../library/asyncio-stream.rst:58
#: ../../library/asyncio-stream.rst:172
msgid "The function can also be used as an async context manager::"
msgstr ""

#: ../../library/asyncio-stream.rst:70
msgid "Establish a network connection and return a pair of ``(reader, writer)`` objects."
msgstr ""

#: ../../library/asyncio-stream.rst:73
msgid "The returned *reader* and *writer* objects are instances of :class:`StreamReader` and :class:`StreamWriter` classes."
msgstr ""

#: ../../library/asyncio-stream.rst:76
msgid "The *loop* argument is optional and can always be determined automatically when this function is awaited from a coroutine."
msgstr ""

#: ../../library/asyncio-stream.rst:79
#: ../../library/asyncio-stream.rst:116
msgid "*limit* determines the buffer size limit used by the returned :class:`StreamReader` instance.  By default the *limit* is set to 64 KiB."
msgstr ""

#: ../../library/asyncio-stream.rst:88
#: ../../library/asyncio-stream.rst:196
msgid "The *ssl_handshake_timeout* parameter."
msgstr ""

#: ../../library/asyncio-stream.rst:92
msgid "`open_connection()` is deprecated in favor of :func:`connect`."
msgstr ""

#: ../../library/asyncio-stream.rst:102
msgid "Start a socket server."
msgstr ""

#: ../../library/asyncio-stream.rst:104
msgid "The *client_connected_cb* callback is called whenever a new client connection is established.  It receives a ``(reader, writer)`` pair as two arguments, instances of the :class:`StreamReader` and :class:`StreamWriter` classes."
msgstr ""

#: ../../library/asyncio-stream.rst:109
#: ../../library/asyncio-stream.rst:248
#: ../../library/asyncio-stream.rst:315
msgid "*client_connected_cb* can be a plain callable or a :ref:`coroutine function <coroutine>`; if it is a coroutine function, it will be automatically scheduled as a :class:`Task`."
msgstr ""

#: ../../library/asyncio-stream.rst:113
msgid "The *loop* argument is optional and can always be determined automatically when this method is awaited from a coroutine."
msgstr ""

#: ../../library/asyncio-stream.rst:120
#: ../../library/asyncio-stream.rst:256
msgid "The rest of the arguments are passed directly to :meth:`loop.create_server`."
msgstr ""

#: ../../library/asyncio-stream.rst:125
#: ../../library/asyncio-stream.rst:222
msgid "The *ssl_handshake_timeout* and *start_serving* parameters."
msgstr ""

#: ../../library/asyncio-stream.rst:129
msgid "`start_server()` is deprecated if favor of :class:`StreamServer`"
msgstr ""

#: ../../library/asyncio-stream.rst:133
msgid "Takes a :term:`file-like object <file object>` *pipe* to return a :class:`Stream` object of the mode :attr:`StreamMode.READ` that has similar API of :class:`StreamReader`. It can also be used as an async context manager."
msgstr ""

#: ../../library/asyncio-stream.rst:137
#: ../../library/asyncio-stream.rst:148
msgid "*limit* determines the buffer size limit used by the returned :class:`Stream` instance. By default the limit is set to 64 KiB."
msgstr ""

#: ../../library/asyncio-stream.rst:144
msgid "Takes a :term:`file-like object <file object>` *pipe* to return a :class:`Stream` object of the mode :attr:`StreamMode.WRITE` that has similar API of :class:`StreamWriter`. It can also be used as an async context manager."
msgstr ""

#: ../../library/asyncio-stream.rst:154
msgid "Unix Sockets"
msgstr ""

#: ../../library/asyncio-stream.rst:159
msgid "Establish a Unix socket connection to socket with *path* address and return an awaitable :class:`Stream` object of the mode :attr:`StreamMode.READWRITE` that can be used as a reader and a writer."
msgstr ""

#: ../../library/asyncio-stream.rst:166
msgid "The rest of the arguments are passed directly to :meth:`loop.create_unix_connection`."
msgstr ""

#: ../../library/asyncio-stream.rst:178
#: ../../library/asyncio-stream.rst:193
#: ../../library/asyncio-stream.rst:219
#: ../../library/asyncio-stream.rst:359
msgid ":ref:`Availability <availability>`: Unix."
msgstr ""

#: ../../library/asyncio-stream.rst:185
msgid "Establish a Unix socket connection and return a pair of ``(reader, writer)``."
msgstr ""

#: ../../library/asyncio-stream.rst:188
msgid "Similar to :func:`open_connection` but operates on Unix sockets."
msgstr ""

#: ../../library/asyncio-stream.rst:190
msgid "See also the documentation of :meth:`loop.create_unix_connection`."
msgstr ""

#: ../../library/asyncio-stream.rst:200
msgid "The *path* parameter can now be a :term:`path-like object`"
msgstr ""

#: ../../library/asyncio-stream.rst:204
msgid "``open_unix_connection()`` is deprecated if favor of :func:`connect_unix`."
msgstr ""

#: ../../library/asyncio-stream.rst:212
msgid "Start a Unix socket server."
msgstr ""

#: ../../library/asyncio-stream.rst:214
msgid "Similar to :func:`start_server` but works with Unix sockets."
msgstr ""

#: ../../library/asyncio-stream.rst:216
msgid "See also the documentation of :meth:`loop.create_unix_server`."
msgstr ""

#: ../../library/asyncio-stream.rst:226
msgid "The *path* parameter can now be a :term:`path-like object`."
msgstr ""

#: ../../library/asyncio-stream.rst:230
msgid "``start_unix_server()`` is deprecated in favor of :class:`UnixStreamServer`."
msgstr ""

#: ../../library/asyncio-stream.rst:236
msgid "StreamServer"
msgstr ""

#: ../../library/asyncio-stream.rst:244
#: ../../library/asyncio-stream.rst:311
msgid "The *client_connected_cb* callback is called whenever a new client connection is established.  It receives a :class:`Stream` object of the mode :attr:`StreamMode.READWRITE`."
msgstr ""

#: ../../library/asyncio-stream.rst:252
#: ../../library/asyncio-stream.rst:319
msgid "*limit* determines the buffer size limit used by the returned :class:`Stream` instance.  By default the *limit* is set to 64 KiB."
msgstr ""

#: ../../library/asyncio-stream.rst:261
#: ../../library/asyncio-stream.rst:328
msgid "Binds to the given host and port to start the server."
msgstr ""

#: ../../library/asyncio-stream.rst:265
msgid "Start accepting connections until the coroutine is cancelled. Cancellation of ``serve_forever`` task causes the server to be closed."
msgstr ""

#: ../../library/asyncio-stream.rst:269
msgid "This method can be called if the server is already accepting connections.  Only one ``serve_forever`` task can exist per one *Server* object."
msgstr ""

#: ../../library/asyncio-stream.rst:275
#: ../../library/asyncio-stream.rst:332
msgid "Returns ``True`` if the server is bound and currently serving."
msgstr ""

#: ../../library/asyncio-stream.rst:279
msgid "Bind the server to the given *host* and *port*. This method is automatically called during ``__aenter__`` when :class:`StreamServer` is used as an async context manager."
msgstr ""

#: ../../library/asyncio-stream.rst:285
#: ../../library/asyncio-stream.rst:342
msgid "Return ``True`` if the server is bound."
msgstr ""

#: ../../library/asyncio-stream.rst:289
#: ../../library/asyncio-stream.rst:346
msgid "Closes the connection and cancels all pending tasks."
msgstr ""

#: ../../library/asyncio-stream.rst:293
msgid "Closes the connection. This method is automatically called during ``__aexit__`` when :class:`StreamServer` is used as an async context manager."
msgstr ""

#: ../../library/asyncio-stream.rst:299
#: ../../library/asyncio-stream.rst:356
msgid "Returns a tuple of socket objects the server is bound to."
msgstr ""

#: ../../library/asyncio-stream.rst:305
msgid "UnixStreamServer"
msgstr ""

#: ../../library/asyncio-stream.rst:323
msgid "The rest of the arguments are passed directly to :meth:`loop.create_unix_server`."
msgstr ""

#: ../../library/asyncio-stream.rst:336
msgid "Bind the server to the given *host* and *port*. This method is automatically called during ``__aenter__`` when :class:`UnixStreamServer` is used as an async context manager."
msgstr ""

#: ../../library/asyncio-stream.rst:350
msgid "Closes the connection. This method is automatically called during ``__aexit__`` when :class:`UnixStreamServer` is used as an async context manager."
msgstr ""

#: ../../library/asyncio-stream.rst:363
msgid "Stream"
msgstr ""

#: ../../library/asyncio-stream.rst:367
msgid "Represents a Stream object that provides APIs to read and write data to the IO stream . It includes the API provided by :class:`StreamReader` and :class:`StreamWriter`. It can also be used as :term:`asynchronous iterator` where :meth:`readline` is used. It raises :exc:`StopAsyncIteration` when :meth:`readline` returns empty data."
msgstr ""

#: ../../library/asyncio-stream.rst:373
msgid "Do not instantiate *Stream* objects directly; use API like :func:`connect` and :class:`StreamServer` instead."
msgstr ""

#: ../../library/asyncio-stream.rst:380
msgid "Returns the mode of the stream which is a :class:`StreamMode` value. It could be one of the below:"
msgstr ""

#: ../../library/asyncio-stream.rst:383
msgid ":attr:`StreamMode.READ` - Connection can receive data."
msgstr ""

#: ../../library/asyncio-stream.rst:384
msgid ":attr:`StreamMode.WRITE` - Connection can send data."
msgstr ""

#: ../../library/asyncio-stream.rst:385
msgid ":attr:`StreamMode.READWRITE` - Connection can send and receive data."
msgstr ""

#: ../../library/asyncio-stream.rst:389
msgid "Aborts the connection immediately, without waiting for the send buffer to drain."
msgstr ""

#: ../../library/asyncio-stream.rst:393
#: ../../library/asyncio-stream.rst:632
msgid "Return ``True`` if the buffer is empty."
msgstr ""

#: ../../library/asyncio-stream.rst:397
#: ../../library/asyncio-stream.rst:714
msgid "Return *True* if the underlying transport supports the :meth:`write_eof` method, *False* otherwise."
msgstr ""

#: ../../library/asyncio-stream.rst:402
#: ../../library/asyncio-stream.rst:694
msgid "The method closes the stream and the underlying socket."
msgstr ""

#: ../../library/asyncio-stream.rst:404
msgid "It is possible to directly await on the `close()` method::"
msgstr ""

#: ../../library/asyncio-stream.rst:408
#: ../../library/asyncio-stream.rst:701
msgid "The ``await`` pauses the current coroutine until the stream and the underlying socket are closed (and SSL shutdown is performed for a secure connection)."
msgstr ""

#: ../../library/asyncio-stream.rst:413
#: ../../library/asyncio-stream.rst:733
msgid "Wait until it is appropriate to resume writing to the stream. Example::"
msgstr ""

#: ../../library/asyncio-stream.rst:419
#: ../../library/asyncio-stream.rst:739
msgid "This is a flow control method that interacts with the underlying IO write buffer.  When the size of the buffer reaches the high watermark, *drain()* blocks until the size of the buffer is drained down to the low watermark and writing can be resumed.  When there is nothing to wait for, the :meth:`drain` returns immediately."
msgstr ""

#: ../../library/asyncio-stream.rst:428
#: ../../library/asyncio-stream.rst:524
msgid "It is recommended to directly await on the `write()` method instead::"
msgstr ""

#: ../../library/asyncio-stream.rst:434
#: ../../library/asyncio-stream.rst:728
msgid "Access optional transport information; see :meth:`BaseTransport.get_extra_info` for details."
msgstr ""

#: ../../library/asyncio-stream.rst:439
#: ../../library/asyncio-stream.rst:748
msgid "Return ``True`` if the stream is closed or in the process of being closed."
msgstr ""

#: ../../library/asyncio-stream.rst:444
#: ../../library/asyncio-stream.rst:586
msgid "Read up to *n* bytes.  If *n* is not provided, or set to ``-1``, read until EOF and return all read bytes."
msgstr ""

#: ../../library/asyncio-stream.rst:447
#: ../../library/asyncio-stream.rst:589
msgid "If EOF was received and the internal buffer is empty, return an empty ``bytes`` object."
msgstr ""

#: ../../library/asyncio-stream.rst:452
#: ../../library/asyncio-stream.rst:605
msgid "Read exactly *n* bytes."
msgstr ""

#: ../../library/asyncio-stream.rst:454
#: ../../library/asyncio-stream.rst:607
msgid "Raise an :exc:`IncompleteReadError` if EOF is reached before *n* can be read.  Use the :attr:`IncompleteReadError.partial` attribute to get the partially read data."
msgstr ""

#: ../../library/asyncio-stream.rst:460
#: ../../library/asyncio-stream.rst:594
msgid "Read one line, where \"line\" is a sequence of bytes ending with ``\\n``."
msgstr ""

#: ../../library/asyncio-stream.rst:463
#: ../../library/asyncio-stream.rst:597
msgid "If EOF is received and ``\\n`` was not found, the method returns partially read data."
msgstr ""

#: ../../library/asyncio-stream.rst:466
#: ../../library/asyncio-stream.rst:600
msgid "If EOF is received and the internal buffer is empty, return an empty ``bytes`` object."
msgstr ""

#: ../../library/asyncio-stream.rst:471
#: ../../library/asyncio-stream.rst:613
msgid "Read data from the stream until *separator* is found."
msgstr ""

#: ../../library/asyncio-stream.rst:473
#: ../../library/asyncio-stream.rst:615
msgid "On success, the data and separator will be removed from the internal buffer (consumed). Returned data will include the separator at the end."
msgstr ""

#: ../../library/asyncio-stream.rst:477
#: ../../library/asyncio-stream.rst:619
msgid "If the amount of data read exceeds the configured stream limit, a :exc:`LimitOverrunError` exception is raised, and the data is left in the internal buffer and can be read again."
msgstr ""

#: ../../library/asyncio-stream.rst:481
#: ../../library/asyncio-stream.rst:623
msgid "If EOF is reached before the complete separator is found, an :exc:`IncompleteReadError` exception is raised, and the internal buffer is reset.  The :attr:`IncompleteReadError.partial` attribute may contain a portion of the separator."
msgstr ""

#: ../../library/asyncio-stream.rst:488
msgid "Sends a *file* over the stream using an optimized syscall if available."
msgstr ""

#: ../../library/asyncio-stream.rst:490
msgid "For other parameters meaning please see :meth:`AbstractEventloop.sendfile`."
msgstr ""

#: ../../library/asyncio-stream.rst:495
msgid "Upgrades the existing transport-based connection to TLS."
msgstr ""

#: ../../library/asyncio-stream.rst:497
msgid "For other parameters meaning please see :meth:`AbstractEventloop.start_tls`."
msgstr ""

#: ../../library/asyncio-stream.rst:501
#: ../../library/asyncio-stream.rst:755
msgid "Wait until the stream is closed."
msgstr ""

#: ../../library/asyncio-stream.rst:503
#: ../../library/asyncio-stream.rst:757
msgid "Should be called after :meth:`close` to wait until the underlying connection is closed."
msgstr ""

#: ../../library/asyncio-stream.rst:508
msgid "Write *data* to the underlying socket; wait until the data is sent, e.g.::"
msgstr ""

#: ../../library/asyncio-stream.rst:514
msgid "The method attempts to write the *data* to the underlying socket immediately. If that fails, the data is queued in an internal write buffer until it can be sent. :meth:`drain` can be used to flush the underlying buffer once writing is available::"
msgstr ""

#: ../../library/asyncio-stream.rst:530
#: ../../library/asyncio-stream.rst:671
msgid "The method writes a list (or any iterable) of bytes to the underlying socket immediately. If that fails, the data is queued in an internal write buffer until it can be sent."
msgstr ""

#: ../../library/asyncio-stream.rst:535
msgid "It is possible to directly await on the `writelines()` method::"
msgstr ""

#: ../../library/asyncio-stream.rst:539
#: ../../library/asyncio-stream.rst:658
#: ../../library/asyncio-stream.rst:681
msgid "The ``await`` pauses the current coroutine until the data is written to the socket."
msgstr ""

#: ../../library/asyncio-stream.rst:544
#: ../../library/asyncio-stream.rst:719
msgid "Close the write end of the stream after the buffered write data is flushed."
msgstr ""

#: ../../library/asyncio-stream.rst:549
msgid "StreamMode"
msgstr ""

#: ../../library/asyncio-stream.rst:553
msgid "A subclass of :class:`enum.Flag` that defines a set of values that can be used to determine the ``mode`` of :class:`Stream` objects."
msgstr ""

#: ../../library/asyncio-stream.rst:558
msgid "The stream object is readable and provides the API of :class:`StreamReader`."
msgstr ""

#: ../../library/asyncio-stream.rst:562
msgid "The stream object is writeable and provides the API of :class:`StreamWriter`."
msgstr ""

#: ../../library/asyncio-stream.rst:566
msgid "The stream object is readable and writeable and provides the API of both :class:`StreamReader` and :class:`StreamWriter`."
msgstr ""

#: ../../library/asyncio-stream.rst:573
msgid "StreamReader"
msgstr ""

#: ../../library/asyncio-stream.rst:577
msgid "Represents a reader object that provides APIs to read data from the IO stream."
msgstr ""

#: ../../library/asyncio-stream.rst:580
msgid "It is not recommended to instantiate *StreamReader* objects directly; use :func:`open_connection` and :func:`start_server` instead."
msgstr ""

#: ../../library/asyncio-stream.rst:636
msgid "StreamWriter"
msgstr ""

#: ../../library/asyncio-stream.rst:640
msgid "Represents a writer object that provides APIs to write data to the IO stream."
msgstr ""

#: ../../library/asyncio-stream.rst:643
msgid "It is not recommended to instantiate *StreamWriter* objects directly; use :func:`open_connection` and :func:`start_server` instead."
msgstr ""

#: ../../library/asyncio-stream.rst:649
msgid "The method attempts to write the *data* to the underlying socket immediately. If that fails, the data is queued in an internal write buffer until it can be sent."
msgstr ""

#: ../../library/asyncio-stream.rst:653
msgid "Starting with Python 3.8, it is possible to directly await on the `write()` method::"
msgstr ""

#: ../../library/asyncio-stream.rst:661
#: ../../library/asyncio-stream.rst:684
#: ../../library/asyncio-stream.rst:704
msgid "Below is an equivalent code that works with Python <= 3.7::"
msgstr ""

#: ../../library/asyncio-stream.rst:666
msgid "Support ``await stream.write(...)`` syntax."
msgstr ""

#: ../../library/asyncio-stream.rst:676
msgid "Starting with Python 3.8, it is possible to directly await on the `writelines()` method::"
msgstr ""

#: ../../library/asyncio-stream.rst:689
msgid "Support ``await stream.writelines()`` syntax."
msgstr ""

#: ../../library/asyncio-stream.rst:696
msgid "Starting with Python 3.8, it is possible to directly await on the `close()` method::"
msgstr ""

#: ../../library/asyncio-stream.rst:709
msgid "Support ``await stream.close()`` syntax."
msgstr ""

#: ../../library/asyncio-stream.rst:724
msgid "Return the underlying asyncio transport."
msgstr ""

#: ../../library/asyncio-stream.rst:764
msgid "Examples"
msgstr ""

#: ../../library/asyncio-stream.rst:769
msgid "TCP echo client using streams"
msgstr ""

#: ../../library/asyncio-stream.rst:771
msgid "TCP echo client using the :func:`asyncio.connect` function::"
msgstr ""

#: ../../library/asyncio-stream.rst:788
msgid "The :ref:`TCP echo client protocol <asyncio_example_tcp_echo_client_protocol>` example uses the low-level :meth:`loop.create_connection` method."
msgstr ""

#: ../../library/asyncio-stream.rst:795
msgid "TCP echo server using streams"
msgstr ""

#: ../../library/asyncio-stream.rst:797
msgid "TCP echo server using the :class:`asyncio.StreamServer` class::"
msgstr ""

#: ../../library/asyncio-stream.rst:826
msgid "The :ref:`TCP echo server protocol <asyncio_example_tcp_echo_server_protocol>` example uses the :meth:`loop.create_server` method."
msgstr ""

#: ../../library/asyncio-stream.rst:831
msgid "Get HTTP headers"
msgstr ""

#: ../../library/asyncio-stream.rst:833
msgid "Simple example querying HTTP headers of the URL passed on the command line::"
msgstr ""

#: ../../library/asyncio-stream.rst:865
msgid "Usage::"
msgstr ""

#: ../../library/asyncio-stream.rst:869
msgid "or with HTTPS::"
msgstr ""

#: ../../library/asyncio-stream.rst:877
msgid "Register an open socket to wait for data using streams"
msgstr ""

#: ../../library/asyncio-stream.rst:879
msgid "Coroutine waiting until a socket receives data using the :func:`asyncio.connect` function::"
msgstr ""

#: ../../library/asyncio-stream.rst:911
msgid "The :ref:`register an open socket to wait for data using a protocol <asyncio_example_create_connection>` example uses a low-level protocol and the :meth:`loop.create_connection` method."
msgstr ""

#: ../../library/asyncio-stream.rst:915
msgid "The :ref:`watch a file descriptor for read events <asyncio_example_watch_fd>` example uses the low-level :meth:`loop.add_reader` method to watch a file descriptor."
msgstr ""


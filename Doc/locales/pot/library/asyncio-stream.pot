# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-09-12 09:20+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/asyncio-stream.rst:7
msgid "Streams (coroutine based API)"
msgstr ""

#: ../../library/asyncio-stream.rst:9
msgid "**Source code:** :source:`Lib/asyncio/streams.py`"
msgstr ""

#: ../../library/asyncio-stream.rst:12
msgid "Stream functions"
msgstr ""

#: ../../library/asyncio-stream.rst:16
msgid "The top-level functions in this module are meant as convenience wrappers only; there's really nothing special there, and if they don't do exactly what you want, feel free to copy their code."
msgstr ""

#: ../../library/asyncio-stream.rst:23
msgid "A wrapper for :meth:`~AbstractEventLoop.create_connection()` returning a (reader, writer) pair."
msgstr ""

#: ../../library/asyncio-stream.rst:26
msgid "The reader returned is a :class:`StreamReader` instance; the writer is a :class:`StreamWriter` instance."
msgstr ""

#: ../../library/asyncio-stream.rst:29
#: ../../library/asyncio-stream.rst:74
msgid "When specified, the *loop* argument determines which event loop to use, and the *limit* argument determines the buffer size limit used by the returned :class:`StreamReader` instance."
msgstr ""

#: ../../library/asyncio-stream.rst:33
msgid "The rest of the arguments are passed directly to :meth:`AbstractEventLoop.create_connection`."
msgstr ""

#: ../../library/asyncio-stream.rst:36
#: ../../library/asyncio-stream.rst:63
#: ../../library/asyncio-stream.rst:81
#: ../../library/asyncio-stream.rst:113
msgid "This function is a :ref:`coroutine <coroutine>`."
msgstr ""

#: ../../library/asyncio-stream.rst:40
#: ../../library/asyncio-stream.rst:87
msgid "The *ssl_handshake_timeout* parameter."
msgstr ""

#: ../../library/asyncio-stream.rst:44
msgid "Start a socket server, with a callback for each client connected. The return value is the same as :meth:`~AbstractEventLoop.create_server()`."
msgstr ""

#: ../../library/asyncio-stream.rst:47
#: ../../library/asyncio-stream.rst:97
msgid "The *client_connected_cb* callback is called whenever a new client connection is established.  It receives a reader/writer pair as two arguments, the first is a :class:`StreamReader` instance, and the second is a :class:`StreamWriter` instance."
msgstr ""

#: ../../library/asyncio-stream.rst:52
#: ../../library/asyncio-stream.rst:102
msgid "*client_connected_cb* accepts a plain callable or a :ref:`coroutine function <coroutine>`; if it is a coroutine function, it will be automatically converted into a :class:`Task`."
msgstr ""

#: ../../library/asyncio-stream.rst:56
#: ../../library/asyncio-stream.rst:106
msgid "When specified, the *loop* argument determines which event loop to use, and the *limit* argument determines the buffer size limit used by the :class:`StreamReader` instance passed to *client_connected_cb*."
msgstr ""

#: ../../library/asyncio-stream.rst:60
msgid "The rest of the arguments are passed directly to :meth:`~AbstractEventLoop.create_server()`."
msgstr ""

#: ../../library/asyncio-stream.rst:67
#: ../../library/asyncio-stream.rst:119
msgid "The *ssl_handshake_timeout* and *start_serving* parameters."
msgstr ""

#: ../../library/asyncio-stream.rst:71
msgid "A wrapper for :meth:`~AbstractEventLoop.create_unix_connection()` returning a (reader, writer) pair."
msgstr ""

#: ../../library/asyncio-stream.rst:78
msgid "The rest of the arguments are passed directly to :meth:`~AbstractEventLoop.create_unix_connection()`."
msgstr ""

#: ../../library/asyncio-stream.rst:83
#: ../../library/asyncio-stream.rst:115
msgid "Availability: UNIX."
msgstr ""

#: ../../library/asyncio-stream.rst:91
msgid "The *path* parameter can now be a :term:`path-like object`"
msgstr ""

#: ../../library/asyncio-stream.rst:95
msgid "Start a UNIX Domain Socket server, with a callback for each client connected."
msgstr ""

#: ../../library/asyncio-stream.rst:110
msgid "The rest of the arguments are passed directly to :meth:`~AbstractEventLoop.create_unix_server()`."
msgstr ""

#: ../../library/asyncio-stream.rst:123
msgid "The *path* parameter can now be a :term:`path-like object`."
msgstr ""

#: ../../library/asyncio-stream.rst:127
msgid "StreamReader"
msgstr ""

#: ../../library/asyncio-stream.rst:131
#: ../../library/asyncio-stream.rst:229
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""

#: ../../library/asyncio-stream.rst:133
msgid "The *limit* argument's default value is set to _DEFAULT_LIMIT which is 2**16 (64 KiB)"
msgstr ""

#: ../../library/asyncio-stream.rst:137
msgid "Get the exception."
msgstr ""

#: ../../library/asyncio-stream.rst:141
msgid "Acknowledge the EOF."
msgstr ""

#: ../../library/asyncio-stream.rst:145
msgid "Feed *data* bytes in the internal buffer.  Any operations waiting for the data will be resumed."
msgstr ""

#: ../../library/asyncio-stream.rst:150
msgid "Set the exception."
msgstr ""

#: ../../library/asyncio-stream.rst:154
msgid "Set the transport."
msgstr ""

#: ../../library/asyncio-stream.rst:158
msgid "Read up to *n* bytes.  If *n* is not provided, or set to ``-1``, read until EOF and return all read bytes."
msgstr ""

#: ../../library/asyncio-stream.rst:161
#: ../../library/asyncio-stream.rst:173
msgid "If the EOF was received and the internal buffer is empty, return an empty ``bytes`` object."
msgstr ""

#: ../../library/asyncio-stream.rst:164
#: ../../library/asyncio-stream.rst:176
#: ../../library/asyncio-stream.rst:185
#: ../../library/asyncio-stream.rst:278
msgid "This method is a :ref:`coroutine <coroutine>`."
msgstr ""

#: ../../library/asyncio-stream.rst:168
msgid "Read one line, where \"line\" is a sequence of bytes ending with ``\\n``."
msgstr ""

#: ../../library/asyncio-stream.rst:170
msgid "If EOF is received, and ``\\n`` was not found, the method will return the partial read bytes."
msgstr ""

#: ../../library/asyncio-stream.rst:180
msgid "Read exactly *n* bytes. Raise an :exc:`IncompleteReadError` if the end of the stream is reached before *n* can be read, the :attr:`IncompleteReadError.partial` attribute of the exception contains the partial read bytes."
msgstr ""

#: ../../library/asyncio-stream.rst:189
msgid "Read data from the stream until ``separator`` is found."
msgstr ""

#: ../../library/asyncio-stream.rst:191
msgid "On success, the data and separator will be removed from the internal buffer (consumed). Returned data will include the separator at the end."
msgstr ""

#: ../../library/asyncio-stream.rst:195
msgid "Configured stream limit is used to check result. Limit sets the maximal length of data that can be returned, not counting the separator."
msgstr ""

#: ../../library/asyncio-stream.rst:199
msgid "If an EOF occurs and the complete separator is still not found, an :exc:`IncompleteReadError` exception will be raised, and the internal buffer will be reset.  The :attr:`IncompleteReadError.partial` attribute may contain the separator partially."
msgstr ""

#: ../../library/asyncio-stream.rst:205
msgid "If the data cannot be read because of over limit, a :exc:`LimitOverrunError` exception  will be raised, and the data will be left in the internal buffer, so it can be read again."
msgstr ""

#: ../../library/asyncio-stream.rst:213
msgid "Return ``True`` if the buffer is empty and :meth:`feed_eof` was called."
msgstr ""

#: ../../library/asyncio-stream.rst:217
msgid "StreamWriter"
msgstr ""

#: ../../library/asyncio-stream.rst:221
msgid "Wraps a Transport."
msgstr ""

#: ../../library/asyncio-stream.rst:223
msgid "This exposes :meth:`write`, :meth:`writelines`, :meth:`can_write_eof()`, :meth:`write_eof`, :meth:`get_extra_info` and :meth:`close`.  It adds :meth:`drain` which returns an optional :class:`Future` on which you can wait for flow control.  It also adds a transport attribute which references the :class:`Transport` directly."
msgstr ""

#: ../../library/asyncio-stream.rst:233
msgid "Transport."
msgstr ""

#: ../../library/asyncio-stream.rst:237
msgid "Return :const:`True` if the transport supports :meth:`write_eof`, :const:`False` if not. See :meth:`WriteTransport.can_write_eof`."
msgstr ""

#: ../../library/asyncio-stream.rst:242
msgid "Close the transport: see :meth:`BaseTransport.close`."
msgstr ""

#: ../../library/asyncio-stream.rst:246
msgid "Return ``True`` if the writer is closing or is closed."
msgstr ""

#: ../../library/asyncio-stream.rst:252
msgid "Wait until the writer is closed."
msgstr ""

#: ../../library/asyncio-stream.rst:254
msgid "Should be called after :meth:`close`  to wait until the underlying connection (and the associated transport/protocol pair) is closed."
msgstr ""

#: ../../library/asyncio-stream.rst:261
msgid "Let the write buffer of the underlying transport a chance to be flushed."
msgstr ""

#: ../../library/asyncio-stream.rst:263
msgid "The intended use is to write::"
msgstr ""

#: ../../library/asyncio-stream.rst:268
msgid "When the size of the transport buffer reaches the high-water limit (the protocol is paused), block until the size of the buffer is drained down to the low-water limit and the protocol is resumed. When there is nothing to wait for, the yield-from continues immediately."
msgstr ""

#: ../../library/asyncio-stream.rst:273
msgid "Yielding from :meth:`drain` gives the opportunity for the loop to schedule the write operation and flush the buffer. It should especially be used when a possibly large amount of data is written to the transport, and the coroutine does not yield-from between calls to :meth:`write`."
msgstr ""

#: ../../library/asyncio-stream.rst:282
msgid "Return optional transport information: see :meth:`BaseTransport.get_extra_info`."
msgstr ""

#: ../../library/asyncio-stream.rst:287
msgid "Write some *data* bytes to the transport: see :meth:`WriteTransport.write`."
msgstr ""

#: ../../library/asyncio-stream.rst:292
msgid "Write a list (or any iterable) of data bytes to the transport: see :meth:`WriteTransport.writelines`."
msgstr ""

#: ../../library/asyncio-stream.rst:297
msgid "Close the write end of the transport after flushing buffered data: see :meth:`WriteTransport.write_eof`."
msgstr ""

#: ../../library/asyncio-stream.rst:302
msgid "StreamReaderProtocol"
msgstr ""

#: ../../library/asyncio-stream.rst:306
msgid "Trivial helper class to adapt between :class:`Protocol` and :class:`StreamReader`. Subclass of :class:`Protocol`."
msgstr ""

#: ../../library/asyncio-stream.rst:309
msgid "*stream_reader* is a :class:`StreamReader` instance, *client_connected_cb* is an optional function called with (stream_reader, stream_writer) when a connection is made, *loop* is the event loop instance to use."
msgstr ""

#: ../../library/asyncio-stream.rst:313
msgid "(This is a helper class instead of making :class:`StreamReader` itself a :class:`Protocol` subclass, because the :class:`StreamReader` has other potential uses, and to prevent the user of the :class:`StreamReader` from accidentally calling inappropriate methods of the protocol.)"
msgstr ""

#: ../../library/asyncio-stream.rst:320
msgid "IncompleteReadError"
msgstr ""

#: ../../library/asyncio-stream.rst:324
msgid "Incomplete read error, subclass of :exc:`EOFError`."
msgstr ""

#: ../../library/asyncio-stream.rst:328
msgid "Total number of expected bytes (:class:`int`)."
msgstr ""

#: ../../library/asyncio-stream.rst:332
msgid "Read bytes string before the end of stream was reached (:class:`bytes`)."
msgstr ""

#: ../../library/asyncio-stream.rst:336
msgid "LimitOverrunError"
msgstr ""

#: ../../library/asyncio-stream.rst:340
msgid "Reached the buffer limit while looking for a separator."
msgstr ""

#: ../../library/asyncio-stream.rst:344
msgid "Total number of to be consumed bytes."
msgstr ""

#: ../../library/asyncio-stream.rst:348
msgid "Stream examples"
msgstr ""

#: ../../library/asyncio-stream.rst:353
msgid "TCP echo client using streams"
msgstr ""

#: ../../library/asyncio-stream.rst:355
msgid "TCP echo client using the :func:`asyncio.open_connection` function::"
msgstr ""

#: ../../library/asyncio-stream.rst:379
msgid "The :ref:`TCP echo client protocol <asyncio-tcp-echo-client-protocol>` example uses the :meth:`AbstractEventLoop.create_connection` method."
msgstr ""

#: ../../library/asyncio-stream.rst:386
msgid "TCP echo server using streams"
msgstr ""

#: ../../library/asyncio-stream.rst:388
msgid "TCP echo server using the :func:`asyncio.start_server` function::"
msgstr ""

#: ../../library/asyncio-stream.rst:423
msgid "The :ref:`TCP echo server protocol <asyncio-tcp-echo-server-protocol>` example uses the :meth:`AbstractEventLoop.create_server` method."
msgstr ""

#: ../../library/asyncio-stream.rst:428
msgid "Get HTTP headers"
msgstr ""

#: ../../library/asyncio-stream.rst:430
msgid "Simple example querying HTTP headers of the URL passed on the command line::"
msgstr ""

#: ../../library/asyncio-stream.rst:464
msgid "Usage::"
msgstr ""

#: ../../library/asyncio-stream.rst:468
msgid "or with HTTPS::"
msgstr ""

#: ../../library/asyncio-stream.rst:475
msgid "Register an open socket to wait for data using streams"
msgstr ""

#: ../../library/asyncio-stream.rst:477
msgid "Coroutine waiting until a socket receives data using the :func:`open_connection` function::"
msgstr ""

#: ../../library/asyncio-stream.rst:509
msgid "The :ref:`register an open socket to wait for data using a protocol <asyncio-register-socket>` example uses a low-level protocol created by the :meth:`AbstractEventLoop.create_connection` method."
msgstr ""

#: ../../library/asyncio-stream.rst:513
msgid "The :ref:`watch a file descriptor for read events <asyncio-watch-read-event>` example uses the low-level :meth:`AbstractEventLoop.add_reader` method to register the file descriptor of a socket."
msgstr ""


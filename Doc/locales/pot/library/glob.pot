# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-16 18:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/glob.rst:2
msgid ":mod:`glob` --- Unix style pathname pattern expansion"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/glob.rst:10
msgid "**Source code:** :source:`Lib/glob.py`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/glob.rst:14
msgid "The :mod:`glob` module finds all the pathnames matching a specified pattern according to the rules used by the Unix shell, although results are returned in arbitrary order.  No tilde expansion is done, but ``*``, ``?``, and character ranges expressed with ``[]`` will be correctly matched.  This is done by using the :func:`os.listdir` and :func:`fnmatch.fnmatch` functions in concert, and not by actually invoking a subshell.  Note that unlike :func:`fnmatch.fnmatch`, :mod:`glob` treats filenames beginning with a dot (``.``) as special cases. (For tilde and shell variable expansion, use :func:`os.path.expanduser` and :func:`os.path.expandvars`.)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/glob.rst:24
msgid "For a literal match, wrap the meta-characters in brackets. For example, ``'[?]'`` matches the character ``'?'``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/glob.rst:30
msgid "Return a possibly-empty list of path names that match *pathname*, which must be a string containing a path specification. *pathname* can be either absolute (like :file:`/usr/src/Python-1.5/Makefile`) or relative (like :file:`../../Tools/\\*/\\*.gif`), and can contain shell-style wildcards. Broken symlinks are included in the results (as in the shell)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/glob.rst:39
msgid "Return an :term:`iterator` which yields the same values as :func:`glob` without actually storing them all simultaneously."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/glob.rst:44
msgid "For example, consider a directory containing only the following files: :file:`1.gif`, :file:`2.txt`, and :file:`card.gif`.  :func:`glob` will produce the following results.  Notice how any leading components of the path are preserved. ::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/glob.rst:57
msgid "If the directory contains files starting with ``.`` they won't be matched by default. For example, consider a directory containing :file:`card.gif` and :file:`.card.gif`::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/glob.rst:69
msgid "Module :mod:`fnmatch`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/glob.rst:70
msgid "Shell-style filename (not path) expansion"
msgstr ""

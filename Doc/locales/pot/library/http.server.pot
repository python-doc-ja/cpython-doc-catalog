# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-11 14:36+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/http.server.rst:2
msgid ":mod:`http.server` --- HTTP servers"
msgstr ""

#: ../../library/http.server.rst:7
msgid "**Source code:** :source:`Lib/http/server.py`"
msgstr ""

#: ../../library/http.server.rst:17
msgid "This module defines classes for implementing HTTP servers (Web servers)."
msgstr ""

#: ../../library/http.server.rst:20
msgid "Security Considerations"
msgstr ""

#: ../../library/http.server.rst:22
msgid "http.server is meant for demo purposes and does not implement the stringent security checks needed of real HTTP server. We do not recommend using this module directly in production."
msgstr ""

#: ../../library/http.server.rst:27
msgid "One class, :class:`HTTPServer`, is a :class:`socketserver.TCPServer` subclass. It creates and listens at the HTTP socket, dispatching the requests to a handler.  Code to create and run the server looks like this::"
msgstr ""

#: ../../library/http.server.rst:39
msgid "This class builds on the :class:`~socketserver.TCPServer` class by storing the server address as instance variables named :attr:`server_name` and :attr:`server_port`. The server is accessible by the handler, typically through the handler's :attr:`server` instance variable."
msgstr ""

#: ../../library/http.server.rst:45
msgid "The :class:`HTTPServer` must be given a *RequestHandlerClass* on instantiation, of which this module provides three different variants:"
msgstr ""

#: ../../library/http.server.rst:50
msgid "This class is used to handle the HTTP requests that arrive at the server.  By itself, it cannot respond to any actual HTTP requests; it must be subclassed to handle each request method (e.g. GET or POST). :class:`BaseHTTPRequestHandler` provides a number of class and instance variables, and methods for use by subclasses."
msgstr ""

#: ../../library/http.server.rst:56
msgid "The handler will parse the request and the headers, then call a method specific to the request type. The method name is constructed from the request. For example, for the request method ``SPAM``, the :meth:`do_SPAM` method will be called with no arguments. All of the relevant information is stored in instance variables of the handler.  Subclasses should not need to override or extend the :meth:`__init__` method."
msgstr ""

#: ../../library/http.server.rst:63
msgid ":class:`BaseHTTPRequestHandler` has the following instance variables:"
msgstr ""

#: ../../library/http.server.rst:67
msgid "Contains a tuple of the form ``(host, port)`` referring to the client's address."
msgstr ""

#: ../../library/http.server.rst:72
msgid "Contains the server instance."
msgstr ""

#: ../../library/http.server.rst:76
msgid "Boolean that should be set before :meth:`handle_one_request` returns, indicating if another request may be expected, or if the connection should be shut down."
msgstr ""

#: ../../library/http.server.rst:82
msgid "Contains the string representation of the HTTP request line. The terminating CRLF is stripped. This attribute should be set by :meth:`handle_one_request`. If no valid request line was processed, it should be set to the empty string."
msgstr ""

#: ../../library/http.server.rst:89
msgid "Contains the command (request type). For example, ``'GET'``."
msgstr ""

#: ../../library/http.server.rst:93
msgid "Contains the request path."
msgstr ""

#: ../../library/http.server.rst:97
msgid "Contains the version string from the request. For example, ``'HTTP/1.0'``."
msgstr ""

#: ../../library/http.server.rst:101
msgid "Holds an instance of the class specified by the :attr:`MessageClass` class variable. This instance parses and manages the headers in the HTTP request. The :func:`~http.client.parse_headers` function from :mod:`http.client` is used to parse the headers and it requires that the HTTP request provide a valid :rfc:`2822` style header."
msgstr ""

#: ../../library/http.server.rst:109
msgid "An :class:`io.BufferedIOBase` input stream, ready to read from the start of the optional input data."
msgstr ""

#: ../../library/http.server.rst:114
msgid "Contains the output stream for writing a response back to the client. Proper adherence to the HTTP protocol must be used when writing to this stream in order to achieve successful interoperation with HTTP clients."
msgstr ""

#: ../../library/http.server.rst:119
msgid "This is an :class:`io.BufferedIOBase` stream."
msgstr ""

#: ../../library/http.server.rst:122
msgid ":class:`BaseHTTPRequestHandler` has the following attributes:"
msgstr ""

#: ../../library/http.server.rst:126
msgid "Specifies the server software version.  You may want to override this. The format is multiple whitespace-separated strings, where each string is of the form name[/version]. For example, ``'BaseHTTP/0.2'``."
msgstr ""

#: ../../library/http.server.rst:132
msgid "Contains the Python system version, in a form usable by the :attr:`version_string` method and the :attr:`server_version` class variable. For example, ``'Python/1.4'``."
msgstr ""

#: ../../library/http.server.rst:138
msgid "Specifies a format string that should be used by :meth:`send_error` method for building an error response to the client. The string is filled by default with variables from :attr:`responses` based on the status code that passed to :meth:`send_error`."
msgstr ""

#: ../../library/http.server.rst:145
msgid "Specifies the Content-Type HTTP header of error responses sent to the client.  The default value is ``'text/html'``."
msgstr ""

#: ../../library/http.server.rst:150
msgid "This specifies the HTTP protocol version used in responses.  If set to ``'HTTP/1.1'``, the server will permit HTTP persistent connections; however, your server *must* then include an accurate ``Content-Length`` header (using :meth:`send_header`) in all of its responses to clients. For backwards compatibility, the setting defaults to ``'HTTP/1.0'``."
msgstr ""

#: ../../library/http.server.rst:158
msgid "Specifies an :class:`email.message.Message`\\ -like class to parse HTTP headers.  Typically, this is not overridden, and it defaults to :class:`http.client.HTTPMessage`."
msgstr ""

#: ../../library/http.server.rst:164
msgid "This attribute contains a mapping of error code integers to two-element tuples containing a short and long message. For example, ``{code: (shortmessage, longmessage)}``. The *shortmessage* is usually used as the *message* key in an error response, and *longmessage* as the *explain* key.  It is used by :meth:`send_response_only` and :meth:`send_error` methods."
msgstr ""

#: ../../library/http.server.rst:170
msgid "A :class:`BaseHTTPRequestHandler` instance has the following methods:"
msgstr ""

#: ../../library/http.server.rst:174
msgid "Calls :meth:`handle_one_request` once (or, if persistent connections are enabled, multiple times) to handle incoming HTTP requests. You should never need to override it; instead, implement appropriate :meth:`do_\\*` methods."
msgstr ""

#: ../../library/http.server.rst:181
msgid "This method will parse and dispatch the request to the appropriate :meth:`do_\\*` method.  You should never need to override it."
msgstr ""

#: ../../library/http.server.rst:186
msgid "When a HTTP/1.1 compliant server receives an ``Expect: 100-continue`` request header it responds back with a ``100 Continue`` followed by ``200 OK`` headers. This method can be overridden to raise an error if the server does not want the client to continue.  For e.g. server can chose to send ``417 Expectation Failed`` as a response header and ``return False``."
msgstr ""

#: ../../library/http.server.rst:197
msgid "Sends and logs a complete error reply to the client. The numeric *code* specifies the HTTP error code, with *message* as an optional, short, human readable description of the error.  The *explain* argument can be used to provide more detailed information about the error; it will be formatted using the :attr:`error_message_format` attribute and emitted, after a complete set of headers, as the response body.  The :attr:`responses` attribute holds the default values for *message* and *explain* that will be used if no value is provided; for unknown codes the default value for both is the string ``???``. The body will be empty if the method is HEAD or the response code is one of the following: ``1xx``, ``204 No Content``, ``205 Reset Content``, ``304 Not Modified``."
msgstr ""

#: ../../library/http.server.rst:209
msgid "The error response includes a Content-Length header. Added the *explain* argument."
msgstr ""

#: ../../library/http.server.rst:215
msgid "Adds a response header to the headers buffer and logs the accepted request. The HTTP response line is written to the internal buffer, followed by *Server* and *Date* headers. The values for these two headers are picked up from the :meth:`version_string` and :meth:`date_time_string` methods, respectively. If the server does not intend to send any other headers using the :meth:`send_header` method, then :meth:`send_response` should be followed by an :meth:`end_headers` call."
msgstr ""

#: ../../library/http.server.rst:224
msgid "Headers are stored to an internal buffer and :meth:`end_headers` needs to be called explicitly."
msgstr ""

#: ../../library/http.server.rst:230
msgid "Adds the HTTP header to an internal buffer which will be written to the output stream when either :meth:`end_headers` or :meth:`flush_headers` is invoked. *keyword* should specify the header keyword, with *value* specifying its value. Note that, after the send_header calls are done, :meth:`end_headers` MUST BE called in order to complete the operation."
msgstr ""

#: ../../library/http.server.rst:236
msgid "Headers are stored in an internal buffer."
msgstr ""

#: ../../library/http.server.rst:241
msgid "Sends the response header only, used for the purposes when ``100 Continue`` response is sent by the server to the client. The headers not buffered and sent directly the output stream.If the *message* is not specified, the HTTP message corresponding the response *code*  is sent."
msgstr ""

#: ../../library/http.server.rst:250
msgid "Adds a blank line (indicating the end of the HTTP headers in the response) to the headers buffer and calls :meth:`flush_headers()`."
msgstr ""

#: ../../library/http.server.rst:254
msgid "The buffered headers are written to the output stream."
msgstr ""

#: ../../library/http.server.rst:259
msgid "Finally send the headers to the output stream and flush the internal headers buffer."
msgstr ""

#: ../../library/http.server.rst:266
msgid "Logs an accepted (successful) request. *code* should specify the numeric HTTP code associated with the response. If a size of the response is available, then it should be passed as the *size* parameter."
msgstr ""

#: ../../library/http.server.rst:272
msgid "Logs an error when a request cannot be fulfilled. By default, it passes the message to :meth:`log_message`, so it takes the same arguments (*format* and additional values)."
msgstr ""

#: ../../library/http.server.rst:279
msgid "Logs an arbitrary message to ``sys.stderr``. This is typically overridden to create custom error logging mechanisms. The *format* argument is a standard printf-style format string, where the additional arguments to :meth:`log_message` are applied as inputs to the formatting. The client ip address and current date and time are prefixed to every message logged."
msgstr ""

#: ../../library/http.server.rst:287
msgid "Returns the server software's version string. This is a combination of the :attr:`server_version` and :attr:`sys_version` attributes."
msgstr ""

#: ../../library/http.server.rst:292
msgid "Returns the date and time given by *timestamp* (which must be ``None`` or in the format returned by :func:`time.time`), formatted for a message header. If *timestamp* is omitted, it uses the current date and time."
msgstr ""

#: ../../library/http.server.rst:296
msgid "The result looks like ``'Sun, 06 Nov 1994 08:49:37 GMT'``."
msgstr ""

#: ../../library/http.server.rst:300
msgid "Returns the current date and time, formatted for logging."
msgstr ""

#: ../../library/http.server.rst:304
msgid "Returns the client address."
msgstr ""

#: ../../library/http.server.rst:306
msgid "Previously, a name lookup was performed. To avoid name resolution delays, it now always returns the IP address."
msgstr ""

#: ../../library/http.server.rst:313
msgid "This class serves files from the current directory and below, directly mapping the directory structure to HTTP requests."
msgstr ""

#: ../../library/http.server.rst:316
msgid "A lot of the work, such as parsing the request, is done by the base class :class:`BaseHTTPRequestHandler`.  This class implements the :func:`do_GET` and :func:`do_HEAD` functions."
msgstr ""

#: ../../library/http.server.rst:320
msgid "The following are defined as class-level attributes of :class:`SimpleHTTPRequestHandler`:"
msgstr ""

#: ../../library/http.server.rst:325
msgid "This will be ``\"SimpleHTTP/\" + __version__``, where ``__version__`` is defined at the module level."
msgstr ""

#: ../../library/http.server.rst:330
msgid "A dictionary mapping suffixes into MIME types. The default is signified by an empty string, and is considered to be ``application/octet-stream``. The mapping is used case-insensitively, and so should contain only lower-cased keys."
msgstr ""

#: ../../library/http.server.rst:335
msgid "The :class:`SimpleHTTPRequestHandler` class defines the following methods:"
msgstr ""

#: ../../library/http.server.rst:339
msgid "This method serves the ``'HEAD'`` request type: it sends the headers it would send for the equivalent ``GET`` request. See the :meth:`do_GET` method for a more complete explanation of the possible headers."
msgstr ""

#: ../../library/http.server.rst:345
msgid "The request is mapped to a local file by interpreting the request as a path relative to the current working directory."
msgstr ""

#: ../../library/http.server.rst:348
msgid "If the request was mapped to a directory, the directory is checked for a file named ``index.html`` or ``index.htm`` (in that order). If found, the file's contents are returned; otherwise a directory listing is generated by calling the :meth:`list_directory` method. This method uses :func:`os.listdir` to scan the directory, and returns a ``404`` error response if the :func:`~os.listdir` fails."
msgstr ""

#: ../../library/http.server.rst:355
msgid "If the request was mapped to a file, it is opened and the contents are returned.  Any :exc:`OSError` exception in opening the requested file is mapped to a ``404``, ``'File not found'`` error. Otherwise, the content type is guessed by calling the :meth:`guess_type` method, which in turn uses the *extensions_map* variable."
msgstr ""

#: ../../library/http.server.rst:361
msgid "A ``'Content-type:'`` header with the guessed content type is output, followed by a ``'Content-Length:'`` header with the file's size and a ``'Last-Modified:'`` header with the file's modification time."
msgstr ""

#: ../../library/http.server.rst:365
msgid "Then follows a blank line signifying the end of the headers, and then the contents of the file are output. If the file's MIME type starts with ``text/`` the file is opened in text mode; otherwise binary mode is used."
msgstr ""

#: ../../library/http.server.rst:369
msgid "For example usage, see the implementation of the :func:`test` function invocation in the :mod:`http.server` module."
msgstr ""

#: ../../library/http.server.rst:373
msgid "The :class:`SimpleHTTPRequestHandler` class can be used in the following manner in order to create a very basic webserver serving files relative to the current directory::"
msgstr ""

#: ../../library/http.server.rst:390
msgid ":mod:`http.server` can also be invoked directly using the :option:`-m` switch of the interpreter with a ``port number`` argument.  Similar to the previous example, this serves files relative to the current directory::"
msgstr ""

#: ../../library/http.server.rst:396
msgid "By default, server binds itself to all interfaces.  The option ``-b/--bind`` specifies a specific address to which it should bind.  For example, the following command causes the server to bind to localhost only::"
msgstr ""

#: ../../library/http.server.rst:402
msgid "``--bind`` argument was introduced."
msgstr ""

#: ../../library/http.server.rst:408
msgid "This class is used to serve either files or output of CGI scripts from the current directory and below. Note that mapping HTTP hierarchic structure to local directory structure is exactly as in :class:`SimpleHTTPRequestHandler`."
msgstr ""

#: ../../library/http.server.rst:414
msgid "CGI scripts run by the :class:`CGIHTTPRequestHandler` class cannot execute redirects (HTTP code 302), because code 200 (script output follows) is sent prior to execution of the CGI script.  This pre-empts the status code."
msgstr ""

#: ../../library/http.server.rst:419
msgid "The class will however, run the CGI script, instead of serving it as a file, if it guesses it to be a CGI script.  Only directory-based CGI are used --- the other common server configuration is to treat special extensions as denoting CGI scripts."
msgstr ""

#: ../../library/http.server.rst:424
msgid "The :func:`do_GET` and :func:`do_HEAD` functions are modified to run CGI scripts and serve the output, instead of serving files, if the request leads to somewhere below the ``cgi_directories`` path."
msgstr ""

#: ../../library/http.server.rst:428
msgid "The :class:`CGIHTTPRequestHandler` defines the following data member:"
msgstr ""

#: ../../library/http.server.rst:432
msgid "This defaults to ``['/cgi-bin', '/htbin']`` and describes directories to treat as containing CGI scripts."
msgstr ""

#: ../../library/http.server.rst:435
msgid "The :class:`CGIHTTPRequestHandler` defines the following method:"
msgstr ""

#: ../../library/http.server.rst:439
msgid "This method serves the ``'POST'`` request type, only allowed for CGI scripts.  Error 501, \"Can only POST to CGI scripts\", is output when trying to POST to a non-CGI url."
msgstr ""

#: ../../library/http.server.rst:443
msgid "Note that CGI scripts will be run with UID of user nobody, for security reasons.  Problems with the CGI script will be translated to error 403."
msgstr ""

#: ../../library/http.server.rst:446
msgid ":class:`CGIHTTPRequestHandler` can be enabled in the command line by passing the ``--cgi`` option::"
msgstr ""


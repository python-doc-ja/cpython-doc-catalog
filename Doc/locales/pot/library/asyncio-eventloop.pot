# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-24 12:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:6
msgid "Event Loop"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:8
msgid "**Source code:** :source:`Lib/asyncio/events.py`, :source:`Lib/asyncio/base_events.py`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:14
msgid "Preface"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:15
msgid "The event loop is the core of every asyncio application. Event loops run asynchronous tasks and callbacks, perform network IO operations, and run subprocesses."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:19
msgid "Application developers should typically use the high-level asyncio functions, such as :func:`asyncio.run`, and should rarely need to reference the loop object or call its methods.  This section is intended mostly for authors of lower-level code, libraries, and frameworks, who need finer control over the event loop behavior."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:26
msgid "Obtaining the Event Loop"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:27
msgid "The following low-level functions can be used to get, set, or create an event loop:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:32
msgid "Return the running event loop in the current OS thread."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:34
msgid "If there is no running event loop a :exc:`RuntimeError` is raised. This function can only be called from a coroutine or a callback."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:41
msgid "Get the current event loop.  If there is no current event loop set in the current OS thread and :func:`set_event_loop` has not yet been called, asyncio will create a new event loop and set it as the current one."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:46
msgid "Because this function has rather complex behavior (especially when custom event loop policies are in use), using the :func:`get_running_loop` function is preferred to :func:`get_event_loop` in coroutines and callbacks."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:51
msgid "Consider also using the :func:`asyncio.run` function instead of using lower level functions to manually create and close an event loop."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:56
msgid "Set *loop* as a current event loop for the current OS thread."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:60
msgid "Create a new event loop object."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:62
msgid "Note that the behaviour of :func:`get_event_loop`, :func:`set_event_loop`, and :func:`new_event_loop` functions can be altered by :ref:`setting a custom event loop policy <asyncio-policies>`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:68
msgid "Contents"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:69
msgid "This documentation page contains the following sections:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:71
msgid "The `Event Loop Methods`_ section is the reference documentation of the event loop APIs;"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:74
msgid "The `Callback Handles`_ section documents the :class:`Handle` and :class:`TimerHandle` instances which are returned from scheduling methods such as :meth:`loop.call_soon` and :meth:`loop.call_later`;"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:78
msgid "The `Server Objects`_ section documents types returned from event loop methods like :meth:`loop.create_server`;"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:81
msgid "The `Event Loop Implementations`_ section documents the :class:`SelectorEventLoop` and :class:`ProactorEventLoop` classes;"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:84
msgid "The `Examples`_ section showcases how to work with some event loop APIs."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:91
msgid "Event Loop Methods"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:93
msgid "Event loops have **low-level** APIs for the following:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:101
msgid "Running and stopping the loop"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:105
msgid "Run until the *future* (an instance of :class:`Future`) has completed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:108
msgid "If the argument is a :ref:`coroutine object <coroutine>` it is implicitly scheduled to run as a :class:`asyncio.Task`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:111
msgid "Return the Future's result or raise its exception."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:115
msgid "Run the event loop until :meth:`stop` is called."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:117
msgid "If :meth:`stop` is called before :meth:`run_forever()` is called, the loop will poll the I/O selector once with a timeout of zero, run all callbacks scheduled in response to I/O events (and those that were already scheduled), and then exit."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:122
msgid "If :meth:`stop` is called while :meth:`run_forever` is running, the loop will run the current batch of callbacks and then exit. Note that new callbacks scheduled by callbacks will not run in this case; instead, they will run the next time :meth:`run_forever` or :meth:`run_until_complete` is called."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:130
msgid "Stop the event loop."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:134
msgid "Return ``True`` if the event loop is currently running."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:138
msgid "Return ``True`` if the event loop was closed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:142
msgid "Close the event loop."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:144
msgid "The loop must not be running when this function is called. Any pending callbacks will be discarded."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:147
msgid "This method clears all queues and shuts down the executor, but does not wait for the executor to finish."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:150
msgid "This method is idempotent and irreversible.  No other methods should be called after the event loop is closed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:155
msgid "Schedule all currently open :term:`asynchronous generator` objects to close with an :meth:`~agen.aclose()` call.  After calling this method, the event loop will issue a warning if a new asynchronous generator is iterated. This should be used to reliably finalize all scheduled asynchronous generators."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:161
msgid "Note that there is no need to call this function when :func:`asyncio.run` is used."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:164
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1048
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1430
msgid "Example::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:176
msgid "Scheduling callbacks"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:180
msgid "Schedule a *callback* to be called with *args* arguments at the next iteration of the event loop."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:183
msgid "Callbacks are called in the order in which they are registered. Each callback will be called exactly once."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:186
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:249
msgid "An optional keyword-only *context* argument allows specifying a custom :class:`contextvars.Context` for the *callback* to run in. The current context is used when no *context* is provided."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:190
msgid "An instance of :class:`asyncio.Handle` is returned, which can be used later to cancel the callback."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:193
msgid "This method is not thread-safe."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:197
msgid "A thread-safe variant of :meth:`call_soon`.  Must be used to schedule callbacks *from another thread*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:200
msgid "See the :ref:`concurrency and multithreading <asyncio-multithreading>` section of the documentation."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:203
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:253
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:273
msgid "The *context* keyword-only parameter was added. See :pep:`567` for more details."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:211
msgid "Most :mod:`asyncio` scheduling functions don't allow passing keyword arguments.  To do that, use :func:`functools.partial`::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:218
msgid "Using partial objects is usually more convenient than using lambdas, as asyncio can render partial objects better in debug and error messages."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:226
msgid "Scheduling delayed callbacks"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:228
msgid "Event loop provides mechanisms to schedule callback functions to be called at some point in the future.  Event loop uses monotonic clocks to track time."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:235
msgid "Schedule *callback* to be called after the given *delay* number of seconds (can be either an int or a float)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:238
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:270
msgid "An instance of :class:`asyncio.TimerHandle` is returned which can be used to cancel the callback."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:241
msgid "*callback* will be called exactly once.  If two callbacks are scheduled for exactly the same time, the order in which they are called is undefined."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:245
msgid "The optional positional *args* will be passed to the callback when it is called. If you want the callback to be called with keyword arguments use :func:`functools.partial`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:257
msgid "In Python 3.7 and earlier with the default event loop implementation, the *delay* could not exceed one day. This has been fixed in Python 3.8."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:264
msgid "Schedule *callback* to be called at the given absolute timestamp *when* (an int or a float), using the same time reference as :meth:`loop.time`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:268
msgid "This method's behavior is the same as :meth:`call_later`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:277
msgid "In Python 3.7 and earlier with the default event loop implementation, the difference between *when* and the current time could not exceed one day.  This has been fixed in Python 3.8."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:284
msgid "Return the current time, as a :class:`float` value, according to the event loop's internal monotonic clock."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:288
msgid "In Python 3.7 and earlier timeouts (relative *delay* or absolute *when*) should not exceed one day.  This has been fixed in Python 3.8."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:294
msgid "The :func:`asyncio.sleep` function."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:298
msgid "Creating Futures and Tasks"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:302
msgid "Create an :class:`asyncio.Future` object attached to the event loop."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:304
msgid "This is the preferred way to create Futures in asyncio. This lets third-party event loops provide alternative implementations of the Future object (with better performance or instrumentation)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:312
msgid "Schedule the execution of a :ref:`coroutine`. Return a :class:`Task` object."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:315
msgid "Third-party event loops can use their own subclass of :class:`Task` for interoperability. In this case, the result type is a subclass of :class:`Task`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:319
msgid "If the *name* argument is provided and not ``None``, it is set as the name of the task using :meth:`Task.set_name`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:322
msgid "Added the ``name`` parameter."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:327
msgid "Set a task factory that will be used by :meth:`loop.create_task`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:330
msgid "If *factory* is ``None`` the default task factory will be set. Otherwise, *factory* must be a *callable* with the signature matching ``(loop, coro)``, where *loop* is a reference to the active event loop, and *coro* is a coroutine object.  The callable must return a :class:`asyncio.Future`-compatible object."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:338
msgid "Return a task factory or ``None`` if the default one is in use."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:342
msgid "Opening network connections"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:350
msgid "Open a streaming transport connection to a given address specified by *host* and *port*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:353
msgid "The socket family can be either :py:data:`~socket.AF_INET` or :py:data:`~socket.AF_INET6` depending on *host* (or the *family* argument, if provided)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:357
msgid "The socket type will be :py:data:`~socket.SOCK_STREAM`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:359
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:964
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:980
msgid "*protocol_factory* must be a callable returning an :ref:`asyncio protocol <asyncio-protocol>` implementation."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:362
msgid "This method will try to establish the connection in the background. When successful, it returns a ``(transport, protocol)`` pair."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:365
msgid "The chronological synopsis of the underlying operation is as follows:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:367
msgid "The connection is established and a :ref:`transport <asyncio-transport>` is created for it."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:370
msgid "*protocol_factory* is called without arguments and is expected to return a :ref:`protocol <asyncio-protocol>` instance."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:373
msgid "The protocol instance is coupled with the transport by calling its :meth:`~BaseProtocol.connection_made` method."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:376
msgid "A ``(transport, protocol)`` tuple is returned on success."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:378
msgid "The created transport is an implementation-dependent bidirectional stream."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:381
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:492
msgid "Other arguments:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:383
msgid "*ssl*: if given and not false, a SSL/TLS transport is created (by default a plain TCP transport is created).  If *ssl* is a :class:`ssl.SSLContext` object, this context is used to create the transport; if *ssl* is :const:`True`, a default context returned from :func:`ssl.create_default_context` is used."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:389
msgid ":ref:`SSL/TLS security considerations <ssl-security>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:391
msgid "*server_hostname* sets or overrides the hostname that the target server's certificate will be matched against.  Should only be passed if *ssl* is not ``None``.  By default the value of the *host* argument is used.  If *host* is empty, there is no default and you must pass a value for *server_hostname*.  If *server_hostname* is an empty string, hostname matching is disabled (which is a serious security risk, allowing for potential man-in-the-middle attacks)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:399
msgid "*family*, *proto*, *flags* are the optional address family, protocol and flags to be passed through to getaddrinfo() for *host* resolution. If given, these should all be integers from the corresponding :mod:`socket` module constants."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:404
msgid "*happy_eyeballs_delay*, if given, enables Happy Eyeballs for this connection. It should be a floating-point number representing the amount of time in seconds to wait for a connection attempt to complete, before starting the next attempt in parallel. This is the \"Connection Attempt Delay\" as defined in :rfc:`8305`. A sensible default value recommended by the RFC is ``0.25`` (250 milliseconds)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:412
msgid "*interleave* controls address reordering when a host name resolves to multiple IP addresses. If ``0`` or unspecified, no reordering is done, and addresses are tried in the order returned by :meth:`getaddrinfo`. If a positive integer is specified, the addresses are interleaved by address family, and the given integer is interpreted as \"First Address Family Count\" as defined in :rfc:`8305`. The default is ``0`` if *happy_eyeballs_delay* is not specified, and ``1`` if it is."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:421
msgid "*sock*, if given, should be an existing, already connected :class:`socket.socket` object to be used by the transport. If *sock* is given, none of *host*, *port*, *family*, *proto*, *flags*, *happy_eyeballs_delay*, *interleave* and *local_addr* should be specified."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:427
msgid "*local_addr*, if given, is a ``(local_host, local_port)`` tuple used to bind the socket to locally.  The *local_host* and *local_port* are looked up using ``getaddrinfo()``, similarly to *host* and *port*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:431
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:773
msgid "*ssl_handshake_timeout* is (for a TLS connection) the time in seconds to wait for the TLS handshake to complete before aborting the connection. ``60.0`` seconds if ``None`` (default)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:437
msgid "The *happy_eyeballs_delay* and *interleave* parameters."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:441
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:558
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:711
msgid "The *ssl_handshake_timeout* parameter."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:445
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:641
msgid "The socket option :py:data:`~socket.TCP_NODELAY` is set by default for all TCP connections."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:450
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:646
msgid "Added support for SSL/TLS in :class:`ProactorEventLoop`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:454
msgid "The :func:`open_connection` function is a high-level alternative API.  It returns a pair of (:class:`StreamReader`, :class:`StreamWriter`) that can be used directly in async/await code."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:465
msgid "The parameter *reuse_address* is no longer supported, as using :py:data:`~sockets.SO_REUSEADDR` poses a significant security concern for UDP. Explicitly passing ``reuse_address=True`` will raise an exception."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:469
msgid "When multiple processes with differing UIDs assign sockets to an identical UDP socket address with ``SO_REUSEADDR``, incoming packets can become randomly distributed among the sockets."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:473
msgid "For supported platforms, *reuse_port* can be used as a replacement for similar functionality. With *reuse_port*, :py:data:`~sockets.SO_REUSEPORT` is used instead, which specifically prevents processes with differing UIDs from assigning sockets to the same socket address."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:479
msgid "Create a datagram connection."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:481
msgid "The socket family can be either :py:data:`~socket.AF_INET`, :py:data:`~socket.AF_INET6`, or :py:data:`~socket.AF_UNIX`, depending on *host* (or the *family* argument, if provided)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:485
msgid "The socket type will be :py:data:`~socket.SOCK_DGRAM`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:487
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:583
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:694
msgid "*protocol_factory* must be a callable returning a :ref:`protocol <asyncio-protocol>` implementation."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:490
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:544
msgid "A tuple of ``(transport, protocol)`` is returned on success."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:494
msgid "*local_addr*, if given, is a ``(local_host, local_port)`` tuple used to bind the socket to locally.  The *local_host* and *local_port* are looked up using :meth:`getaddrinfo`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:498
msgid "*remote_addr*, if given, is a ``(remote_host, remote_port)`` tuple used to connect the socket to a remote address.  The *remote_host* and *remote_port* are looked up using :meth:`getaddrinfo`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:502
msgid "*family*, *proto*, *flags* are the optional address family, protocol and flags to be passed through to :meth:`getaddrinfo` for *host* resolution. If given, these should all be integers from the corresponding :mod:`socket` module constants."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:507
msgid "*reuse_port* tells the kernel to allow this endpoint to be bound to the same port as other existing endpoints are bound to, so long as they all set this flag when being created. This option is not supported on Windows and some Unixes. If the :py:data:`~socket.SO_REUSEPORT` constant is not defined then this capability is unsupported."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:513
msgid "*allow_broadcast* tells the kernel to allow this endpoint to send messages to the broadcast address."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:516
msgid "*sock* can optionally be specified in order to use a preexisting, already connected, :class:`socket.socket` object to be used by the transport. If specified, *local_addr* and *remote_addr* should be omitted (must be :const:`None`)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:521
msgid "See :ref:`UDP echo client protocol <asyncio-udp-echo-client-protocol>` and :ref:`UDP echo server protocol <asyncio-udp-echo-server-protocol>` examples."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:524
msgid "The *family*, *proto*, *flags*, *reuse_address*, *reuse_port, *allow_broadcast*, and *sock* parameters were added."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:528
msgid "The *reuse_address* parameter is no longer supported due to security concerns."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:532
msgid "Added support for Windows."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:539
msgid "Create a Unix connection."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:541
msgid "The socket family will be :py:data:`~socket.AF_UNIX`; socket type will be :py:data:`~socket.SOCK_STREAM`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:546
msgid "*path* is the name of a Unix domain socket and is required, unless a *sock* parameter is specified.  Abstract Unix sockets, :class:`str`, :class:`bytes`, and :class:`~pathlib.Path` paths are supported."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:551
msgid "See the documentation of the :meth:`loop.create_connection` method for information about arguments to this method."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:555
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:675
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1031
msgid ":ref:`Availability <availability>`: Unix."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:562
msgid "The *path* parameter can now be a :term:`path-like object`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:566
msgid "Creating network servers"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:576
msgid "Create a TCP server (socket type :data:`~socket.SOCK_STREAM`) listening on *port* of the *host* address."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:579
msgid "Returns a :class:`Server` object."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:581
msgid "Arguments:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:586
msgid "The *host* parameter can be set to several types which determine where the server would be listening:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:589
msgid "If *host* is a string, the TCP server is bound to a single network interface specified by *host*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:592
msgid "If *host* is a sequence of strings, the TCP server is bound to all network interfaces specified by the sequence."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:595
msgid "If *host* is an empty string or ``None``, all interfaces are assumed and a list of multiple sockets will be returned (most likely one for IPv4 and another one for IPv6)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:599
msgid "*family* can be set to either :data:`socket.AF_INET` or :data:`~socket.AF_INET6` to force the socket to use IPv4 or IPv6. If not set, the *family* will be determined from host name (defaults to :data:`~socket.AF_UNSPEC`)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:604
msgid "*flags* is a bitmask for :meth:`getaddrinfo`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:606
msgid "*sock* can optionally be specified in order to use a preexisting socket object. If specified, *host* and *port* must not be specified."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:609
msgid "*backlog* is the maximum number of queued connections passed to :meth:`~socket.socket.listen` (defaults to 100)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:612
msgid "*ssl* can be set to an :class:`~ssl.SSLContext` instance to enable TLS over the accepted connections."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:615
msgid "*reuse_address* tells the kernel to reuse a local socket in ``TIME_WAIT`` state, without waiting for its natural timeout to expire. If not specified will automatically be set to ``True`` on Unix."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:620
msgid "*reuse_port* tells the kernel to allow this endpoint to be bound to the same port as other existing endpoints are bound to, so long as they all set this flag when being created. This option is not supported on Windows."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:625
msgid "*ssl_handshake_timeout* is (for a TLS server) the time in seconds to wait for the TLS handshake to complete before aborting the connection. ``60.0`` seconds if ``None`` (default)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:629
msgid "*start_serving* set to ``True`` (the default) causes the created server to start accepting connections immediately.  When set to ``False``, the user should await on :meth:`Server.start_serving` or :meth:`Server.serve_forever` to make the server to start accepting connections."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:637
msgid "Added *ssl_handshake_timeout* and *start_serving* parameters."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:650
msgid "The *host* parameter can be a sequence of strings."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:654
msgid "The :func:`start_server` function is a higher-level alternative API that returns a pair of :class:`StreamReader` and :class:`StreamWriter` that can be used in an async/await code."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:663
msgid "Similar to :meth:`loop.create_server` but works with the :py:data:`~socket.AF_UNIX` socket family."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:666
msgid "*path* is the name of a Unix domain socket, and is required, unless a *sock* argument is provided.  Abstract Unix sockets, :class:`str`, :class:`bytes`, and :class:`~pathlib.Path` paths are supported."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:671
msgid "See the documentation of the :meth:`loop.create_server` method for information about arguments to this method."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:678
msgid "The *ssl_handshake_timeout* and *start_serving* parameters."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:682
msgid "The *path* parameter can now be a :class:`~pathlib.Path` object."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:687
msgid "Wrap an already accepted connection into a transport/protocol pair."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:689
msgid "This method can be used by servers that accept connections outside of asyncio but that use asyncio to handle them."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:692
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:759
msgid "Parameters:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:697
msgid "*sock* is a preexisting socket object returned from :meth:`socket.accept <socket.socket.accept>`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:700
msgid "*ssl* can be set to an :class:`~ssl.SSLContext` to enable SSL over the accepted connections."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:703
msgid "*ssl_handshake_timeout* is (for an SSL connection) the time in seconds to wait for the SSL handshake to complete before aborting the connection. ``60.0`` seconds if ``None`` (default)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:707
msgid "Returns a ``(transport, protocol)`` pair."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:717
msgid "Transferring files"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:722
msgid "Send a *file* over a *transport*.  Return the total number of bytes sent."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:725
msgid "The method uses high-performance :meth:`os.sendfile` if available."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:727
msgid "*file* must be a regular file object opened in binary mode."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:729
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:919
msgid "*offset* tells from where to start reading the file. If specified, *count* is the total number of bytes to transmit as opposed to sending the file until EOF is reached. File position is always updated, even when this method raises an error, and :meth:`file.tell() <io.IOBase.tell>` can be used to obtain the actual number of bytes sent."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:736
msgid "*fallback* set to ``True`` makes asyncio to manually read and send the file when the platform does not support the sendfile system call (e.g. Windows or SSL socket on Unix)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:740
msgid "Raise :exc:`SendfileNotAvailableError` if the system does not support the *sendfile* syscall and *fallback* is ``False``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:747
msgid "TLS Upgrade"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:753
msgid "Upgrade an existing transport-based connection to TLS."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:755
msgid "Return a new transport instance, that the *protocol* must start using immediately after the *await*.  The *transport* instance passed to the *start_tls* method should never be used again."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:761
msgid "*transport* and *protocol* instances that methods like :meth:`~loop.create_server` and :meth:`~loop.create_connection` return."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:765
msgid "*sslcontext*: a configured instance of :class:`~ssl.SSLContext`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:767
msgid "*server_side* pass ``True`` when a server-side connection is being upgraded (like the one created by :meth:`~loop.create_server`)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:770
msgid "*server_hostname*: sets or overrides the host name that the target server's certificate will be matched against."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:781
msgid "Watching file descriptors"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:785
msgid "Start monitoring the *fd* file descriptor for read availability and invoke *callback* with the specified arguments once *fd* is available for reading."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:791
msgid "Stop monitoring the *fd* file descriptor for read availability."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:795
msgid "Start monitoring the *fd* file descriptor for write availability and invoke *callback* with the specified arguments once *fd* is available for writing."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:799
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1018
msgid "Use :func:`functools.partial` :ref:`to pass keyword arguments <asyncio-pass-keywords>` to *callback*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:804
msgid "Stop monitoring the *fd* file descriptor for write availability."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:806
msgid "See also :ref:`Platform Support <asyncio-platform-support>` section for some limitations of these methods."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:811
msgid "Working with socket objects directly"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:813
msgid "In general, protocol implementations that use transport-based APIs such as :meth:`loop.create_connection` and :meth:`loop.create_server` are faster than implementations that work with sockets directly. However, there are some use cases when performance is not critical, and working with :class:`~socket.socket` objects directly is more convenient."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:822
msgid "Receive up to *nbytes* from *sock*.  Asynchronous version of :meth:`socket.recv() <socket.socket.recv>`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:825
msgid "Return the received data as a bytes object."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:827
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:841
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:856
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:869
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:895
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:933
msgid "*sock* must be a non-blocking socket."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:829
msgid "Even though this method was always documented as a coroutine method, releases before Python 3.7 returned a :class:`Future`. Since Python 3.7 this is an ``async def`` method."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:836
msgid "Receive data from *sock* into the *buf* buffer.  Modeled after the blocking :meth:`socket.recv_into() <socket.socket.recv_into>` method."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:839
msgid "Return the number of bytes written to the buffer."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:847
msgid "Send *data* to the *sock* socket. Asynchronous version of :meth:`socket.sendall() <socket.socket.sendall>`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:850
msgid "This method continues to send to the socket until either all data in *data* has been sent or an error occurs.  ``None`` is returned on success.  On error, an exception is raised. Additionally, there is no way to determine how much data, if any, was successfully processed by the receiving end of the connection."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:858
msgid "Even though the method was always documented as a coroutine method, before Python 3.7 it returned an :class:`Future`. Since Python 3.7, this is an ``async def`` method."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:865
msgid "Connect *sock* to a remote socket at *address*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:867
msgid "Asynchronous version of :meth:`socket.connect() <socket.socket.connect>`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:871
msgid "``address`` no longer needs to be resolved.  ``sock_connect`` will try to check if the *address* is already resolved by calling :func:`socket.inet_pton`.  If not, :meth:`loop.getaddrinfo` will be used to resolve the *address*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:880
msgid ":meth:`loop.create_connection` and  :func:`asyncio.open_connection() <open_connection>`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:886
msgid "Accept a connection.  Modeled after the blocking :meth:`socket.accept() <socket.socket.accept>` method."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:889
msgid "The socket must be bound to an address and listening for connections. The return value is a pair ``(conn, address)`` where *conn* is a *new* socket object usable to send and receive data on the connection, and *address* is the address bound to the socket on the other end of the connection."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:897
msgid "Even though the method was always documented as a coroutine method, before Python 3.7 it returned a :class:`Future`. Since Python 3.7, this is an ``async def`` method."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:904
msgid ":meth:`loop.create_server` and :func:`start_server`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:909
msgid "Send a file using high-performance :mod:`os.sendfile` if possible. Return the total number of bytes sent."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:912
msgid "Asynchronous version of :meth:`socket.sendfile() <socket.socket.sendfile>`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:914
msgid "*sock* must be a non-blocking :const:`socket.SOCK_STREAM` :class:`~socket.socket`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:917
msgid "*file* must be a regular file object open in binary mode."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:926
msgid "*fallback*, when set to ``True``, makes asyncio manually read and send the file when the platform does not support the sendfile syscall (e.g. Windows or SSL socket on Unix)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:930
msgid "Raise :exc:`SendfileNotAvailableError` if the system does not support *sendfile* syscall and *fallback* is ``False``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:939
msgid "DNS"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:944
msgid "Asynchronous version of :meth:`socket.getaddrinfo`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:948
msgid "Asynchronous version of :meth:`socket.getnameinfo`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:950
msgid "Both *getaddrinfo* and *getnameinfo* methods were always documented to return a coroutine, but prior to Python 3.7 they were, in fact, returning :class:`asyncio.Future` objects.  Starting with Python 3.7 both methods are coroutines."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:958
msgid "Working with pipes"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:962
msgid "Register the read end of *pipe* in the event loop."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:967
msgid "*pipe* is a :term:`file-like object <file object>`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:969
msgid "Return pair ``(transport, protocol)``, where *transport* supports the :class:`ReadTransport` interface and *protocol* is an object instantiated by the *protocol_factory*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:973
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:989
msgid "With :class:`SelectorEventLoop` event loop, the *pipe* is set to non-blocking mode."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:978
msgid "Register the write end of *pipe* in the event loop."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:983
msgid "*pipe* is :term:`file-like object <file object>`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:985
msgid "Return pair ``(transport, protocol)``, where *transport* supports :class:`WriteTransport` interface and *protocol* is an object instantiated by the *protocol_factory*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:994
msgid ":class:`SelectorEventLoop` does not support the above methods on Windows.  Use :class:`ProactorEventLoop` instead for Windows."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:999
msgid "The :meth:`loop.subprocess_exec` and :meth:`loop.subprocess_shell` methods."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1004
msgid "Unix signals"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1008
msgid "Set *callback* as the handler for the *signum* signal."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1010
msgid "The callback will be invoked by *loop*, along with other queued callbacks and runnable coroutines of that event loop. Unlike signal handlers registered using :func:`signal.signal`, a callback registered with this function is allowed to interact with the event loop."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1015
msgid "Raise :exc:`ValueError` if the signal number is invalid or uncatchable. Raise :exc:`RuntimeError` if there is a problem setting up the handler."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1021
msgid "Like :func:`signal.signal`, this function must be invoked in the main thread."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1026
msgid "Remove the handler for the *sig* signal."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1028
msgid "Return ``True`` if the signal handler was removed, or ``False`` if no handler was set for the given signal."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1035
msgid "The :mod:`signal` module."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1039
msgid "Executing code in thread or process pools"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1043
msgid "Arrange for *func* to be called in the specified executor."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1045
msgid "The *executor* argument should be an :class:`concurrent.futures.Executor` instance. The default executor is used if *executor* is ``None``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1089
msgid "This method returns a :class:`asyncio.Future` object."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1091
msgid "Use :func:`functools.partial` :ref:`to pass keyword arguments <asyncio-pass-keywords>` to *func*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1094
msgid ":meth:`loop.run_in_executor` no longer configures the ``max_workers`` of the thread pool executor it creates, instead leaving it up to the thread pool executor (:class:`~concurrent.futures.ThreadPoolExecutor`) to set the default."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1103
msgid "Set *executor* as the default executor used by :meth:`run_in_executor`. *executor* should be an instance of :class:`~concurrent.futures.ThreadPoolExecutor`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1107
msgid "Using an executor that is not an instance of :class:`~concurrent.futures.ThreadPoolExecutor` is deprecated and will trigger an error in Python 3.9."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1112
msgid "*executor* must be an instance of :class:`concurrent.futures.ThreadPoolExecutor`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1117
msgid "Error Handling API"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1119
msgid "Allows customizing how exceptions are handled in the event loop."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1123
msgid "Set *handler* as the new event loop exception handler."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1125
msgid "If *handler* is ``None``, the default exception handler will be set.  Otherwise, *handler* must be a callable with the signature matching ``(loop, context)``, where ``loop`` is a reference to the active event loop, and ``context`` is a ``dict`` object containing the details of the exception (see :meth:`call_exception_handler` documentation for details about context)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1135
msgid "Return the current exception handler, or ``None`` if no custom exception handler was set."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1142
msgid "Default exception handler."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1144
msgid "This is called when an exception occurs and no exception handler is set. This can be called by a custom exception handler that wants to defer to the default handler behavior."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1148
msgid "*context* parameter has the same meaning as in :meth:`call_exception_handler`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1153
msgid "Call the current event loop exception handler."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1155
msgid "*context* is a ``dict`` object containing the following keys (new keys may be introduced in future Python versions):"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1158
msgid "'message': Error message;"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1159
msgid "'exception' (optional): Exception object;"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1160
msgid "'future' (optional): :class:`asyncio.Future` instance;"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1161
msgid "'handle' (optional): :class:`asyncio.Handle` instance;"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1162
msgid "'protocol' (optional): :ref:`Protocol <asyncio-protocol>` instance;"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1163
msgid "'transport' (optional): :ref:`Transport <asyncio-transport>` instance;"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1164
msgid "'socket' (optional): :class:`socket.socket` instance."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1168
msgid "This method should not be overloaded in subclassed event loops.  For custom exception handling, use the :meth:`set_exception_handler()` method."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1173
msgid "Enabling debug mode"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1177
msgid "Get the debug mode (:class:`bool`) of the event loop."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1179
msgid "The default value is ``True`` if the environment variable :envvar:`PYTHONASYNCIODEBUG` is set to a non-empty string, ``False`` otherwise."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1185
msgid "Set the debug mode of the event loop."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1189
msgid "The new ``-X dev`` command line option can now also be used to enable the debug mode."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1194
msgid "The :ref:`debug mode of asyncio <asyncio-debug-mode>`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1198
msgid "Running Subprocesses"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1200
msgid "Methods described in this subsections are low-level.  In regular async/await code consider using the high-level :func:`asyncio.create_subprocess_shell` and :func:`asyncio.create_subprocess_exec` convenience functions instead."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1207
msgid "The default asyncio event loop on **Windows** does not support subprocesses. See :ref:`Subprocess Support on Windows <asyncio-windows-subprocess>` for details."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1215
msgid "Create a subprocess from one or more string arguments specified by *args*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1218
msgid "*args* must be a list of strings represented by:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1220
msgid ":class:`str`;"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1221
msgid "or :class:`bytes`, encoded to the :ref:`filesystem encoding <filesystem-encoding>`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1224
msgid "The first string specifies the program executable, and the remaining strings specify the arguments.  Together, string arguments form the ``argv`` of the program."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1228
msgid "This is similar to the standard library :class:`subprocess.Popen` class called with ``shell=False`` and the list of strings passed as the first argument; however, where :class:`~subprocess.Popen` takes a single argument which is list of strings, *subprocess_exec* takes multiple string arguments."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1234
msgid "The *protocol_factory* must be a callable returning a subclass of the :class:`asyncio.SubprocessProtocol` class."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1237
msgid "Other parameters:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1239
msgid "*stdin* can be any of these:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1241
msgid "a file-like object representing a pipe to be connected to the subprocess's standard input stream using :meth:`~loop.connect_write_pipe`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1244
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1256
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1268
msgid "the :const:`subprocess.PIPE` constant (default) which will create a new pipe and connect it,"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1246
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1258
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1270
msgid "the value ``None`` which will make the subprocess inherit the file descriptor from this process"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1248
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1260
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1272
msgid "the :const:`subprocess.DEVNULL` constant which indicates that the special :data:`os.devnull` file will be used"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1251
msgid "*stdout* can be any of these:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1253
msgid "a file-like object representing a pipe to be connected to the subprocess's standard output stream using :meth:`~loop.connect_write_pipe`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1263
msgid "*stderr* can be any of these:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1265
msgid "a file-like object representing a pipe to be connected to the subprocess's standard error stream using :meth:`~loop.connect_write_pipe`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1274
msgid "the :const:`subprocess.STDOUT` constant which will connect the standard error stream to the process' standard output stream"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1277
msgid "All other keyword arguments are passed to :class:`subprocess.Popen` without interpretation, except for *bufsize*, *universal_newlines*, *shell*, *text*, *encoding* and *errors*, which should not be specified at all."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1282
msgid "The ``asyncio`` subprocess API does not support decoding the streams as text. :func:`bytes.decode` can be used to convert the bytes returned from the stream to text."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1286
msgid "See the constructor of the :class:`subprocess.Popen` class for documentation on other arguments."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1289
msgid "Returns a pair of ``(transport, protocol)``, where *transport* conforms to the :class:`asyncio.SubprocessTransport` base class and *protocol* is an object instantiated by the *protocol_factory*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1297
msgid "Create a subprocess from *cmd*, which can be a :class:`str` or a :class:`bytes` string encoded to the :ref:`filesystem encoding <filesystem-encoding>`, using the platform's \"shell\" syntax."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1302
msgid "This is similar to the standard library :class:`subprocess.Popen` class called with ``shell=True``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1305
msgid "The *protocol_factory* must be a callable returning a subclass of the :class:`SubprocessProtocol` class."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1308
msgid "See :meth:`~loop.subprocess_exec` for more details about the remaining arguments."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1311
msgid "Returns a pair of ``(transport, protocol)``, where *transport* conforms to the :class:`SubprocessTransport` base class and *protocol* is an object instantiated by the *protocol_factory*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1316
msgid "It is the application's responsibility to ensure that all whitespace and special characters are quoted appropriately to avoid `shell injection <https://en.wikipedia.org/wiki/Shell_injection#Shell_injection>`_ vulnerabilities. The :func:`shlex.quote` function can be used to properly escape whitespace and special characters in strings that are going to be used to construct shell commands."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1325
msgid "Callback Handles"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1329
msgid "A callback wrapper object returned by :meth:`loop.call_soon`, :meth:`loop.call_soon_threadsafe`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1334
msgid "Cancel the callback.  If the callback has already been canceled or executed, this method has no effect."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1339
msgid "Return ``True`` if the callback was cancelled."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1345
msgid "A callback wrapper object returned by :meth:`loop.call_later`, and :meth:`loop.call_at`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1348
msgid "This class is a subclass of :class:`Handle`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1352
msgid "Return a scheduled callback time as :class:`float` seconds."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1354
msgid "The time is an absolute timestamp, using the same time reference as :meth:`loop.time`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1361
msgid "Server Objects"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1363
msgid "Server objects are created by :meth:`loop.create_server`, :meth:`loop.create_unix_server`, :func:`start_server`, and :func:`start_unix_server` functions."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1367
msgid "Do not instantiate the class directly."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1371
msgid "*Server* objects are asynchronous context managers.  When used in an ``async with`` statement, it's guaranteed that the Server object is closed and not accepting new connections when the ``async with`` statement is completed::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1384
msgid "Server object is an asynchronous context manager since Python 3.7."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1389
msgid "Stop serving: close listening sockets and set the :attr:`sockets` attribute to ``None``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1392
msgid "The sockets that represent existing incoming client connections are left open."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1395
msgid "The server is closed asynchronously, use the :meth:`wait_closed` coroutine to wait until the server is closed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1400
msgid "Return the event loop associated with the server object."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1406
msgid "Start accepting connections."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1408
msgid "This method is idempotent, so it can be called when the server is already being serving."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1411
msgid "The *start_serving* keyword-only parameter to :meth:`loop.create_server` and :meth:`asyncio.start_server` allows creating a Server object that is not accepting connections initially.  In this case ``Server.start_serving()``, or :meth:`Server.serve_forever` can be used to make the Server start accepting connections."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1422
msgid "Start accepting connections until the coroutine is cancelled. Cancellation of ``serve_forever`` task causes the server to be closed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1426
msgid "This method can be called if the server is already accepting connections.  Only one ``serve_forever`` task can exist per one *Server* object."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1448
msgid "Return ``True`` if the server is accepting new connections."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1454
msgid "Wait until the :meth:`close` method completes."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1458
msgid "List of :class:`socket.socket` objects the server is listening on."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1460
msgid "Prior to Python 3.7 ``Server.sockets`` used to return an internal list of server sockets directly.  In 3.7 a copy of that list is returned."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1469
msgid "Event Loop Implementations"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1471
msgid "asyncio ships with two different event loop implementations: :class:`SelectorEventLoop` and :class:`ProactorEventLoop`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1474
msgid "By default asyncio is configured to use :class:`SelectorEventLoop` on Unix and :class:`ProactorEventLoop` on Windows."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1480
msgid "An event loop based on the :mod:`selectors` module."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1482
msgid "Uses the most efficient *selector* available for the given platform.  It is also possible to manually configure the exact selector implementation to be used::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1494
msgid ":ref:`Availability <availability>`: Unix, Windows."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1499
msgid "An event loop for Windows that uses \"I/O Completion Ports\" (IOCP)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1502
msgid ":ref:`Availability <availability>`: Windows."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1505
msgid "`MSDN documentation on I/O Completion Ports <https://docs.microsoft.com/en-ca/windows/desktop/FileIO/i-o-completion-ports>`_."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1511
msgid "Abstract base class for asyncio-compliant event loops."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1513
msgid "The :ref:`Event Loop Methods <asyncio-event-loop>` section lists all methods that an alternative implementation of ``AbstractEventLoop`` should have defined."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1519
msgid "Examples"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1521
msgid "Note that all examples in this section **purposefully** show how to use the low-level event loop APIs, such as :meth:`loop.run_forever` and :meth:`loop.call_soon`.  Modern asyncio applications rarely need to be written this way; consider using the high-level functions like :func:`asyncio.run`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1531
msgid "Hello World with call_soon()"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1533
msgid "An example using the :meth:`loop.call_soon` method to schedule a callback. The callback displays ``\"Hello World\"`` and then stops the event loop::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1557
msgid "A similar :ref:`Hello World <coroutine>` example created with a coroutine and the :func:`run` function."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1564
msgid "Display the current date with call_later()"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1566
msgid "An example of a callback displaying the current date every second. The callback uses the :meth:`loop.call_later` method to reschedule itself after 5 seconds, and then stops the event loop::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1594
msgid "A similar :ref:`current date <asyncio_example_sleep>` example created with a coroutine and the :func:`run` function."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1601
msgid "Watch a file descriptor for read events"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1603
msgid "Wait until a file descriptor received some data using the :meth:`loop.add_reader` method and then close the event loop::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1641
msgid "A similar :ref:`example <asyncio_example_create_connection>` using transports, protocols, and the :meth:`loop.create_connection` method."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1645
msgid "Another similar :ref:`example <asyncio_example_create_connection-streams>` using the high-level :func:`asyncio.open_connection` function and streams."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1653
msgid "Set signal handlers for SIGINT and SIGTERM"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1655
msgid "(This ``signals`` example only works on Unix.)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/asyncio-eventloop.rst:1657
msgid "Register handlers for signals :py:data:`SIGINT` and :py:data:`SIGTERM` using the :meth:`loop.add_signal_handler` method::"
msgstr ""

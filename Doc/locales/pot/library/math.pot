# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-01 18:32+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:3
msgid ":mod:`math` --- Mathematical functions"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:12
msgid "This module is always available.  It provides access to the mathematical functions defined by the C standard."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:15
msgid "These functions cannot be used with complex numbers; use the functions of the same name from the :mod:`cmath` module if you require support for complex numbers.  The distinction between functions which support complex numbers and those which don't is made since most users do not want to learn quite as much mathematics as required to understand complex numbers.  Receiving an exception instead of a complex result allows earlier detection of the unexpected complex number used as a parameter, so that the programmer can determine how and why it was generated in the first place."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:24
msgid "The following functions are provided by this module.  Except when explicitly noted otherwise, all return values are floats."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:29
msgid "Number-theoretic and representation functions"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:33
msgid "Return the ceiling of *x* as a float, the smallest integer value greater than or equal to *x*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:39
msgid "Return *x* with the sign of *y*.  On a platform that supports signed zeros, ``copysign(1.0, -0.0)`` returns *-1.0*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:47
msgid "Return the absolute value of *x*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:52
msgid "Return *x* factorial.  Raises :exc:`ValueError` if *x* is not integral or is negative."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:60
msgid "Return the floor of *x* as a float, the largest integer value less than or equal to *x*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:66
msgid "Return ``fmod(x, y)``, as defined by the platform C library. Note that the Python expression ``x % y`` may not return the same result.  The intent of the C standard is that ``fmod(x, y)`` be exactly (mathematically; to infinite precision) equal to ``x - n*y`` for some integer *n* such that the result has the same sign as *x* and magnitude less than ``abs(y)``.  Python's ``x % y`` returns a result with the sign of *y* instead, and may not be exactly computable for float arguments. For example, ``fmod(-1e-100, 1e100)`` is ``-1e-100``, but the result of Python's ``-1e-100 % 1e100`` is ``1e100-1e-100``, which cannot be represented exactly as a float, and rounds to the surprising ``1e100``.  For this reason, function :func:`fmod` is generally preferred when working with floats, while Python's ``x % y`` is preferred when working with integers."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:81
msgid "Return the mantissa and exponent of *x* as the pair ``(m, e)``.  *m* is a float and *e* is an integer such that ``x == m * 2**e`` exactly. If *x* is zero, returns ``(0.0, 0)``, otherwise ``0.5 <= abs(m) < 1``.  This is used to \"pick apart\" the internal representation of a float in a portable way."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:89
msgid "Return an accurate floating point sum of values in the iterable.  Avoids loss of precision by tracking multiple intermediate partial sums::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:97
msgid "The algorithm's accuracy depends on IEEE-754 arithmetic guarantees and the typical case where the rounding mode is half-even.  On some non-Windows builds, the underlying C library uses extended precision addition and may occasionally double-round an intermediate sum causing it to be off in its least significant bit."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:103
msgid "For further discussion and two alternative approaches, see the `ASPN cookbook recipes for accurate floating point summation <https://code.activestate.com/recipes/393090/>`_\\."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:112
msgid "Check if the float *x* is positive or negative infinity."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:119
msgid "Check if the float *x* is a NaN (not a number).  For more information on NaNs, see the IEEE 754 standards."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:127
msgid "Return ``x * (2**i)``.  This is essentially the inverse of function :func:`frexp`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:133
msgid "Return the fractional and integer parts of *x*.  Both results carry the sign of *x* and are floats."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:139
msgid "Return the :class:`~numbers.Real` value *x* truncated to an :class:`~numbers.Integral` (usually a long integer).  Uses the ``__trunc__`` method."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:146
msgid "Note that :func:`frexp` and :func:`modf` have a different call/return pattern than their C equivalents: they take a single argument and return a pair of values, rather than returning their second return value through an 'output parameter' (there is no such thing in Python)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:151
msgid "For the :func:`ceil`, :func:`floor`, and :func:`modf` functions, note that *all* floating-point numbers of sufficiently large magnitude are exact integers. Python floats typically carry no more than 53 bits of precision (the same as the platform C double type), in which case any float *x* with ``abs(x) >= 2**52`` necessarily has no fractional bits."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:159
msgid "Power and logarithmic functions"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:163
msgid "Return ``e**x``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:168
msgid "Return ``e**x - 1``.  For small floats *x*, the subtraction in ``exp(x) - 1`` can result in a significant loss of precision; the :func:`expm1` function provides a way to compute this quantity to full precision::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:184
msgid "With one argument, return the natural logarithm of *x* (to base *e*)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:186
msgid "With two arguments, return the logarithm of *x* to the given *base*, calculated as ``log(x)/log(base)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:189
msgid "*base* argument added."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:195
msgid "Return the natural logarithm of *1+x* (base *e*). The result is calculated in a way which is accurate for *x* near zero."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:203
msgid "Return the base-10 logarithm of *x*.  This is usually more accurate than ``log(x, 10)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:209
msgid "Return ``x`` raised to the power ``y``.  Exceptional cases follow Annex 'F' of the C99 standard as far as possible.  In particular, ``pow(1.0, x)`` and ``pow(x, 0.0)`` always return ``1.0``, even when ``x`` is a zero or a NaN.  If both ``x`` and ``y`` are finite, ``x`` is negative, and ``y`` is not an integer then ``pow(x, y)`` is undefined, and raises :exc:`ValueError`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:216
msgid "Unlike the built-in ``**`` operator, :func:`math.pow` converts both its arguments to type :class:`float`.  Use ``**`` or the built-in :func:`pow` function for computing exact integer powers."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:220
msgid "The outcome of ``1**nan`` and ``nan**0`` was undefined."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:226
msgid "Return the square root of *x*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:230
msgid "Trigonometric functions"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:234
msgid "Return the arc cosine of *x*, in radians."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:239
msgid "Return the arc sine of *x*, in radians."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:244
msgid "Return the arc tangent of *x*, in radians."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:249
msgid "Return ``atan(y / x)``, in radians. The result is between ``-pi`` and ``pi``. The vector in the plane from the origin to point ``(x, y)`` makes this angle with the positive X axis. The point of :func:`atan2` is that the signs of both inputs are known to it, so it can compute the correct quadrant for the angle. For example, ``atan(1)`` and ``atan2(1, 1)`` are both ``pi/4``, but ``atan2(-1, -1)`` is ``-3*pi/4``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:259
msgid "Return the cosine of *x* radians."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:264
msgid "Return the Euclidean norm, ``sqrt(x*x + y*y)``. This is the length of the vector from the origin to point ``(x, y)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:270
msgid "Return the sine of *x* radians."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:275
msgid "Return the tangent of *x* radians."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:279
msgid "Angular conversion"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:283
msgid "Convert angle *x* from radians to degrees."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:288
msgid "Convert angle *x* from degrees to radians."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:292
msgid "Hyperbolic functions"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:296
msgid "Return the inverse hyperbolic cosine of *x*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:303
msgid "Return the inverse hyperbolic sine of *x*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:310
msgid "Return the inverse hyperbolic tangent of *x*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:317
msgid "Return the hyperbolic cosine of *x*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:322
msgid "Return the hyperbolic sine of *x*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:327
msgid "Return the hyperbolic tangent of *x*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:331
msgid "Special functions"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:335
msgid "Return the error function at *x*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:342
msgid "Return the complementary error function at *x*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:349
msgid "Return the Gamma function at *x*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:356
msgid "Return the natural logarithm of the absolute value of the Gamma function at *x*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:363
msgid "Constants"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:367
msgid "The mathematical constant π = 3.141592..., to available precision."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:372
msgid "The mathematical constant e = 2.718281..., to available precision."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:377
msgid "The :mod:`math` module consists mostly of thin wrappers around the platform C math library functions.  Behavior in exceptional cases follows Annex F of the C99 standard where appropriate.  The current implementation will raise :exc:`ValueError` for invalid operations like ``sqrt(-1.0)`` or ``log(0.0)`` (where C99 Annex F recommends signaling invalid operation or divide-by-zero), and :exc:`OverflowError` for results that overflow (for example, ``exp(1000.0)``).  A NaN will not be returned from any of the functions above unless one or more of the input arguments was a NaN; in that case, most functions will return a NaN, but (again following C99 Annex F) there are some exceptions to this rule, for example ``pow(float('nan'), 0.0)`` or ``hypot(float('nan'), float('inf'))``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:389
msgid "Note that Python makes no effort to distinguish signaling NaNs from quiet NaNs, and behavior for signaling NaNs remains unspecified. Typical behavior is to treat all NaNs as though they were quiet."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:393
msgid "Behavior in special cases now aims to follow C99 Annex F.  In earlier versions of Python the behavior in special cases was loosely specified."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:400
msgid "Module :mod:`cmath`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/math.rst:401
msgid "Complex number versions of many of these functions."
msgstr ""

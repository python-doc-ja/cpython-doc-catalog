# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-12 17:03+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/select.rst:3
msgid ":mod:`select` --- Waiting for I/O completion"
msgstr ""

#: ../../library/select.rst:9
msgid "This module provides access to the :c:func:`select` and :c:func:`poll` functions available in most operating systems, :c:func:`epoll` available on Linux 2.5+ and :c:func:`kqueue` available on most BSD. Note that on Windows, it only works for sockets; on other operating systems, it also works for other file types (in particular, on Unix, it works on pipes). It cannot be used on regular files to determine whether a file has grown since it was last read."
msgstr ""

#: ../../library/select.rst:17
msgid "The module defines the following:"
msgstr ""

#: ../../library/select.rst:22
msgid "The exception raised when an error occurs.  The accompanying value is a pair containing the numeric error code from :c:data:`errno` and the corresponding string, as would be printed by the C function :c:func:`perror`."
msgstr ""

#: ../../library/select.rst:29
msgid "(Only supported on Linux 2.5.44 and newer.)  Returns an edge polling object, which can be used as Edge or Level Triggered interface for I/O events; see section :ref:`epoll-objects` below for the methods supported by epolling objects."
msgstr ""

#: ../../library/select.rst:39
msgid "(Not supported by all operating systems.)  Returns a polling object, which supports registering and unregistering file descriptors, and then polling them for I/O events; see section :ref:`poll-objects` below for the methods supported by polling objects."
msgstr ""

#: ../../library/select.rst:47
msgid "(Only supported on BSD.)  Returns a kernel queue object; see section :ref:`kqueue-objects` below for the methods supported by kqueue objects."
msgstr ""

#: ../../library/select.rst:55
msgid "(Only supported on BSD.)  Returns a kernel event object; see section :ref:`kevent-objects` below for the methods supported by kevent objects."
msgstr ""

#: ../../library/select.rst:63
msgid "This is a straightforward interface to the Unix :c:func:`select` system call. The first three arguments are sequences of 'waitable objects': either integers representing file descriptors or objects with a parameterless method named :meth:`~io.IOBase.fileno` returning such an integer:"
msgstr ""

#: ../../library/select.rst:68
msgid "*rlist*: wait until ready for reading"
msgstr ""

#: ../../library/select.rst:69
msgid "*wlist*: wait until ready for writing"
msgstr ""

#: ../../library/select.rst:70
msgid "*xlist*: wait for an \"exceptional condition\" (see the manual page for what your system considers such a condition)"
msgstr ""

#: ../../library/select.rst:73
msgid "Empty sequences are allowed, but acceptance of three empty sequences is platform-dependent. (It is known to work on Unix but not on Windows.)  The optional *timeout* argument specifies a time-out as a floating point number in seconds.  When the *timeout* argument is omitted the function blocks until at least one file descriptor is ready.  A time-out value of zero specifies a poll and never blocks."
msgstr ""

#: ../../library/select.rst:80
msgid "The return value is a triple of lists of objects that are ready: subsets of the first three arguments.  When the time-out is reached without a file descriptor becoming ready, three empty lists are returned."
msgstr ""

#: ../../library/select.rst:88
msgid "Among the acceptable object types in the sequences are Python file objects (e.g. ``sys.stdin``, or objects returned by :func:`open` or :func:`os.popen`), socket objects returned by :func:`socket.socket`.  You may also define a :dfn:`wrapper` class yourself, as long as it has an appropriate :meth:`~io.IOBase.fileno` method (that really returns a file descriptor, not just a random integer)."
msgstr ""

#: ../../library/select.rst:98
msgid "File objects on Windows are not acceptable, but sockets are.  On Windows, the underlying :c:func:`select` function is provided by the WinSock library, and does not handle file descriptors that don't originate from WinSock."
msgstr ""

#: ../../library/select.rst:105
msgid "Files reported as ready for writing by :func:`select`, :func:`poll` or similar interfaces in this module are guaranteed to not block on a write of up to :const:`PIPE_BUF` bytes. This value is guaranteed by POSIX to be at least 512.  Availability: Unix."
msgstr ""

#: ../../library/select.rst:116
msgid "Edge and Level Trigger Polling (epoll) Objects"
msgstr ""

#: ../../library/select.rst:118
msgid "http://linux.die.net/man/4/epoll"
msgstr ""

#: ../../library/select.rst:120
msgid "*eventmask*"
msgstr ""

#: ../../library/select.rst:123
#: ../../library/select.rst:221
#: ../../library/select.rst:323
#: ../../library/select.rst:352
#: ../../library/select.rst:383
#: ../../library/select.rst:391
#: ../../library/select.rst:411
#: ../../library/select.rst:434
msgid "Constant"
msgstr ""

#: ../../library/select.rst:123
#: ../../library/select.rst:221
#: ../../library/select.rst:323
#: ../../library/select.rst:352
#: ../../library/select.rst:383
#: ../../library/select.rst:391
#: ../../library/select.rst:411
#: ../../library/select.rst:434
msgid "Meaning"
msgstr ""

#: ../../library/select.rst:125
msgid ":const:`EPOLLIN`"
msgstr ""

#: ../../library/select.rst:125
msgid "Available for read"
msgstr ""

#: ../../library/select.rst:127
msgid ":const:`EPOLLOUT`"
msgstr ""

#: ../../library/select.rst:127
msgid "Available for write"
msgstr ""

#: ../../library/select.rst:129
msgid ":const:`EPOLLPRI`"
msgstr ""

#: ../../library/select.rst:129
msgid "Urgent data for read"
msgstr ""

#: ../../library/select.rst:131
msgid ":const:`EPOLLERR`"
msgstr ""

#: ../../library/select.rst:131
msgid "Error condition happened on the assoc. fd"
msgstr ""

#: ../../library/select.rst:133
msgid ":const:`EPOLLHUP`"
msgstr ""

#: ../../library/select.rst:133
msgid "Hang up happened on the assoc. fd"
msgstr ""

#: ../../library/select.rst:135
msgid ":const:`EPOLLET`"
msgstr ""

#: ../../library/select.rst:135
msgid "Set Edge Trigger behavior, the default is Level Trigger behavior"
msgstr ""

#: ../../library/select.rst:138
msgid ":const:`EPOLLONESHOT`"
msgstr ""

#: ../../library/select.rst:138
msgid "Set one-shot behavior. After one event is pulled out, the fd is internally disabled"
msgstr ""

#: ../../library/select.rst:141
msgid ":const:`EPOLLRDNORM`"
msgstr ""

#: ../../library/select.rst:141
msgid "Equivalent to :const:`EPOLLIN`"
msgstr ""

#: ../../library/select.rst:143
msgid ":const:`EPOLLRDBAND`"
msgstr ""

#: ../../library/select.rst:143
msgid "Priority data band can be read."
msgstr ""

#: ../../library/select.rst:145
msgid ":const:`EPOLLWRNORM`"
msgstr ""

#: ../../library/select.rst:145
msgid "Equivalent to :const:`EPOLLOUT`"
msgstr ""

#: ../../library/select.rst:147
msgid ":const:`EPOLLWRBAND`"
msgstr ""

#: ../../library/select.rst:147
msgid "Priority data may be written."
msgstr ""

#: ../../library/select.rst:149
msgid ":const:`EPOLLMSG`"
msgstr ""

#: ../../library/select.rst:149
msgid "Ignored."
msgstr ""

#: ../../library/select.rst:155
msgid "Close the control file descriptor of the epoll object."
msgstr ""

#: ../../library/select.rst:160
#: ../../library/select.rst:286
msgid "Return the file descriptor number of the control fd."
msgstr ""

#: ../../library/select.rst:165
msgid "Create an epoll object from a given file descriptor."
msgstr ""

#: ../../library/select.rst:170
msgid "Register a fd descriptor with the epoll object."
msgstr ""

#: ../../library/select.rst:174
msgid "Registering a file descriptor that's already registered raises an IOError -- contrary to :ref:`poll-objects`'s register."
msgstr ""

#: ../../library/select.rst:180
msgid "Modify a register file descriptor."
msgstr ""

#: ../../library/select.rst:185
msgid "Remove a registered file descriptor from the epoll object."
msgstr ""

#: ../../library/select.rst:190
msgid "Wait for events. timeout in seconds (float)"
msgstr ""

#: ../../library/select.rst:196
msgid "Polling Objects"
msgstr ""

#: ../../library/select.rst:198
msgid "The :c:func:`poll` system call, supported on most Unix systems, provides better scalability for network servers that service many, many clients at the same time. :c:func:`poll` scales better because the system call only requires listing the file descriptors of interest, while :c:func:`select` builds a bitmap, turns on bits for the fds of interest, and then afterward the whole bitmap has to be linearly scanned again. :c:func:`select` is O(highest file descriptor), while :c:func:`poll` is O(number of file descriptors)."
msgstr ""

#: ../../library/select.rst:209
msgid "Register a file descriptor with the polling object.  Future calls to the :meth:`poll` method will then check whether the file descriptor has any pending I/O events.  *fd* can be either an integer, or an object with a :meth:`~io.IOBase.fileno` method that returns an integer.  File objects implement :meth:`!fileno`, so they can also be used as the argument."
msgstr ""

#: ../../library/select.rst:215
msgid "*eventmask* is an optional bitmask describing the type of events you want to check for, and can be a combination of the constants :const:`POLLIN`, :const:`POLLPRI`, and :const:`POLLOUT`, described in the table below.  If not specified, the default value used will check for all 3 types of events."
msgstr ""

#: ../../library/select.rst:223
msgid ":const:`POLLIN`"
msgstr ""

#: ../../library/select.rst:223
msgid "There is data to read"
msgstr ""

#: ../../library/select.rst:225
msgid ":const:`POLLPRI`"
msgstr ""

#: ../../library/select.rst:225
msgid "There is urgent data to read"
msgstr ""

#: ../../library/select.rst:227
msgid ":const:`POLLOUT`"
msgstr ""

#: ../../library/select.rst:227
msgid "Ready for output: writing will not block"
msgstr ""

#: ../../library/select.rst:229
msgid ":const:`POLLERR`"
msgstr ""

#: ../../library/select.rst:229
msgid "Error condition of some sort"
msgstr ""

#: ../../library/select.rst:231
msgid ":const:`POLLHUP`"
msgstr ""

#: ../../library/select.rst:231
msgid "Hung up"
msgstr ""

#: ../../library/select.rst:233
msgid ":const:`POLLNVAL`"
msgstr ""

#: ../../library/select.rst:233
msgid "Invalid request: descriptor not open"
msgstr ""

#: ../../library/select.rst:236
msgid "Registering a file descriptor that's already registered is not an error, and has the same effect as registering the descriptor exactly once."
msgstr ""

#: ../../library/select.rst:242
msgid "Modifies an already registered fd. This has the same effect as ``register(fd, eventmask)``.  Attempting to modify a file descriptor that was never registered causes an :exc:`IOError` exception with errno :const:`ENOENT` to be raised."
msgstr ""

#: ../../library/select.rst:252
msgid "Remove a file descriptor being tracked by a polling object.  Just like the :meth:`register` method, *fd* can be an integer or an object with a :meth:`~io.IOBase.fileno` method that returns an integer."
msgstr ""

#: ../../library/select.rst:256
msgid "Attempting to remove a file descriptor that was never registered causes a :exc:`KeyError` exception to be raised."
msgstr ""

#: ../../library/select.rst:262
msgid "Polls the set of registered file descriptors, and returns a possibly-empty list containing ``(fd, event)`` 2-tuples for the descriptors that have events or errors to report. *fd* is the file descriptor, and *event* is a bitmask with bits set for the reported events for that descriptor --- :const:`POLLIN` for waiting input, :const:`POLLOUT` to indicate that the descriptor can be written to, and so forth. An empty list indicates that the call timed out and no file descriptors had any events to report. If *timeout* is given, it specifies the length of time in milliseconds which the system will wait for events before returning. If *timeout* is omitted, negative, or :const:`None`, the call will block until there is an event for this poll object."
msgstr ""

#: ../../library/select.rst:277
msgid "Kqueue Objects"
msgstr ""

#: ../../library/select.rst:281
msgid "Close the control file descriptor of the kqueue object."
msgstr ""

#: ../../library/select.rst:291
msgid "Create a kqueue object from a given file descriptor."
msgstr ""

#: ../../library/select.rst:296
msgid "Low level interface to kevent"
msgstr ""

#: ../../library/select.rst:298
msgid "changelist must be an iterable of kevent objects or ``None``"
msgstr ""

#: ../../library/select.rst:299
msgid "max_events must be 0 or a positive integer"
msgstr ""

#: ../../library/select.rst:300
msgid "timeout in seconds (floats possible); the default is ``None``, to wait forever"
msgstr ""

#: ../../library/select.rst:307
msgid "Kevent Objects"
msgstr ""

#: ../../library/select.rst:309
msgid "https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2"
msgstr ""

#: ../../library/select.rst:313
msgid "Value used to identify the event. The interpretation depends on the filter but it's usually the file descriptor. In the constructor ident can either be an int or an object with a fileno() function. kevent stores the integer internally."
msgstr ""

#: ../../library/select.rst:320
msgid "Name of the kernel filter."
msgstr ""

#: ../../library/select.rst:325
msgid ":const:`KQ_FILTER_READ`"
msgstr ""

#: ../../library/select.rst:325
msgid "Takes a descriptor and returns whenever there is data available to read"
msgstr ""

#: ../../library/select.rst:328
msgid ":const:`KQ_FILTER_WRITE`"
msgstr ""

#: ../../library/select.rst:328
msgid "Takes a descriptor and returns whenever there is data available to write"
msgstr ""

#: ../../library/select.rst:331
msgid ":const:`KQ_FILTER_AIO`"
msgstr ""

#: ../../library/select.rst:331
msgid "AIO requests"
msgstr ""

#: ../../library/select.rst:333
msgid ":const:`KQ_FILTER_VNODE`"
msgstr ""

#: ../../library/select.rst:333
msgid "Returns when one or more of the requested events watched in *fflag* occurs"
msgstr ""

#: ../../library/select.rst:336
msgid ":const:`KQ_FILTER_PROC`"
msgstr ""

#: ../../library/select.rst:336
msgid "Watch for events on a process id"
msgstr ""

#: ../../library/select.rst:338
msgid ":const:`KQ_FILTER_NETDEV`"
msgstr ""

#: ../../library/select.rst:338
msgid "Watch for events on a network device [not available on Mac OS X]"
msgstr ""

#: ../../library/select.rst:341
msgid ":const:`KQ_FILTER_SIGNAL`"
msgstr ""

#: ../../library/select.rst:341
msgid "Returns whenever the watched signal is delivered to the process"
msgstr ""

#: ../../library/select.rst:344
msgid ":const:`KQ_FILTER_TIMER`"
msgstr ""

#: ../../library/select.rst:344
msgid "Establishes an arbitrary timer"
msgstr ""

#: ../../library/select.rst:349
msgid "Filter action."
msgstr ""

#: ../../library/select.rst:354
msgid ":const:`KQ_EV_ADD`"
msgstr ""

#: ../../library/select.rst:354
msgid "Adds or modifies an event"
msgstr ""

#: ../../library/select.rst:356
msgid ":const:`KQ_EV_DELETE`"
msgstr ""

#: ../../library/select.rst:356
msgid "Removes an event from the queue"
msgstr ""

#: ../../library/select.rst:358
msgid ":const:`KQ_EV_ENABLE`"
msgstr ""

#: ../../library/select.rst:358
msgid "Permitscontrol() to returns the event"
msgstr ""

#: ../../library/select.rst:360
msgid ":const:`KQ_EV_DISABLE`"
msgstr ""

#: ../../library/select.rst:360
msgid "Disablesevent"
msgstr ""

#: ../../library/select.rst:362
msgid ":const:`KQ_EV_ONESHOT`"
msgstr ""

#: ../../library/select.rst:362
msgid "Removes event after first occurrence"
msgstr ""

#: ../../library/select.rst:364
msgid ":const:`KQ_EV_CLEAR`"
msgstr ""

#: ../../library/select.rst:364
msgid "Reset the state after an event is retrieved"
msgstr ""

#: ../../library/select.rst:366
msgid ":const:`KQ_EV_SYSFLAGS`"
msgstr ""

#: ../../library/select.rst:366
#: ../../library/select.rst:368
msgid "internal event"
msgstr ""

#: ../../library/select.rst:368
msgid ":const:`KQ_EV_FLAG1`"
msgstr ""

#: ../../library/select.rst:370
msgid ":const:`KQ_EV_EOF`"
msgstr ""

#: ../../library/select.rst:370
msgid "Filter specific EOF condition"
msgstr ""

#: ../../library/select.rst:372
msgid ":const:`KQ_EV_ERROR`"
msgstr ""

#: ../../library/select.rst:372
msgid "See return values"
msgstr ""

#: ../../library/select.rst:378
msgid "Filter specific flags."
msgstr ""

#: ../../library/select.rst:380
msgid ":const:`KQ_FILTER_READ` and  :const:`KQ_FILTER_WRITE` filter flags:"
msgstr ""

#: ../../library/select.rst:385
msgid ":const:`KQ_NOTE_LOWAT`"
msgstr ""

#: ../../library/select.rst:385
msgid "low water mark of a socket buffer"
msgstr ""

#: ../../library/select.rst:388
msgid ":const:`KQ_FILTER_VNODE` filter flags:"
msgstr ""

#: ../../library/select.rst:393
msgid ":const:`KQ_NOTE_DELETE`"
msgstr ""

#: ../../library/select.rst:393
msgid "*unlink()* was called"
msgstr ""

#: ../../library/select.rst:395
msgid ":const:`KQ_NOTE_WRITE`"
msgstr ""

#: ../../library/select.rst:395
msgid "a write occurred"
msgstr ""

#: ../../library/select.rst:397
msgid ":const:`KQ_NOTE_EXTEND`"
msgstr ""

#: ../../library/select.rst:397
msgid "the file was extended"
msgstr ""

#: ../../library/select.rst:399
msgid ":const:`KQ_NOTE_ATTRIB`"
msgstr ""

#: ../../library/select.rst:399
msgid "an attribute was changed"
msgstr ""

#: ../../library/select.rst:401
msgid ":const:`KQ_NOTE_LINK`"
msgstr ""

#: ../../library/select.rst:401
msgid "the link count has changed"
msgstr ""

#: ../../library/select.rst:403
msgid ":const:`KQ_NOTE_RENAME`"
msgstr ""

#: ../../library/select.rst:403
msgid "the file was renamed"
msgstr ""

#: ../../library/select.rst:405
msgid ":const:`KQ_NOTE_REVOKE`"
msgstr ""

#: ../../library/select.rst:405
msgid "access to the file was revoked"
msgstr ""

#: ../../library/select.rst:408
msgid ":const:`KQ_FILTER_PROC` filter flags:"
msgstr ""

#: ../../library/select.rst:413
msgid ":const:`KQ_NOTE_EXIT`"
msgstr ""

#: ../../library/select.rst:413
msgid "the process has exited"
msgstr ""

#: ../../library/select.rst:415
msgid ":const:`KQ_NOTE_FORK`"
msgstr ""

#: ../../library/select.rst:415
msgid "the process has called *fork()*"
msgstr ""

#: ../../library/select.rst:417
msgid ":const:`KQ_NOTE_EXEC`"
msgstr ""

#: ../../library/select.rst:417
msgid "the process has executed a new process"
msgstr ""

#: ../../library/select.rst:419
msgid ":const:`KQ_NOTE_PCTRLMASK`"
msgstr ""

#: ../../library/select.rst:419
#: ../../library/select.rst:421
msgid "internal filter flag"
msgstr ""

#: ../../library/select.rst:421
msgid ":const:`KQ_NOTE_PDATAMASK`"
msgstr ""

#: ../../library/select.rst:423
msgid ":const:`KQ_NOTE_TRACK`"
msgstr ""

#: ../../library/select.rst:423
msgid "follow a process across *fork()*"
msgstr ""

#: ../../library/select.rst:425
msgid ":const:`KQ_NOTE_CHILD`"
msgstr ""

#: ../../library/select.rst:425
msgid "returned on the child process for *NOTE_TRACK*"
msgstr ""

#: ../../library/select.rst:428
msgid ":const:`KQ_NOTE_TRACKERR`"
msgstr ""

#: ../../library/select.rst:428
msgid "unable to attach to a child"
msgstr ""

#: ../../library/select.rst:431
msgid ":const:`KQ_FILTER_NETDEV` filter flags (not available on Mac OS X):"
msgstr ""

#: ../../library/select.rst:436
msgid ":const:`KQ_NOTE_LINKUP`"
msgstr ""

#: ../../library/select.rst:436
msgid "link is up"
msgstr ""

#: ../../library/select.rst:438
msgid ":const:`KQ_NOTE_LINKDOWN`"
msgstr ""

#: ../../library/select.rst:438
msgid "link is down"
msgstr ""

#: ../../library/select.rst:440
msgid ":const:`KQ_NOTE_LINKINV`"
msgstr ""

#: ../../library/select.rst:440
msgid "link state is invalid"
msgstr ""

#: ../../library/select.rst:446
msgid "Filter specific data."
msgstr ""

#: ../../library/select.rst:451
msgid "User defined value."
msgstr ""


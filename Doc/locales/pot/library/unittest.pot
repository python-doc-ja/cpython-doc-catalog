# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-17 18:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2
msgid ":mod:`unittest` --- Unit testing framework"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:12
msgid "**Source code:** :source:`Lib/unittest/__init__.py`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:16
msgid "(If you are already familiar with the basic concepts of testing, you might want to skip to :ref:`the list of assert methods <assert-methods>`.)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:19
msgid "The :mod:`unittest` unit testing framework was originally inspired by JUnit and has a similar flavor as major unit testing frameworks in other languages.  It supports test automation, sharing of setup and shutdown code for tests, aggregation of tests into collections, and independence of the tests from the reporting framework."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:25
msgid "To achieve this, :mod:`unittest` supports some important concepts in an object-oriented way:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:32
msgid "test fixture"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:29
msgid "A :dfn:`test fixture` represents the preparation needed to perform one or more tests, and any associate cleanup actions.  This may involve, for example, creating temporary or proxy databases, directories, or starting a server process."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:37
msgid "test case"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:35
msgid "A :dfn:`test case` is the individual unit of testing.  It checks for a specific response to a particular set of inputs.  :mod:`unittest` provides a base class, :class:`TestCase`, which may be used to create new test cases."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:41
msgid "test suite"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:40
msgid "A :dfn:`test suite` is a collection of test cases, test suites, or both.  It is used to aggregate tests that should be executed together."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:48
msgid "test runner"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:44
msgid "A :dfn:`test runner` is a component which orchestrates the execution of tests and provides the outcome to the user.  The runner may use a graphical interface, a textual interface, or return a special value to indicate the results of executing the tests."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:53
msgid "Module :mod:`doctest`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:53
msgid "Another test-support module with a very different flavor."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:57
msgid "`Simple Smalltalk Testing: With Patterns <https://web.archive.org/web/20150315073817/http://www.xprogramming.com/testfram.htm>`_"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:56
msgid "Kent Beck's original paper on testing frameworks using the pattern shared by :mod:`unittest`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:61
msgid "`Nose <https://nose.readthedocs.io/>`_ and `pytest <https://docs.pytest.org/>`_"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:60
msgid "Third-party unittest frameworks with a lighter-weight syntax for writing tests.  For example, ``assert func(10) == 42``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:65
msgid "`The Python Testing Tools Taxonomy <https://wiki.python.org/moin/PythonTestingToolsTaxonomy>`_"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:64
msgid "An extensive list of Python testing tools including functional testing frameworks and mock object libraries."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:69
msgid "`Testing in Python Mailing List <http://lists.idyll.org/listinfo/testing-in-python>`_"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:68
msgid "A special-interest-group for discussion of testing, and testing tools, in Python."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:71
msgid "The script :file:`Tools/unittestgui/unittestgui.py` in the Python source distribution is a GUI tool for test discovery and execution.  This is intended largely for ease of use for those new to unit testing.  For production environments it is recommended that tests be driven by a continuous integration system such as `Buildbot <https://buildbot.net/>`_, `Jenkins <https://jenkins.io/>`_ or  `Hudson <http://hudson-ci.org/>`_."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:82
msgid "Basic example"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:84
msgid "The :mod:`unittest` module provides a rich set of tools for constructing and running tests.  This section demonstrates that a small subset of the tools suffice to meet the needs of most users."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:88
msgid "Here is a short script to test three string methods::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:112
msgid "A testcase is created by subclassing :class:`unittest.TestCase`.  The three individual tests are defined with methods whose names start with the letters ``test``.  This naming convention informs the test runner about which methods represent tests."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:117
msgid "The crux of each test is a call to :meth:`~TestCase.assertEqual` to check for an expected result; :meth:`~TestCase.assertTrue` or :meth:`~TestCase.assertFalse` to verify a condition; or :meth:`~TestCase.assertRaises` to verify that a specific exception gets raised.  These methods are used instead of the :keyword:`assert` statement so the test runner can accumulate all test results and produce a report."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:124
msgid "The :meth:`~TestCase.setUp` and :meth:`~TestCase.tearDown` methods allow you to define instructions that will be executed before and after each test method. They are covered in more detail in the section :ref:`organizing-tests`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:128
msgid "The final block shows a simple way to run the tests. :func:`unittest.main` provides a command-line interface to the test script.  When run from the command line, the above script produces an output that looks like this::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:138
msgid "Passing the ``-v`` option to your test script will instruct :func:`unittest.main` to enable a higher level of verbosity, and produce the following output::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:150
msgid "The above examples show the most commonly used :mod:`unittest` features which are sufficient to meet many everyday testing needs.  The remainder of the documentation explores the full feature set from first principles."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:158
msgid "Command-Line Interface"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:160
msgid "The unittest module can be used from the command line to run tests from modules, classes or even individual test methods::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:167
msgid "You can pass in a list with any combination of module names, and fully qualified class or method names."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:170
msgid "Test modules can be specified by file path as well::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:174
msgid "This allows you to use the shell filename completion to specify the test module. The file specified must still be importable as a module. The path is converted to a module name by removing the '.py' and converting path separators into '.'. If you want to execute a test file that isn't importable as a module you should execute the file directly instead."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:180
msgid "You can run tests with more detail (higher verbosity) by passing in the -v flag::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:184
msgid "When executed without arguments :ref:`unittest-test-discovery` is started::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:188
msgid "For a list of all the command-line options::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:192
msgid "In earlier versions it was only possible to run individual test methods and not modules or classes."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:198
msgid "Command-line options"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:200
msgid ":program:`unittest` supports these command-line options:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:206
msgid "The standard output and standard error streams are buffered during the test run. Output during a passing test is discarded. Output is echoed normally on test fail or error and is added to the failure messages."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:212
msgid ":kbd:`Control-C` during the test run waits for the current test to end and then reports all the results so far. A second :kbd:`Control-C` raises the normal :exc:`KeyboardInterrupt` exception."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:216
msgid "See `Signal Handling`_ for the functions that provide this functionality."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:220
msgid "Stop the test run on the first error or failure."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:224
msgid "Show local variables in tracebacks."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:226
msgid "The command-line options ``-b``, ``-c`` and ``-f`` were added."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:229
msgid "The command-line option ``--locals``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:232
msgid "The command line can also be used for test discovery, for running all of the tests in a project or just a subset."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:239
msgid "Test Discovery"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:243
msgid "Unittest supports simple test discovery. In order to be compatible with test discovery, all of the test files must be :ref:`modules <tut-modules>` or :ref:`packages <tut-packages>` (including :term:`namespace packages <namespace package>`) importable from the top-level directory of the project (this means that their filenames must be valid :ref:`identifiers <identifiers>`)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:250
msgid "Test discovery is implemented in :meth:`TestLoader.discover`, but can also be used from the command line. The basic command-line usage is::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:258
msgid "As a shortcut, ``python -m unittest`` is the equivalent of ``python -m unittest discover``. If you want to pass arguments to test discovery the ``discover`` sub-command must be used explicitly."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:262
msgid "The ``discover`` sub-command has the following options:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:268
msgid "Verbose output"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:272
msgid "Directory to start discovery (``.`` default)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:276
msgid "Pattern to match test files (``test*.py`` default)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:280
msgid "Top level directory of project (defaults to start directory)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:282
msgid "The :option:`-s`, :option:`-p`, and :option:`-t` options can be passed in as positional arguments in that order. The following two command lines are equivalent::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:289
msgid "As well as being a path it is possible to pass a package name, for example ``myproject.subpackage.test``, as the start directory. The package name you supply will then be imported and its location on the filesystem will be used as the start directory."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:296
msgid "Test discovery loads tests by importing them. Once test discovery has found all the test files from the start directory you specify it turns the paths into package names to import. For example :file:`foo/bar/baz.py` will be imported as ``foo.bar.baz``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:301
msgid "If you have a package installed globally and attempt test discovery on a different copy of the package then the import *could* happen from the wrong place. If this happens test discovery will warn you and exit."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:305
msgid "If you supply the start directory as a package name rather than a path to a directory then discover assumes that whichever location it imports from is the location you intended, so you will not get the warning."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:310
msgid "Test modules and packages can customize test loading and discovery by through the `load_tests protocol`_."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:313
msgid "Test discovery supports :term:`namespace packages <namespace package>`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:320
msgid "Organizing test code"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:322
msgid "The basic building blocks of unit testing are :dfn:`test cases` --- single scenarios that must be set up and checked for correctness.  In :mod:`unittest`, test cases are represented by :class:`unittest.TestCase` instances. To make your own test cases you must write subclasses of :class:`TestCase` or use :class:`FunctionTestCase`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:328
msgid "The testing code of a :class:`TestCase` instance should be entirely self contained, such that it can be run either in isolation or in arbitrary combination with any number of other test cases."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:332
msgid "The simplest :class:`TestCase` subclass will simply implement a test method (i.e. a method whose name starts with ``test``) in order to perform specific testing code::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:343
msgid "Note that in order to test something, we use one of the :meth:`assert\\*` methods provided by the :class:`TestCase` base class.  If the test fails, an exception will be raised with an explanatory message, and :mod:`unittest` will identify the test case as a :dfn:`failure`.  Any other exceptions will be treated as :dfn:`errors`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:349
msgid "Tests can be numerous, and their set-up can be repetitive.  Luckily, we can factor out set-up code by implementing a method called :meth:`~TestCase.setUp`, which the testing framework will automatically call for every single test we run::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:370
msgid "The order in which the various tests will be run is determined by sorting the test method names with respect to the built-in ordering for strings."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:374
msgid "If the :meth:`~TestCase.setUp` method raises an exception while the test is running, the framework will consider the test to have suffered an error, and the test method will not be executed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:378
msgid "Similarly, we can provide a :meth:`~TestCase.tearDown` method that tidies up after the test method has been run::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:390
msgid "If :meth:`~TestCase.setUp` succeeded, :meth:`~TestCase.tearDown` will be run whether the test method succeeded or not."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:393
msgid "Such a working environment for the testing code is called a :dfn:`test fixture`.  A new TestCase instance is created as a unique test fixture used to execute each individual test method.  Thus :meth:`~TestCase.setUp`, :meth:`~TestCase.tearDown`, and :meth:`~TestCase.__init__` will be called once per test."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:399
msgid "It is recommended that you use TestCase implementations to group tests together according to the features they test.  :mod:`unittest` provides a mechanism for this: the :dfn:`test suite`, represented by :mod:`unittest`'s :class:`TestSuite` class.  In most cases, calling :func:`unittest.main` will do the right thing and collect all the module's test cases for you and execute them."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:406
msgid "However, should you want to customize the building of your test suite, you can do it yourself::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:419
msgid "You can place the definitions of test cases and test suites in the same modules as the code they are to test (such as :file:`widget.py`), but there are several advantages to placing the test code in a separate module, such as :file:`test_widget.py`:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:424
msgid "The test module can be run standalone from the command line."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:426
msgid "The test code can more easily be separated from shipped code."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:428
msgid "There is less temptation to change test code to fit the code it tests without a good reason."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:431
msgid "Test code should be modified much less frequently than the code it tests."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:433
msgid "Tested code can be refactored more easily."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:435
msgid "Tests for modules written in C must be in separate modules anyway, so why not be consistent?"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:438
msgid "If the testing strategy changes, there is no need to change the source code."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:444
msgid "Re-using old test code"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:446
msgid "Some users will find that they have existing test code that they would like to run from :mod:`unittest`, without converting every old test function to a :class:`TestCase` subclass."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:450
msgid "For this reason, :mod:`unittest` provides a :class:`FunctionTestCase` class. This subclass of :class:`TestCase` can be used to wrap an existing test function.  Set-up and tear-down functions can also be provided."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:454
msgid "Given the following test function::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:461
msgid "one can create an equivalent test case instance as follows, with optional set-up and tear-down methods::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:470
msgid "Even though :class:`FunctionTestCase` can be used to quickly convert an existing test base over to a :mod:`unittest`\\ -based system, this approach is not recommended.  Taking the time to set up proper :class:`TestCase` subclasses will make future test refactorings infinitely easier."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:475
msgid "In some cases, the existing tests may have been written using the :mod:`doctest` module.  If so, :mod:`doctest` provides a :class:`DocTestSuite` class that can automatically build :class:`unittest.TestSuite` instances from the existing :mod:`doctest`\\ -based tests."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:484
msgid "Skipping tests and expected failures"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:488
msgid "Unittest supports skipping individual test methods and even whole classes of tests.  In addition, it supports marking a test as an \"expected failure,\" a test that is broken and will fail, but shouldn't be counted as a failure on a :class:`TestResult`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:493
msgid "Skipping a test is simply a matter of using the :func:`skip` :term:`decorator` or one of its conditional variants."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:496
msgid "Basic skipping looks like this::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:515
msgid "This is the output of running the example above in verbose mode::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:526
msgid "Classes can be skipped just like methods::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:533
msgid ":meth:`TestCase.setUp` can also skip the test.  This is useful when a resource that needs to be set up is not available."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:536
msgid "Expected failures use the :func:`expectedFailure` decorator. ::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:543
msgid "It's easy to roll your own skipping decorators by making a decorator that calls :func:`skip` on the test when it wants it to be skipped.  This decorator skips the test unless the passed object has a certain attribute::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:552
msgid "The following decorators implement test skipping and expected failures:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:556
msgid "Unconditionally skip the decorated test.  *reason* should describe why the test is being skipped."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:561
msgid "Skip the decorated test if *condition* is true."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:565
msgid "Skip the decorated test unless *condition* is true."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:569
msgid "Mark the test as an expected failure.  If the test fails when run, the test is not counted as a failure."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:574
msgid "This exception is raised to skip a test."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:576
msgid "Usually you can use :meth:`TestCase.skipTest` or one of the skipping decorators instead of raising this directly."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:579
msgid "Skipped tests will not have :meth:`~TestCase.setUp` or :meth:`~TestCase.tearDown` run around them. Skipped classes will not have :meth:`~TestCase.setUpClass` or :meth:`~TestCase.tearDownClass` run. Skipped modules will not have :func:`setUpModule` or :func:`tearDownModule` run."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:587
msgid "Distinguishing test iterations using subtests"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:591
msgid "When there are very small differences among your tests, for instance some parameters, unittest allows you to distinguish them inside the body of a test method using the :meth:`~TestCase.subTest` context manager."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:595
msgid "For example, the following test::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:607
msgid "will produce the following output::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:633
msgid "Without using a subtest, execution would stop after the first failure, and the error would be less easy to diagnose because the value of ``i`` wouldn't be displayed::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:649
msgid "Classes and functions"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:651
msgid "This section describes in depth the API of :mod:`unittest`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:657
msgid "Test cases"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:661
msgid "Instances of the :class:`TestCase` class represent the logical test units in the :mod:`unittest` universe.  This class is intended to be used as a base class, with specific tests being implemented by concrete subclasses.  This class implements the interface needed by the test runner to allow it to drive the tests, and methods that the test code can use to check for and report various kinds of failure."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:668
msgid "Each instance of :class:`TestCase` will run a single base method: the method named *methodName*. In most uses of :class:`TestCase`, you will neither change the *methodName* nor reimplement the default ``runTest()`` method."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:673
msgid ":class:`TestCase` can be instantiated successfully without providing a *methodName*. This makes it easier to experiment with :class:`TestCase` from the interactive interpreter."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:678
msgid ":class:`TestCase` instances provide three groups of methods: one group used to run the test, another used by the test implementation to check conditions and report failures, and some inquiry methods allowing information about the test itself to be gathered."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:683
msgid "Methods in the first group (running the test) are:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:687
msgid "Method called to prepare the test fixture.  This is called immediately before calling the test method; other than :exc:`AssertionError` or :exc:`SkipTest`, any exception raised by this method will be considered an error rather than a test failure. The default implementation does nothing."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:695
msgid "Method called immediately after the test method has been called and the result recorded.  This is called even if the test method raised an exception, so the implementation in subclasses may need to be particularly careful about checking internal state.  Any exception, other than :exc:`AssertionError` or :exc:`SkipTest`, raised by this method will be considered an additional error rather than a test failure (thus increasing the total number of reported errors). This method will only be called if the :meth:`setUp` succeeds, regardless of the outcome of the test method. The default implementation does nothing."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:708
msgid "A class method called before tests in an individual class are run. ``setUpClass`` is called with the class as the only argument and must be decorated as a :func:`classmethod`::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:716
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:731
msgid "See `Class and Module Fixtures`_ for more details."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:723
msgid "A class method called after tests in an individual class have run. ``tearDownClass`` is called with the class as the only argument and must be decorated as a :meth:`classmethod`::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:738
msgid "Run the test, collecting the result into the :class:`TestResult` object passed as *result*.  If *result* is omitted or ``None``, a temporary result object is created (by calling the :meth:`defaultTestResult` method) and used. The result object is returned to :meth:`run`'s caller."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:744
msgid "The same effect may be had by simply calling the :class:`TestCase` instance."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:747
msgid "Previous versions of ``run`` did not return the result. Neither did calling an instance."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:753
msgid "Calling this during a test method or :meth:`setUp` skips the current test.  See :ref:`unittest-skipping` for more information."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:761
msgid "Return a context manager which executes the enclosed code block as a subtest.  *msg* and *params* are optional, arbitrary values which are displayed whenever a subtest fails, allowing you to identify them clearly."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:766
msgid "A test case can contain any number of subtest declarations, and they can be arbitrarily nested."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:769
msgid "See :ref:`subtests` for more information."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:776
msgid "Run the test without collecting the result.  This allows exceptions raised by the test to be propagated to the caller, and can be used to support running tests under a debugger."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:782
msgid "The :class:`TestCase` class provides several assert methods to check for and report failures.  The following table lists the most commonly used methods (see the tables below for more assert methods):"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:787
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:909
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1101
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1228
msgid "Method"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:787
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:909
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1101
msgid "Checks that"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:787
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:909
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1101
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1228
msgid "New in"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:789
msgid ":meth:`assertEqual(a, b) <TestCase.assertEqual>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:789
msgid "``a == b``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:792
msgid ":meth:`assertNotEqual(a, b) <TestCase.assertNotEqual>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:792
msgid "``a != b``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:795
msgid ":meth:`assertTrue(x) <TestCase.assertTrue>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:795
msgid "``bool(x) is True``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:798
msgid ":meth:`assertFalse(x) <TestCase.assertFalse>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:798
msgid "``bool(x) is False``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:801
msgid ":meth:`assertIs(a, b) <TestCase.assertIs>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:801
msgid "``a is b``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:801
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:804
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:807
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:810
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:813
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:816
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:914
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1109
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1112
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1115
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1118
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1121
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1230
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1233
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1236
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1239
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1242
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1245
msgid "3.1"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:804
msgid ":meth:`assertIsNot(a, b) <TestCase.assertIsNot>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:804
msgid "``a is not b``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:807
msgid ":meth:`assertIsNone(x) <TestCase.assertIsNone>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:807
msgid "``x is None``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:810
msgid ":meth:`assertIsNotNone(x) <TestCase.assertIsNotNone>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:810
msgid "``x is not None``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:813
msgid ":meth:`assertIn(a, b) <TestCase.assertIn>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:813
msgid "``a in b``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:816
msgid ":meth:`assertNotIn(a, b) <TestCase.assertNotIn>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:816
msgid "``a not in b``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:819
msgid ":meth:`assertIsInstance(a, b) <TestCase.assertIsInstance>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:819
msgid "``isinstance(a, b)``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:819
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:822
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:917
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:920
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1124
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1127
msgid "3.2"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:822
msgid ":meth:`assertNotIsInstance(a, b) <TestCase.assertNotIsInstance>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:822
msgid "``not isinstance(a, b)``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:826
msgid "All the assert methods accept a *msg* argument that, if specified, is used as the error message on failure (see also :data:`longMessage`). Note that the *msg* keyword argument can be passed to :meth:`assertRaises`, :meth:`assertRaisesRegex`, :meth:`assertWarns`, :meth:`assertWarnsRegex` only when they are used as a context manager."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:834
msgid "Test that *first* and *second* are equal.  If the values do not compare equal, the test will fail."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:837
msgid "In addition, if *first* and *second* are the exact same type and one of list, tuple, dict, set, frozenset or str or any type that a subclass registers with :meth:`addTypeEqualityFunc` the type-specific equality function will be called in order to generate a more useful default error message (see also the :ref:`list of type-specific methods <type-specific-methods>`)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:844
msgid "Added the automatic calling of type-specific equality function."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:847
msgid ":meth:`assertMultiLineEqual` added as the default type equality function for comparing strings."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:854
msgid "Test that *first* and *second* are not equal.  If the values do compare equal, the test will fail."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:860
msgid "Test that *expr* is true (or false)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:862
msgid "Note that this is equivalent to ``bool(expr) is True`` and not to ``expr is True`` (use ``assertIs(expr, True)`` for the latter).  This method should also be avoided when more specific methods are available (e.g. ``assertEqual(a, b)`` instead of ``assertTrue(a == b)``), because they provide a better error message in case of failure."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:872
msgid "Test that *first* and *second* evaluate (or don't evaluate) to the same object."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:881
msgid "Test that *expr* is (or is not) ``None``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:889
msgid "Test that *first* is (or is not) in *second*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:897
msgid "Test that *obj* is (or is not) an instance of *cls* (which can be a class or a tuple of classes, as supported by :func:`isinstance`). To check for the exact type, use :func:`assertIs(type(obj), cls) <assertIs>`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:905
msgid "It is also possible to check the production of exceptions, warnings, and log messages using the following methods:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:911
msgid ":meth:`assertRaises(exc, fun, *args, **kwds) <TestCase.assertRaises>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:911
msgid "``fun(*args, **kwds)`` raises *exc*"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:914
msgid ":meth:`assertRaisesRegex(exc, r, fun, *args, **kwds) <TestCase.assertRaisesRegex>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:914
msgid "``fun(*args, **kwds)`` raises *exc* and the message matches regex *r*"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:917
msgid ":meth:`assertWarns(warn, fun, *args, **kwds) <TestCase.assertWarns>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:917
msgid "``fun(*args, **kwds)`` raises *warn*"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:920
msgid ":meth:`assertWarnsRegex(warn, r, fun, *args, **kwds) <TestCase.assertWarnsRegex>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:920
msgid "``fun(*args, **kwds)`` raises *warn* and the message matches regex *r*"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:923
msgid ":meth:`assertLogs(logger, level) <TestCase.assertLogs>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:923
msgid "The ``with`` block logs on *logger* with minimum *level*"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:923
msgid "3.4"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:930
msgid "Test that an exception is raised when *callable* is called with any positional or keyword arguments that are also passed to :meth:`assertRaises`.  The test passes if *exception* is raised, is an error if another exception is raised, or fails if no exception is raised. To catch any of a group of exceptions, a tuple containing the exception classes may be passed as *exception*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:937
msgid "If only the *exception* and possibly the *msg* arguments are given, return a context manager so that the code under test can be written inline rather than as a function::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:944
msgid "When used as a context manager, :meth:`assertRaises` accepts the additional keyword argument *msg*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:947
msgid "The context manager will store the caught exception object in its :attr:`exception` attribute.  This can be useful if the intention is to perform additional checks on the exception raised::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:957
msgid "Added the ability to use :meth:`assertRaises` as a context manager."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:960
msgid "Added the :attr:`exception` attribute."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:963
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:989
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1030
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1053
msgid "Added the *msg* keyword argument when used as a context manager."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:970
msgid "Like :meth:`assertRaises` but also tests that *regex* matches on the string representation of the raised exception.  *regex* may be a regular expression object or a string containing a regular expression suitable for use by :func:`re.search`.  Examples::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:978
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1046
msgid "or::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:983
msgid "under the name ``assertRaisesRegexp``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:986
msgid "Renamed to :meth:`assertRaisesRegex`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:996
msgid "Test that a warning is triggered when *callable* is called with any positional or keyword arguments that are also passed to :meth:`assertWarns`.  The test passes if *warning* is triggered and fails if it isn't.  Any exception is an error. To catch any of a group of warnings, a tuple containing the warning classes may be passed as *warnings*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1003
msgid "If only the *warning* and possibly the *msg* arguments are given, return a context manager so that the code under test can be written inline rather than as a function::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1010
msgid "When used as a context manager, :meth:`assertWarns` accepts the additional keyword argument *msg*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1013
msgid "The context manager will store the caught warning object in its :attr:`warning` attribute, and the source line which triggered the warnings in the :attr:`filename` and :attr:`lineno` attributes. This can be useful if the intention is to perform additional checks on the warning caught::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1025
msgid "This method works regardless of the warning filters in place when it is called."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1037
msgid "Like :meth:`assertWarns` but also tests that *regex* matches on the message of the triggered warning.  *regex* may be a regular expression object or a string containing a regular expression suitable for use by :func:`re.search`.  Example::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1058
msgid "A context manager to test that at least one message is logged on the *logger* or one of its children, with at least the given *level*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1062
msgid "If given, *logger* should be a :class:`logging.Logger` object or a :class:`str` giving the name of a logger.  The default is the root logger, which will catch all messages."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1066
msgid "If given, *level* should be either a numeric logging level or its string equivalent (for example either ``\"ERROR\"`` or :attr:`logging.ERROR`).  The default is :attr:`logging.INFO`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1070
msgid "The test passes if at least one message emitted inside the ``with`` block matches the *logger* and *level* conditions, otherwise it fails."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1073
msgid "The object returned by the context manager is a recording helper which keeps tracks of the matching log messages.  It has two attributes:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1079
msgid "A list of :class:`logging.LogRecord` objects of the matching log messages."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1084
msgid "A list of :class:`str` objects with the formatted output of matching messages."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1087
msgid "Example::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1098
msgid "There are also other methods used to perform more specific checks, such as:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1103
msgid ":meth:`assertAlmostEqual(a, b) <TestCase.assertAlmostEqual>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1103
msgid "``round(a-b, 7) == 0``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1106
msgid ":meth:`assertNotAlmostEqual(a, b) <TestCase.assertNotAlmostEqual>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1106
msgid "``round(a-b, 7) != 0``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1109
msgid ":meth:`assertGreater(a, b) <TestCase.assertGreater>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1109
msgid "``a > b``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1112
msgid ":meth:`assertGreaterEqual(a, b) <TestCase.assertGreaterEqual>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1112
msgid "``a >= b``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1115
msgid ":meth:`assertLess(a, b) <TestCase.assertLess>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1115
msgid "``a < b``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1118
msgid ":meth:`assertLessEqual(a, b) <TestCase.assertLessEqual>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1118
msgid "``a <= b``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1121
msgid ":meth:`assertRegex(s, r) <TestCase.assertRegex>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1121
msgid "``r.search(s)``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1124
msgid ":meth:`assertNotRegex(s, r) <TestCase.assertNotRegex>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1124
msgid "``not r.search(s)``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1127
msgid ":meth:`assertCountEqual(a, b) <TestCase.assertCountEqual>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1127
msgid "*a* and *b* have the same elements in the same number, regardless of their order"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1136
msgid "Test that *first* and *second* are approximately (or not approximately) equal by computing the difference, rounding to the given number of decimal *places* (default 7), and comparing to zero.  Note that these methods round the values to the given number of *decimal places* (i.e. like the :func:`round` function) and not *significant digits*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1142
msgid "If *delta* is supplied instead of *places* then the difference between *first* and *second* must be less or equal to (or greater than) *delta*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1145
msgid "Supplying both *delta* and *places* raises a :exc:`TypeError`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1147
msgid ":meth:`assertAlmostEqual` automatically considers almost equal objects that compare equal.  :meth:`assertNotAlmostEqual` automatically fails if the objects compare equal.  Added the *delta* keyword argument."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1158
msgid "Test that *first* is respectively >, >=, < or <= than *second* depending on the method name.  If not, the test will fail::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1170
msgid "Test that a *regex* search matches (or does not match) *text*.  In case of failure, the error message will include the pattern and the *text* (or the pattern and the part of *text* that unexpectedly matched).  *regex* may be a regular expression object or a string containing a regular expression suitable for use by :func:`re.search`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1176
msgid "under the name ``assertRegexpMatches``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1178
msgid "The method ``assertRegexpMatches()`` has been renamed to :meth:`.assertRegex`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1181
msgid ":meth:`.assertNotRegex`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1183
msgid "The name ``assertNotRegexpMatches`` is a deprecated alias for :meth:`.assertNotRegex`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1190
msgid "Test that sequence *first* contains the same elements as *second*, regardless of their order. When they don't, an error message listing the differences between the sequences will be generated."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1194
msgid "Duplicate elements are *not* ignored when comparing *first* and *second*. It verifies whether each element has the same count in both sequences. Equivalent to: ``assertEqual(Counter(list(first)), Counter(list(second)))`` but works with sequences of unhashable objects as well."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1205
msgid "The :meth:`assertEqual` method dispatches the equality check for objects of the same type to different type-specific methods.  These methods are already implemented for most of the built-in types, but it's also possible to register new methods using :meth:`addTypeEqualityFunc`:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1212
msgid "Registers a type-specific method called by :meth:`assertEqual` to check if two objects of exactly the same *typeobj* (not subclasses) compare equal.  *function* must take two positional arguments and a third msg=None keyword argument just as :meth:`assertEqual` does.  It must raise :data:`self.failureException(msg) <failureException>` when inequality between the first two parameters is detected -- possibly providing useful information and explaining the inequalities in details in the error message."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1223
msgid "The list of type-specific methods automatically used by :meth:`~TestCase.assertEqual` are summarized in the following table.  Note that it's usually not necessary to invoke these methods directly."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1228
msgid "Used to compare"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1230
msgid ":meth:`assertMultiLineEqual(a, b) <TestCase.assertMultiLineEqual>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1230
msgid "strings"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1233
msgid ":meth:`assertSequenceEqual(a, b) <TestCase.assertSequenceEqual>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1233
msgid "sequences"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1236
msgid ":meth:`assertListEqual(a, b) <TestCase.assertListEqual>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1236
msgid "lists"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1239
msgid ":meth:`assertTupleEqual(a, b) <TestCase.assertTupleEqual>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1239
msgid "tuples"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1242
msgid ":meth:`assertSetEqual(a, b) <TestCase.assertSetEqual>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1242
msgid "sets or frozensets"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1245
msgid ":meth:`assertDictEqual(a, b) <TestCase.assertDictEqual>`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1245
msgid "dicts"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1253
msgid "Test that the multiline string *first* is equal to the string *second*. When not equal a diff of the two strings highlighting the differences will be included in the error message. This method is used by default when comparing strings with :meth:`assertEqual`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1263
msgid "Tests that two sequences are equal.  If a *seq_type* is supplied, both *first* and *second* must be instances of *seq_type* or a failure will be raised.  If the sequences are different an error message is constructed that shows the difference between the two."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1268
msgid "This method is not called directly by :meth:`assertEqual`, but it's used to implement :meth:`assertListEqual` and :meth:`assertTupleEqual`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1278
msgid "Tests that two lists or tuples are equal.  If not, an error message is constructed that shows only the differences between the two.  An error is also raised if either of the parameters are of the wrong type. These methods are used by default when comparing lists or tuples with :meth:`assertEqual`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1289
msgid "Tests that two sets are equal.  If not, an error message is constructed that lists the differences between the sets.  This method is used by default when comparing sets or frozensets with :meth:`assertEqual`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1293
msgid "Fails if either of *first* or *second* does not have a :meth:`set.difference` method."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1301
msgid "Test that two dictionaries are equal.  If not, an error message is constructed that shows the differences in the dictionaries. This method will be used by default to compare dictionaries in calls to :meth:`assertEqual`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1312
msgid "Finally the :class:`TestCase` provides the following methods and attributes:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1317
msgid "Signals a test failure unconditionally, with *msg* or ``None`` for the error message."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1323
msgid "This class attribute gives the exception raised by the test method.  If a test framework needs to use a specialized exception, possibly to carry additional information, it must subclass this exception in order to \"play fair\" with the framework.  The initial value of this attribute is :exc:`AssertionError`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1332
msgid "This class attribute determines what happens when a custom failure message is passed as the msg argument to an assertXYY call that fails. ``True`` is the default value. In this case, the custom message is appended to the end of the standard failure message. When set to ``False``, the custom message replaces the standard message."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1338
msgid "The class setting can be overridden in individual test methods by assigning an instance attribute, self.longMessage, to ``True`` or ``False`` before calling the assert methods."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1342
msgid "The class setting gets reset before each test call."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1349
msgid "This attribute controls the maximum length of diffs output by assert methods that report diffs on failure. It defaults to 80*8 characters. Assert methods affected by this attribute are :meth:`assertSequenceEqual` (including all the sequence comparison methods that delegate to it), :meth:`assertDictEqual` and :meth:`assertMultiLineEqual`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1356
msgid "Setting ``maxDiff`` to ``None`` means that there is no maximum length of diffs."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1362
msgid "Testing frameworks can use the following methods to collect information on the test:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1368
msgid "Return the number of tests represented by this test object.  For :class:`TestCase` instances, this will always be ``1``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1374
msgid "Return an instance of the test result class that should be used for this test case class (if no other result instance is provided to the :meth:`run` method)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1378
msgid "For :class:`TestCase` instances, this will always be an instance of :class:`TestResult`; subclasses of :class:`TestCase` should override this as necessary."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1385
msgid "Return a string identifying the specific test case.  This is usually the full name of the test method, including the module and class name."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1391
msgid "Returns a description of the test, or ``None`` if no description has been provided.  The default implementation of this method returns the first line of the test method's docstring, if available, or ``None``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1396
msgid "In 3.1 this was changed to add the test name to the short description even in the presence of a docstring.  This caused compatibility issues with unittest extensions and adding the test name was moved to the :class:`TextTestResult` in Python 3.2."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1405
msgid "Add a function to be called after :meth:`tearDown` to cleanup resources used during the test. Functions will be called in reverse order to the order they are added (:abbr:`LIFO (last-in, first-out)`).  They are called with any arguments and keyword arguments passed into :meth:`addCleanup` when they are added."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1411
msgid "If :meth:`setUp` fails, meaning that :meth:`tearDown` is not called, then any cleanup functions added will still be called."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1419
msgid "This method is called unconditionally after :meth:`tearDown`, or after :meth:`setUp` if :meth:`setUp` raises an exception."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1422
msgid "It is responsible for calling all the cleanup functions added by :meth:`addCleanup`. If you need cleanup functions to be called *prior* to :meth:`tearDown` then you can call :meth:`doCleanups` yourself."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1427
msgid ":meth:`doCleanups` pops methods off the stack of cleanup functions one at a time, so it can be called at any time."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1435
msgid "This class implements the portion of the :class:`TestCase` interface which allows the test runner to drive the test, but does not provide the methods which test code can use to check and report errors.  This is used to create test cases using legacy test code, allowing it to be integrated into a :mod:`unittest`-based test framework."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1445
msgid "Deprecated aliases"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1447
msgid "For historical reasons, some of the :class:`TestCase` methods had one or more aliases that are now deprecated.  The following table lists the correct names along with their deprecated aliases:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1452
msgid "Method Name"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1452
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1452
msgid "Deprecated alias"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1454
msgid ":meth:`.assertEqual`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1454
msgid "failUnlessEqual"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1454
msgid "assertEquals"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1455
msgid ":meth:`.assertNotEqual`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1455
msgid "failIfEqual"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1455
msgid "assertNotEquals"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1456
msgid ":meth:`.assertTrue`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1456
msgid "failUnless"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1456
msgid "assert\\_"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1457
msgid ":meth:`.assertFalse`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1457
msgid "failIf"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1458
msgid ":meth:`.assertRaises`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1458
msgid "failUnlessRaises"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1459
msgid ":meth:`.assertAlmostEqual`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1459
msgid "failUnlessAlmostEqual"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1459
msgid "assertAlmostEquals"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1460
msgid ":meth:`.assertNotAlmostEqual`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1460
msgid "failIfAlmostEqual"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1460
msgid "assertNotAlmostEquals"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1461
msgid ":meth:`.assertRegex`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1461
msgid "assertRegexpMatches"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1462
msgid ":meth:`.assertNotRegex`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1462
msgid "assertNotRegexpMatches"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1463
msgid ":meth:`.assertRaisesRegex`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1463
msgid "assertRaisesRegexp"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1466
msgid "the fail* aliases listed in the second column."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1468
msgid "the assert* aliases listed in the third column."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1470
msgid "``assertRegexpMatches`` and ``assertRaisesRegexp`` have been renamed to :meth:`.assertRegex` and :meth:`.assertRaisesRegex`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1473
msgid "the ``assertNotRegexpMatches`` name in favor of :meth:`.assertNotRegex`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1479
msgid "Grouping tests"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1483
msgid "This class represents an aggregation of individual test cases and test suites. The class presents the interface needed by the test runner to allow it to be run as any other test case.  Running a :class:`TestSuite` instance is the same as iterating over the suite, running each test individually."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1488
msgid "If *tests* is given, it must be an iterable of individual test cases or other test suites that will be used to build the suite initially. Additional methods are provided to add test cases and suites to the collection later on."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1492
msgid ":class:`TestSuite` objects behave much like :class:`TestCase` objects, except they do not actually implement a test.  Instead, they are used to aggregate tests into groups of tests that should be run together. Some additional methods are available to add tests to :class:`TestSuite` instances:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1500
msgid "Add a :class:`TestCase` or :class:`TestSuite` to the suite."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1505
msgid "Add all the tests from an iterable of :class:`TestCase` and :class:`TestSuite` instances to this test suite."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1508
msgid "This is equivalent to iterating over *tests*, calling :meth:`addTest` for each element."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1511
msgid ":class:`TestSuite` shares the following methods with :class:`TestCase`:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1516
msgid "Run the tests associated with this suite, collecting the result into the test result object passed as *result*.  Note that unlike :meth:`TestCase.run`, :meth:`TestSuite.run` requires the result object to be passed in."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1524
msgid "Run the tests associated with this suite without collecting the result. This allows exceptions raised by the test to be propagated to the caller and can be used to support running tests under a debugger."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1531
msgid "Return the number of tests represented by this test object, including all individual tests and sub-suites."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1537
msgid "Tests grouped by a :class:`TestSuite` are always accessed by iteration. Subclasses can lazily provide tests by overriding :meth:`__iter__`. Note that this method may be called several times on a single suite (for example when counting tests or comparing for equality) so the tests returned by repeated iterations before :meth:`TestSuite.run` must be the same for each call iteration. After :meth:`TestSuite.run`, callers should not rely on the tests returned by this method unless the caller uses a subclass that overrides :meth:`TestSuite._removeTestAtIndex` to preserve test references."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1547
msgid "In earlier versions the :class:`TestSuite` accessed tests directly rather than through iteration, so overriding :meth:`__iter__` wasn't sufficient for providing tests."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1552
msgid "In earlier versions the :class:`TestSuite` held references to each :class:`TestCase` after :meth:`TestSuite.run`. Subclasses can restore that behavior by overriding :meth:`TestSuite._removeTestAtIndex`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1557
msgid "In the typical usage of a :class:`TestSuite` object, the :meth:`run` method is invoked by a :class:`TestRunner` rather than by the end-user test harness."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1562
msgid "Loading and running tests"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1566
msgid "The :class:`TestLoader` class is used to create test suites from classes and modules.  Normally, there is no need to create an instance of this class; the :mod:`unittest` module provides an instance that can be shared as :data:`unittest.defaultTestLoader`.  Using a subclass or instance, however, allows customization of some configurable properties."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1572
msgid ":class:`TestLoader` objects have the following attributes:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1577
msgid "A list of the non-fatal errors encountered while loading tests. Not reset by the loader at any point. Fatal errors are signalled by the relevant a method raising an exception to the caller. Non-fatal errors are also indicated by a synthetic test that will raise the original error when run."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1586
msgid ":class:`TestLoader` objects have the following methods:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1591
msgid "Return a suite of all test cases contained in the :class:`TestCase`\\ -derived :class:`testCaseClass`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1594
msgid "A test case instance is created for each method named by :meth:`getTestCaseNames`. By default these are the method names beginning with ``test``. If :meth:`getTestCaseNames` returns no methods, but the :meth:`runTest` method is implemented, a single test case is created for that method instead."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1603
msgid "Return a suite of all test cases contained in the given module. This method searches *module* for classes derived from :class:`TestCase` and creates an instance of the class for each test method defined for the class."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1610
msgid "While using a hierarchy of :class:`TestCase`\\ -derived classes can be convenient in sharing fixtures and helper functions, defining test methods on base classes that are not intended to be instantiated directly does not play well with this method.  Doing so, however, can be useful when the fixtures are different and defined in subclasses."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1616
msgid "If a module provides a ``load_tests`` function it will be called to load the tests. This allows modules to customize test loading. This is the `load_tests protocol`_.  The *pattern* argument is passed as the third argument to ``load_tests``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1621
msgid "Support for ``load_tests`` added."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1624
msgid "The undocumented and unofficial *use_load_tests* default argument is deprecated and ignored, although it is still accepted for backward compatibility.  The method also now accepts a keyword-only argument *pattern* which is passed to ``load_tests`` as the third argument."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1633
msgid "Return a suite of all test cases given a string specifier."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1635
msgid "The specifier *name* is a \"dotted name\" that may resolve either to a module, a test case class, a test method within a test case class, a :class:`TestSuite` instance, or a callable object which returns a :class:`TestCase` or :class:`TestSuite` instance.  These checks are applied in the order listed here; that is, a method on a possible test case class will be picked up as \"a test method within a test case class\", rather than \"a callable object\"."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1643
msgid "For example, if you have a module :mod:`SampleTests` containing a :class:`TestCase`\\ -derived class :class:`SampleTestCase` with three test methods (:meth:`test_one`, :meth:`test_two`, and :meth:`test_three`), the specifier ``'SampleTests.SampleTestCase'`` would cause this method to return a suite which will run all three test methods. Using the specifier ``'SampleTests.SampleTestCase.test_two'`` would cause it to return a test suite which will run only the :meth:`test_two` test method. The specifier can refer to modules and packages which have not been imported; they will be imported as a side-effect."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1653
msgid "The method optionally resolves *name* relative to the given *module*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1655
msgid "If an :exc:`ImportError` or :exc:`AttributeError` occurs while traversing *name* then a synthetic test that raises that error when run will be returned. These errors are included in the errors accumulated by self.errors."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1664
msgid "Similar to :meth:`loadTestsFromName`, but takes a sequence of names rather than a single name.  The return value is a test suite which supports all the tests defined for each name."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1671
msgid "Return a sorted sequence of method names found within *testCaseClass*; this should be a subclass of :class:`TestCase`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1677
msgid "Find all the test modules by recursing into subdirectories from the specified start directory, and return a TestSuite object containing them. Only test files that match *pattern* will be loaded. (Using shell style pattern matching.) Only module names that are importable (i.e. are valid Python identifiers) will be loaded."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1683
msgid "All test modules must be importable from the top level of the project. If the start directory is not the top level directory then the top level directory must be specified separately."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1687
msgid "If importing a module fails, for example due to a syntax error, then this will be recorded as a single error and discovery will continue.  If the import failure is due to :exc:`SkipTest` being raised, it will be recorded as a skip instead of an error."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1692
msgid "If a package (a directory containing a file named :file:`__init__.py`) is found, the package will be checked for a ``load_tests`` function. If this exists then it will be called ``package.load_tests(loader, tests, pattern)``. Test discovery takes care to ensure that a package is only checked for tests once during an invocation, even if the load_tests function itself calls ``loader.discover``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1700
msgid "If ``load_tests`` exists then discovery does *not* recurse into the package, ``load_tests`` is responsible for loading all tests in the package."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1704
msgid "The pattern is deliberately not stored as a loader attribute so that packages can continue discovery themselves. *top_level_dir* is stored so ``load_tests`` does not need to pass this argument in to ``loader.discover()``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1709
msgid "*start_dir* can be a dotted module name as well as a directory."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1713
msgid "Modules that raise :exc:`SkipTest` on import are recorded as skips,   not errors. Discovery works for :term:`namespace packages <namespace package>`. Paths are sorted before being imported so that execution order is   the same even if the underlying file system's ordering is not   dependent on file name."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1721
msgid "Found packages are now checked for ``load_tests`` regardless of whether their path matches *pattern*, because it is impossible for a package name to match the default pattern."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1727
msgid "The following attributes of a :class:`TestLoader` can be configured either by subclassing or assignment on an instance:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1733
msgid "String giving the prefix of method names which will be interpreted as test methods.  The default value is ``'test'``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1736
msgid "This affects :meth:`getTestCaseNames` and all the :meth:`loadTestsFrom\\*` methods."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1742
msgid "Function to be used to compare method names when sorting them in :meth:`getTestCaseNames` and all the :meth:`loadTestsFrom\\*` methods."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1748
msgid "Callable object that constructs a test suite from a list of tests. No methods on the resulting object are needed.  The default value is the :class:`TestSuite` class."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1752
msgid "This affects all the :meth:`loadTestsFrom\\*` methods."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1757
msgid "This class is used to compile information about which tests have succeeded and which have failed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1760
msgid "A :class:`TestResult` object stores the results of a set of tests.  The :class:`TestCase` and :class:`TestSuite` classes ensure that results are properly recorded; test authors do not need to worry about recording the outcome of tests."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1765
msgid "Testing frameworks built on top of :mod:`unittest` may want access to the :class:`TestResult` object generated by running a set of tests for reporting purposes; a :class:`TestResult` instance is returned by the :meth:`TestRunner.run` method for this purpose."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1770
msgid ":class:`TestResult` instances have the following attributes that will be of interest when inspecting the results of running a set of tests:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1776
msgid "A list containing 2-tuples of :class:`TestCase` instances and strings holding formatted tracebacks. Each tuple represents a test which raised an unexpected exception."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1782
msgid "A list containing 2-tuples of :class:`TestCase` instances and strings holding formatted tracebacks. Each tuple represents a test where a failure was explicitly signalled using the :meth:`TestCase.assert\\*` methods."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1788
msgid "A list containing 2-tuples of :class:`TestCase` instances and strings holding the reason for skipping the test."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1795
msgid "A list containing 2-tuples of :class:`TestCase` instances and strings holding formatted tracebacks.  Each tuple represents an expected failure of the test case."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1801
msgid "A list containing :class:`TestCase` instances that were marked as expected failures, but succeeded."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1806
msgid "Set to ``True`` when the execution of tests should stop by :meth:`stop`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1810
msgid "The total number of tests run so far."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1814
msgid "If set to true, ``sys.stdout`` and ``sys.stderr`` will be buffered in between :meth:`startTest` and :meth:`stopTest` being called. Collected output will only be echoed onto the real ``sys.stdout`` and ``sys.stderr`` if the test fails or errors. Any output is also attached to the failure / error message."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1823
msgid "If set to true :meth:`stop` will be called on the first failure or error, halting the test run."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1830
msgid "If set to true then local variables will be shown in tracebacks."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1836
msgid "Return ``True`` if all tests run so far have passed, otherwise returns ``False``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1839
msgid "Returns ``False`` if there were any :attr:`unexpectedSuccesses` from tests marked with the :func:`expectedFailure` decorator."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1845
msgid "This method can be called to signal that the set of tests being run should be aborted by setting the :attr:`shouldStop` attribute to ``True``. :class:`TestRunner` objects should respect this flag and return without running any additional tests."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1850
msgid "For example, this feature is used by the :class:`TextTestRunner` class to stop the test framework when the user signals an interrupt from the keyboard.  Interactive tools which provide :class:`TestRunner` implementations can use this in a similar manner."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1855
msgid "The following methods of the :class:`TestResult` class are used to maintain the internal data structures, and may be extended in subclasses to support additional reporting requirements.  This is particularly useful in building tools which support interactive reporting while tests are being run."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1863
msgid "Called when the test case *test* is about to be run."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1867
msgid "Called after the test case *test* has been executed, regardless of the outcome."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1872
msgid "Called once before any tests are executed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1879
msgid "Called once after all tests are executed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1886
msgid "Called when the test case *test* raises an unexpected exception. *err* is a tuple of the form returned by :func:`sys.exc_info`: ``(type, value, traceback)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1890
msgid "The default implementation appends a tuple ``(test, formatted_err)`` to the instance's :attr:`errors` attribute, where *formatted_err* is a formatted traceback derived from *err*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1897
msgid "Called when the test case *test* signals a failure. *err* is a tuple of the form returned by :func:`sys.exc_info`: ``(type, value, traceback)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1900
msgid "The default implementation appends a tuple ``(test, formatted_err)`` to the instance's :attr:`failures` attribute, where *formatted_err* is a formatted traceback derived from *err*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1907
msgid "Called when the test case *test* succeeds."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1909
msgid "The default implementation does nothing."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1914
msgid "Called when the test case *test* is skipped.  *reason* is the reason the test gave for skipping."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1917
msgid "The default implementation appends a tuple ``(test, reason)`` to the instance's :attr:`skipped` attribute."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1923
msgid "Called when the test case *test* fails, but was marked with the :func:`expectedFailure` decorator."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1926
msgid "The default implementation appends a tuple ``(test, formatted_err)`` to the instance's :attr:`expectedFailures` attribute, where *formatted_err* is a formatted traceback derived from *err*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1933
msgid "Called when the test case *test* was marked with the :func:`expectedFailure` decorator, but succeeded."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1936
msgid "The default implementation appends the test to the instance's :attr:`unexpectedSuccesses` attribute."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1942
msgid "Called when a subtest finishes.  *test* is the test case corresponding to the test method.  *subtest* is a custom :class:`TestCase` instance describing the subtest."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1946
msgid "If *outcome* is :const:`None`, the subtest succeeded.  Otherwise, it failed with an exception where *outcome* is a tuple of the form returned by :func:`sys.exc_info`: ``(type, value, traceback)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1950
msgid "The default implementation does nothing when the outcome is a success, and records subtest failures as normal failures."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1958
msgid "A concrete implementation of :class:`TestResult` used by the :class:`TextTestRunner`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1961
msgid "This class was previously named ``_TextTestResult``. The old name still exists as an alias but is deprecated."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1968
msgid "Instance of the :class:`TestLoader` class intended to be shared.  If no customization of the :class:`TestLoader` is needed, this instance can be used instead of repeatedly creating new instances."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1976
msgid "A basic test runner implementation that outputs results to a stream. If *stream* is ``None``, the default, :data:`sys.stderr` is used as the output stream. This class has a few configurable parameters, but is essentially very simple.  Graphical applications which run test suites should provide alternate implementations. Such implementations should accept ``**kwargs`` as the interface to construct runners changes when features are added to unittest."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1983
msgid "By default this runner shows :exc:`DeprecationWarning`, :exc:`PendingDeprecationWarning`, :exc:`ResourceWarning` and :exc:`ImportWarning` even if they are :ref:`ignored by default <warning-ignored>`. Deprecation warnings caused by :ref:`deprecated unittest methods <deprecated-aliases>` are also special-cased and, when the warning filters are ``'default'`` or ``'always'``, they will appear only once per-module, in order to avoid too many warning messages.  This behavior can be overridden using Python's :option:`!-Wd` or :option:`!-Wa` options (see :ref:`Warning control <using-on-warnings>`) and leaving *warnings* to ``None``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1994
msgid "Added the ``warnings`` argument."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:1997
msgid "The default stream is set to :data:`sys.stderr` at instantiation time rather than import time."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2001
msgid "Added the tb_locals parameter."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2006
msgid "This method returns the instance of ``TestResult`` used by :meth:`run`. It is not intended to be called directly, but can be overridden in subclasses to provide a custom ``TestResult``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2010
msgid "``_makeResult()`` instantiates the class or callable passed in the ``TextTestRunner`` constructor as the ``resultclass`` argument. It defaults to :class:`TextTestResult` if no ``resultclass`` is provided. The result class is instantiated with the following arguments::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2019
msgid "This method is the main public interface to the `TextTestRunner`. This method takes a :class:`TestSuite` or :class:`TestCase` instance. A :class:`TestResult` is created by calling :func:`_makeResult` and the test(s) are run and the results printed to stdout."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2030
msgid "A command-line program that loads a set of tests from *module* and runs them; this is primarily for making test modules conveniently executable. The simplest use for this function is to include the following line at the end of a test script::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2038
msgid "You can run tests with more detailed information by passing in the verbosity argument::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2044
msgid "The *defaultTest* argument is either the name of a single test or an iterable of test names to run if no test names are specified via *argv*.  If not specified or ``None`` and no test names are provided via *argv*, all tests found in *module* are run."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2049
msgid "The *argv* argument can be a list of options passed to the program, with the first element being the program name.  If not specified or ``None``, the values of :data:`sys.argv` are used."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2053
msgid "The *testRunner* argument can either be a test runner class or an already created instance of it. By default ``main`` calls :func:`sys.exit` with an exit code indicating success or failure of the tests run."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2057
msgid "The *testLoader* argument has to be a :class:`TestLoader` instance, and defaults to :data:`defaultTestLoader`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2060
msgid "``main`` supports being used from the interactive interpreter by passing in the argument ``exit=False``. This displays the result on standard output without calling :func:`sys.exit`::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2067
msgid "The *failfast*, *catchbreak* and *buffer* parameters have the same effect as the same-name `command-line options`_."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2070
msgid "The *warnings* argument specifies the :ref:`warning filter <warning-filter>` that should be used while running the tests.  If it's not specified, it will remain ``None`` if a :option:`!-W` option is passed to :program:`python` (see :ref:`Warning control <using-on-warnings>`), otherwise it will be set to ``'default'``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2076
msgid "Calling ``main`` actually returns an instance of the ``TestProgram`` class. This stores the result of the tests run as the ``result`` attribute."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2079
msgid "The *exit* parameter was added."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2082
msgid "The *verbosity*, *failfast*, *catchbreak*, *buffer* and *warnings* parameters were added."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2086
msgid "The *defaultTest* parameter was changed to also accept an iterable of test names."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2092
msgid "load_tests Protocol"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2096
msgid "Modules or packages can customize how tests are loaded from them during normal test runs or test discovery by implementing a function called ``load_tests``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2099
msgid "If a test module defines ``load_tests`` it will be called by :meth:`TestLoader.loadTestsFromModule` with the following arguments::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2104
msgid "where *pattern* is passed straight through from ``loadTestsFromModule``.  It defaults to ``None``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2107
msgid "It should return a :class:`TestSuite`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2109
msgid "*loader* is the instance of :class:`TestLoader` doing the loading. *standard_tests* are the tests that would be loaded by default from the module. It is common for test modules to only want to add or remove tests from the standard set of tests. The third argument is used when loading packages as part of test discovery."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2115
msgid "A typical ``load_tests`` function that loads tests from a specific set of :class:`TestCase` classes may look like::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2127
msgid "If discovery is started in a directory containing a package, either from the command line or by calling :meth:`TestLoader.discover`, then the package :file:`__init__.py` will be checked for ``load_tests``.  If that function does not exist, discovery will recurse into the package as though it were just another directory.  Otherwise, discovery of the package's tests will be left up to ``load_tests`` which is called with the following arguments::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2136
msgid "This should return a :class:`TestSuite` representing all the tests from the package. (``standard_tests`` will only contain tests collected from :file:`__init__.py`.)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2140
msgid "Because the pattern is passed into ``load_tests`` the package is free to continue (and potentially modify) test discovery. A 'do nothing' ``load_tests`` function for a test package would look like::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2151
msgid "Discovery no longer checks package names for matching *pattern* due to the impossibility of package names matching the default pattern."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2158
msgid "Class and Module Fixtures"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2160
msgid "Class and module level fixtures are implemented in :class:`TestSuite`. When the test suite encounters a test from a new class then :meth:`tearDownClass` from the previous class (if there is one) is called, followed by :meth:`setUpClass` from the new class."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2165
msgid "Similarly if a test is from a different module from the previous test then ``tearDownModule`` from the previous module is run, followed by ``setUpModule`` from the new module."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2169
msgid "After all the tests have run the final ``tearDownClass`` and ``tearDownModule`` are run."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2172
msgid "Note that shared fixtures do not play well with [potential] features like test parallelization and they break test isolation. They should be used with care."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2175
msgid "The default ordering of tests created by the unittest test loaders is to group all tests from the same modules and classes together. This will lead to ``setUpClass`` / ``setUpModule`` (etc) being called exactly once per class and module. If you randomize the order, so that tests from different modules and classes are adjacent to each other, then these shared fixture functions may be called multiple times in a single test run."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2182
msgid "Shared fixtures are not intended to work with suites with non-standard ordering. A ``BaseTestSuite`` still exists for frameworks that don't want to support shared fixtures."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2186
msgid "If there are any exceptions raised during one of the shared fixture functions the test is reported as an error. Because there is no corresponding test instance an ``_ErrorHolder`` object (that has the same interface as a :class:`TestCase`) is created to represent the error. If you are just using the standard unittest test runner then this detail doesn't matter, but if you are a framework author it may be relevant."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2195
msgid "setUpClass and tearDownClass"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2197
msgid "These must be implemented as class methods::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2210
msgid "If you want the ``setUpClass`` and ``tearDownClass`` on base classes called then you must call up to them yourself. The implementations in :class:`TestCase` are empty."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2214
msgid "If an exception is raised during a ``setUpClass`` then the tests in the class are not run and the ``tearDownClass`` is not run. Skipped classes will not have ``setUpClass`` or ``tearDownClass`` run. If the exception is a :exc:`SkipTest` exception then the class will be reported as having been skipped instead of as an error."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2222
msgid "setUpModule and tearDownModule"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2224
msgid "These should be implemented as functions::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2232
msgid "If an exception is raised in a ``setUpModule`` then none of the tests in the module will be run and the ``tearDownModule`` will not be run. If the exception is a :exc:`SkipTest` exception then the module will be reported as having been skipped instead of as an error."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2239
msgid "Signal Handling"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2243
msgid "The :option:`-c/--catch <unittest -c>` command-line option to unittest, along with the ``catchbreak`` parameter to :func:`unittest.main()`, provide more friendly handling of control-C during a test run. With catch break behavior enabled control-C will allow the currently running test to complete, and the test run will then end and report all the results so far. A second control-c will raise a :exc:`KeyboardInterrupt` in the usual way."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2250
msgid "The control-c handling signal handler attempts to remain compatible with code or tests that install their own :const:`signal.SIGINT` handler. If the ``unittest`` handler is called but *isn't* the installed :const:`signal.SIGINT` handler, i.e. it has been replaced by the system under test and delegated to, then it calls the default handler. This will normally be the expected behavior by code that replaces an installed handler and delegates to it. For individual tests that need ``unittest`` control-c handling disabled the :func:`removeHandler` decorator can be used."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2259
msgid "There are a few utility functions for framework authors to enable control-c handling functionality within test frameworks."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2264
msgid "Install the control-c handler. When a :const:`signal.SIGINT` is received (usually in response to the user pressing control-c) all registered results have :meth:`~TestResult.stop` called."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2271
msgid "Register a :class:`TestResult` object for control-c handling. Registering a result stores a weak reference to it, so it doesn't prevent the result from being garbage collected."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2275
msgid "Registering a :class:`TestResult` object has no side-effects if control-c handling is not enabled, so test frameworks can unconditionally register all results they create independently of whether or not handling is enabled."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2282
msgid "Remove a registered result. Once a result has been removed then :meth:`~TestResult.stop` will no longer be called on that result object in response to a control-c."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/unittest.rst:2289
msgid "When called without arguments this function removes the control-c handler if it has been installed. This function can also be used as a test decorator to temporarily remove the handler while the test is being executed::"
msgstr ""

# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/shutil.rst:2
msgid ":mod:`shutil` --- High-level file operations"
msgstr ""

#: ../../library/shutil.rst:13
msgid "**Source code:** :source:`Lib/shutil.py`"
msgstr ""

#: ../../library/shutil.rst:17
msgid "The :mod:`shutil` module offers a number of high-level operations on files and collections of files.  In particular, functions are provided  which support file copying and removal. For operations on individual files, see also the :mod:`os` module."
msgstr ""

#: ../../library/shutil.rst:24
msgid "Even the higher-level file copying functions (:func:`shutil.copy`, :func:`shutil.copy2`) can't copy all file metadata."
msgstr ""

#: ../../library/shutil.rst:27
msgid "On POSIX platforms, this means that file owner and group are lost as well as ACLs.  On Mac OS, the resource fork and other metadata are not used. This means that resources will be lost and file type and creator codes will not be correct. On Windows, file owners, ACLs and alternate data streams are not copied."
msgstr ""

#: ../../library/shutil.rst:37
msgid "Directory and files operations"
msgstr ""

#: ../../library/shutil.rst:41
msgid "Copy the contents of the file-like object *fsrc* to the file-like object *fdst*. The integer *length*, if given, is the buffer size. In particular, a negative *length* value means to copy the data without looping over the source data in chunks; by default the data is read in chunks to avoid uncontrolled memory consumption. Note that if the current file position of the *fsrc* object is not 0, only the contents from the current file position to the end of the file will be copied."
msgstr ""

#: ../../library/shutil.rst:52
msgid "Copy the contents (no metadata) of the file named *src* to a file named *dst*.  *dst* must be the complete target file name; look at :func:`shutil.copy` for a copy that accepts a target directory path.  If *src* and *dst* are the same files, :exc:`Error` is raised. The destination location must be writable; otherwise,  an :exc:`IOError` exception will be raised. If *dst* already exists, it will be replaced.   Special files such as character or block devices and pipes cannot be copied with this function.  *src* and *dst* are path names given as strings."
msgstr ""

#: ../../library/shutil.rst:64
msgid "Copy the permission bits from *src* to *dst*.  The file contents, owner, and group are unaffected.  *src* and *dst* are path names given as strings."
msgstr ""

#: ../../library/shutil.rst:70
msgid "Copy the permission bits, last access time, last modification time, and flags from *src* to *dst*.  The file contents, owner, and group are unaffected.  *src* and *dst* are path names given as strings."
msgstr ""

#: ../../library/shutil.rst:77
msgid "Copy the file *src* to the file or directory *dst*.  If *dst* is a directory, a file with the same basename as *src*  is created (or overwritten) in the directory specified.  Permission bits are copied.  *src* and *dst* are path names given as strings."
msgstr ""

#: ../../library/shutil.rst:85
msgid "Identical to :func:`~shutil.copy` except that :func:`copy2` also attempts to preserve file metadata."
msgstr ""

#: ../../library/shutil.rst:88
msgid ":func:`copy2` uses :func:`copystat` to copy the file metadata. Please see :func:`copystat` for more information."
msgstr ""

#: ../../library/shutil.rst:94
msgid "This factory function creates a function that can be used as a callable for :func:`copytree`\\'s *ignore* argument, ignoring files and directories that match one of the glob-style *patterns* provided.  See the example below."
msgstr ""

#: ../../library/shutil.rst:103
msgid "Recursively copy an entire directory tree rooted at *src*.  The destination directory, named by *dst*, must not already exist; it will be created as well as missing parent directories.  Permissions and times of directories are copied with :func:`copystat`, individual files are copied using :func:`shutil.copy2`."
msgstr ""

#: ../../library/shutil.rst:109
msgid "If *symlinks* is true, symbolic links in the source tree are represented as symbolic links in the new tree, but the metadata of the original links is NOT copied; if false or omitted, the contents and metadata of the linked files are copied to the new tree."
msgstr ""

#: ../../library/shutil.rst:114
msgid "If *ignore* is given, it must be a callable that will receive as its arguments the directory being visited by :func:`copytree`, and a list of its contents, as returned by :func:`os.listdir`.  Since :func:`copytree` is called recursively, the *ignore* callable will be called once for each directory that is copied.  The callable must return a sequence of directory and file names relative to the current directory (i.e. a subset of the items in its second argument); these names will then be ignored in the copy process.  :func:`ignore_patterns` can be used to create such a callable that ignores names based on glob-style patterns."
msgstr ""

#: ../../library/shutil.rst:124
msgid "If exception(s) occur, an :exc:`Error` is raised with a list of reasons."
msgstr ""

#: ../../library/shutil.rst:126
msgid "The source code for this should be considered an example rather than the ultimate tool."
msgstr ""

#: ../../library/shutil.rst:129
msgid ":exc:`Error` is raised if any exceptions occur during copying, rather than printing a message."
msgstr ""

#: ../../library/shutil.rst:133
msgid "Create intermediate directories needed to create *dst*, rather than raising an error. Copy permissions and times of directories using :func:`copystat`."
msgstr ""

#: ../../library/shutil.rst:137
msgid "Added the *ignore* argument to be able to influence what is being copied."
msgstr ""

#: ../../library/shutil.rst:145
msgid "Delete an entire directory tree; *path* must point to a directory (but not a symbolic link to a directory).  If *ignore_errors* is true, errors resulting from failed removals will be ignored; if false or omitted, such errors are handled by calling a handler specified by *onerror* or, if that is omitted, they raise an exception."
msgstr ""

#: ../../library/shutil.rst:151
msgid "If *onerror* is provided, it must be a callable that accepts three parameters: *function*, *path*, and *excinfo*. The first parameter, *function*, is the function which raised the exception; it will be :func:`os.path.islink`, :func:`os.listdir`, :func:`os.remove` or :func:`os.rmdir`.  The second parameter, *path*, will be the path name passed to *function*.  The third parameter, *excinfo*, will be the exception information return by :func:`sys.exc_info`.  Exceptions raised by *onerror* will not be caught."
msgstr ""

#: ../../library/shutil.rst:160
msgid "Explicitly check for *path* being a symbolic link and raise :exc:`OSError` in that case."
msgstr ""

#: ../../library/shutil.rst:167
msgid "Recursively move a file or directory (*src*) to another location (*dst*)."
msgstr ""

#: ../../library/shutil.rst:169
msgid "If the destination is an existing directory, then *src* is moved inside that directory. If the destination already exists but is not a directory, it may be overwritten depending on :func:`os.rename` semantics."
msgstr ""

#: ../../library/shutil.rst:173
msgid "If the destination is on the current filesystem, then :func:`os.rename` is used.  Otherwise, *src* is copied (using :func:`shutil.copy2`) to *dst* and then removed."
msgstr ""

#: ../../library/shutil.rst:182
msgid "This exception collects exceptions that are raised during a multi-file operation. For :func:`copytree`, the exception argument is a list of 3-tuples (*srcname*, *dstname*, *exception*)."
msgstr ""

#: ../../library/shutil.rst:192
msgid "copytree example"
msgstr ""

#: ../../library/shutil.rst:194
msgid "This example is the implementation of the :func:`copytree` function, described above, with the docstring omitted.  It demonstrates many of the other functions provided by this module. ::"
msgstr ""

#: ../../library/shutil.rst:237
msgid "Another example that uses the :func:`ignore_patterns` helper::"
msgstr ""

#: ../../library/shutil.rst:243
msgid "This will copy everything except ``.pyc`` files and files or directories whose name starts with ``tmp``."
msgstr ""

#: ../../library/shutil.rst:246
msgid "Another example that uses the *ignore* argument to add a logging call::"
msgstr ""

#: ../../library/shutil.rst:261
msgid "Archiving operations"
msgstr ""

#: ../../library/shutil.rst:263
msgid "High-level utilities to create and read compressed and archived files are also provided.  They rely on the :mod:`zipfile` and :mod:`tarfile` modules."
msgstr ""

#: ../../library/shutil.rst:268
msgid "Create an archive file (eg. zip or tar) and returns its name."
msgstr ""

#: ../../library/shutil.rst:270
msgid "*base_name* is the name of the file to create, including the path, minus any format-specific extension. *format* is the archive format: one of \"zip\" (if the :mod:`zlib` module or external ``zip`` executable is available), \"tar\", \"gztar\" (if the :mod:`zlib` module is available), or \"bztar\" (if the :mod:`bz2` module is available)."
msgstr ""

#: ../../library/shutil.rst:276
msgid "*root_dir* is a directory that will be the root directory of the archive; ie. we typically chdir into *root_dir* before creating the archive."
msgstr ""

#: ../../library/shutil.rst:280
msgid "*base_dir* is the directory where we start archiving from; ie. *base_dir* will be the common prefix of all files and directories in the archive."
msgstr ""

#: ../../library/shutil.rst:284
msgid "*root_dir* and *base_dir* both default to the current directory."
msgstr ""

#: ../../library/shutil.rst:286
msgid "*owner* and *group* are used when creating a tar archive. By default, uses the current owner and group."
msgstr ""

#: ../../library/shutil.rst:289
msgid "*logger* must be an object compatible with :pep:`282`, usually an instance of :class:`logging.Logger`."
msgstr ""

#: ../../library/shutil.rst:297
msgid "Return a list of supported formats for archiving. Each element of the returned sequence is a tuple ``(name, description)``."
msgstr ""

#: ../../library/shutil.rst:300
msgid "By default :mod:`shutil` provides these formats:"
msgstr ""

#: ../../library/shutil.rst:302
msgid "*zip*: ZIP file (if the :mod:`zlib` module or external ``zip`` executable is available)."
msgstr ""

#: ../../library/shutil.rst:304
msgid "*tar*: uncompressed tar file."
msgstr ""

#: ../../library/shutil.rst:305
msgid "*gztar*: gzip'ed tar-file (if the :mod:`zlib` module is available)."
msgstr ""

#: ../../library/shutil.rst:306
msgid "*bztar*: bzip2'ed tar-file (if the :mod:`bz2` module is available)."
msgstr ""

#: ../../library/shutil.rst:308
msgid "You can register new formats or provide your own archiver for any existing formats, by using :func:`register_archive_format`."
msgstr ""

#: ../../library/shutil.rst:316
msgid "Register an archiver for the format *name*. *function* is a callable that will be used to invoke the archiver."
msgstr ""

#: ../../library/shutil.rst:319
msgid "If given, *extra_args* is a sequence of ``(name, value)`` that will be used as extra keywords arguments when the archiver callable is used."
msgstr ""

#: ../../library/shutil.rst:322
msgid "*description* is used by :func:`get_archive_formats` which returns the list of archivers. Defaults to an empty list."
msgstr ""

#: ../../library/shutil.rst:330
msgid "Remove the archive format *name* from the list of supported formats."
msgstr ""

#: ../../library/shutil.rst:338
msgid "Archiving example"
msgstr ""

#: ../../library/shutil.rst:340
msgid "In this example, we create a gzip'ed tar-file archive containing all files found in the :file:`.ssh` directory of the user::"
msgstr ""

#: ../../library/shutil.rst:350
msgid "The resulting archive contains:"
msgstr ""

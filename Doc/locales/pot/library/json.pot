# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-01 18:39+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:2
msgid ":mod:`json` --- JSON encoder and decoder"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:10
msgid "**Source code:** :source:`Lib/json/__init__.py`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:14
msgid "`JSON (JavaScript Object Notation) <http://json.org>`_, specified by :rfc:`7159` (which obsoletes :rfc:`4627`) and by `ECMA-404 <http://www.ecma-international.org/publications/standards/Ecma-404.htm>`_, is a lightweight data interchange format inspired by `JavaScript <https://en.wikipedia.org/wiki/JavaScript>`_ object literal syntax (although it is not a strict subset of JavaScript [#rfc-errata]_ )."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:21
msgid ":mod:`json` exposes an API familiar to users of the standard library :mod:`marshal` and :mod:`pickle` modules."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:24
msgid "Encoding basic Python object hierarchies::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:43
msgid "Compact encoding::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:49
msgid "Pretty printing::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:58
msgid "Decoding JSON::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:70
msgid "Specializing JSON object decoding::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:85
msgid "Extending :class:`JSONEncoder`::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:103
msgid "Using :mod:`json.tool` from the shell to validate and pretty-print:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:114
msgid "See :ref:`json-commandline` for detailed documentation."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:118
msgid "JSON is a subset of `YAML <http://yaml.org/>`_ 1.2.  The JSON produced by this module's default settings (in particular, the default *separators* value) is also a subset of YAML 1.0 and 1.1.  This module can thus also be used as a YAML serializer."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:125
msgid "Basic Usage"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:132
msgid "Serialize *obj* as a JSON formatted stream to *fp* (a ``.write()``-supporting :term:`file-like object`) using this :ref:`conversion table <py-to-json-table>`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:136
msgid "If *skipkeys* is true (default: ``False``), then dict keys that are not of a basic type (:class:`str`, :class:`int`, :class:`float`, :class:`bool`, ``None``) will be skipped instead of raising a :exc:`TypeError`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:140
msgid "The :mod:`json` module always produces :class:`str` objects, not :class:`bytes` objects. Therefore, ``fp.write()`` must support :class:`str` input."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:144
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:420
msgid "If *ensure_ascii* is true (the default), the output is guaranteed to have all incoming non-ASCII characters escaped.  If *ensure_ascii* is false, these characters will be output as-is."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:148
msgid "If *check_circular* is false (default: ``True``), then the circular reference check for container types will be skipped and a circular reference will result in an :exc:`OverflowError` (or worse)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:152
msgid "If *allow_nan* is false (default: ``True``), then it will be a :exc:`ValueError` to serialize out of range :class:`float` values (``nan``, ``inf``, ``-inf``) in strict compliance of the JSON specification. If *allow_nan* is true, their JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``) will be used."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:158
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:439
msgid "If *indent* is a non-negative integer or string, then JSON array elements and object members will be pretty-printed with that indent level.  An indent level of 0, negative, or ``\"\"`` will only insert newlines.  ``None`` (the default) selects the most compact representation. Using a positive integer indent indents that many spaces per level.  If *indent* is a string (such as ``\"\\t\"``), that string is used to indent each level."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:165
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:446
msgid "Allow strings for *indent* in addition to integers."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:168
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:449
msgid "If specified, *separators* should be an ``(item_separator, key_separator)`` tuple.  The default is ``(', ', ': ')`` if *indent* is ``None`` and ``(',', ': ')`` otherwise.  To get the most compact JSON representation, you should specify ``(',', ':')`` to eliminate whitespace."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:173
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:454
msgid "Use ``(',', ': ')`` as default if *indent* is not ``None``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:176
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:457
msgid "If specified, *default* should be a function that gets called for objects that can't otherwise be serialized.  It should return a JSON encodable version of the object or raise a :exc:`TypeError`.  If not specified, :exc:`TypeError` is raised."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:181
msgid "If *sort_keys* is true (default: ``False``), then the output of dictionaries will be sorted by key."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:184
msgid "To use a custom :class:`JSONEncoder` subclass (e.g. one that overrides the :meth:`default` method to serialize additional types), specify it with the *cls* kwarg; otherwise :class:`JSONEncoder` is used."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:188
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:263
msgid "All optional parameters are now :ref:`keyword-only <keyword-only_parameter>`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:193
msgid "Unlike :mod:`pickle` and :mod:`marshal`, JSON is not a framed protocol, so trying to serialize multiple objects with repeated calls to :func:`dump` using the same *fp* will result in an invalid JSON file."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:202
msgid "Serialize *obj* to a JSON formatted :class:`str` using this :ref:`conversion table <py-to-json-table>`.  The arguments have the same meaning as in :func:`dump`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:208
msgid "Keys in key/value pairs of JSON are always of the type :class:`str`. When a dictionary is converted into JSON, all the keys of the dictionary are coerced to strings. As a result of this, if a dictionary is converted into JSON and then back into a dictionary, the dictionary may not equal the original one. That is, ``loads(dumps(x)) != x`` if x has non-string keys."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:217
msgid "Deserialize *fp* (a ``.read()``-supporting :term:`text file` or :term:`binary file` containing a JSON document) to a Python object using this :ref:`conversion table <json-to-py-table>`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:221
msgid "*object_hook* is an optional function that will be called with the result of any object literal decoded (a :class:`dict`).  The return value of *object_hook* will be used instead of the :class:`dict`.  This feature can be used to implement custom decoders (e.g. `JSON-RPC <http://www.jsonrpc.org>`_ class hinting)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:227
msgid "*object_pairs_hook* is an optional function that will be called with the result of any object literal decoded with an ordered list of pairs.  The return value of *object_pairs_hook* will be used instead of the :class:`dict`.  This feature can be used to implement custom decoders that rely on the order that the key and value pairs are decoded (for example, :func:`collections.OrderedDict` will remember the order of insertion). If *object_hook* is also defined, the *object_pairs_hook* takes priority."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:235
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:334
msgid "Added support for *object_pairs_hook*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:238
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:337
msgid "*parse_float*, if specified, will be called with the string of every JSON float to be decoded.  By default, this is equivalent to ``float(num_str)``. This can be used to use another datatype or parser for JSON floats (e.g. :class:`decimal.Decimal`)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:243
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:342
msgid "*parse_int*, if specified, will be called with the string of every JSON int to be decoded.  By default, this is equivalent to ``int(num_str)``.  This can be used to use another datatype or parser for JSON integers (e.g. :class:`float`)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:248
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:347
msgid "*parse_constant*, if specified, will be called with one of the following strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``. This can be used to raise an exception if invalid JSON numbers are encountered."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:253
msgid "*parse_constant* doesn't get called on 'null', 'true', 'false' anymore."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:256
msgid "To use a custom :class:`JSONDecoder` subclass, specify it with the ``cls`` kwarg; otherwise :class:`JSONDecoder` is used.  Additional keyword arguments will be passed to the constructor of the class."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:260
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:279
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:357
msgid "If the data being deserialized is not a valid JSON document, a :exc:`JSONDecodeError` will be raised."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:266
msgid "*fp* can now be a :term:`binary file`. The input encoding should be UTF-8, UTF-16 or UTF-32."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:272
msgid "Deserialize *s* (a :class:`str`, :class:`bytes` or :class:`bytearray` instance containing a JSON document) to a Python object using this :ref:`conversion table <json-to-py-table>`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:276
msgid "The other arguments have the same meaning as in :func:`load`, except *encoding* which is ignored and deprecated."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:282
msgid "*s* can now be of type :class:`bytes` or :class:`bytearray`. The input encoding should be UTF-8, UTF-16 or UTF-32."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:288
msgid "Encoders and Decoders"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:292
msgid "Simple JSON decoder."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:294
msgid "Performs the following translations in decoding by default:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:299
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:390
msgid "JSON"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:299
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:390
msgid "Python"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:301
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:392
msgid "object"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:301
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:392
msgid "dict"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:303
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:394
msgid "array"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:303
msgid "list"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:305
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:396
msgid "string"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:305
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:396
msgid "str"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:307
msgid "number (int)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:307
msgid "int"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:309
msgid "number (real)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:309
msgid "float"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:311
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:400
msgid "true"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:311
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:400
msgid "True"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:313
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:402
msgid "false"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:313
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:402
msgid "False"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:315
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:404
msgid "null"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:315
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:404
msgid "None"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:318
msgid "It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as their corresponding ``float`` values, which is outside the JSON spec."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:321
msgid "*object_hook*, if specified, will be called with the result of every JSON object decoded and its return value will be used in place of the given :class:`dict`.  This can be used to provide custom deserializations (e.g. to support JSON-RPC class hinting)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:326
msgid "*object_pairs_hook*, if specified will be called with the result of every JSON object decoded with an ordered list of pairs.  The return value of *object_pairs_hook* will be used instead of the :class:`dict`.  This feature can be used to implement custom decoders that rely on the order that the key and value pairs are decoded (for example, :func:`collections.OrderedDict` will remember the order of insertion). If *object_hook* is also defined, the *object_pairs_hook* takes priority."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:352
msgid "If *strict* is false (``True`` is the default), then control characters will be allowed inside strings.  Control characters in this context are those with character codes in the 0--31 range, including ``'\\t'`` (tab), ``'\\n'``, ``'\\r'`` and ``'\\0'``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:360
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:462
msgid "All parameters are now :ref:`keyword-only <keyword-only_parameter>`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:365
msgid "Return the Python representation of *s* (a :class:`str` instance containing a JSON document)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:368
msgid ":exc:`JSONDecodeError` will be raised if the given JSON document is not valid."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:373
msgid "Decode a JSON document from *s* (a :class:`str` beginning with a JSON document) and return a 2-tuple of the Python representation and the index in *s* where the document ended."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:377
msgid "This can be used to decode a JSON document from a string that may have extraneous data at the end."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:383
msgid "Extensible JSON encoder for Python data structures."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:385
msgid "Supports the following objects and types by default:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:394
msgid "list, tuple"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:398
msgid "int, float, int- & float-derived Enums"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:398
msgid "number"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:407
msgid "Added support for int- and float-derived Enum classes."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:410
msgid "To extend this to recognize other objects, subclass and implement a :meth:`default` method with another method that returns a serializable object for ``o`` if possible, otherwise it should call the superclass implementation (to raise :exc:`TypeError`)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:415
msgid "If *skipkeys* is false (the default), then it is a :exc:`TypeError` to attempt encoding of keys that are not :class:`str`, :class:`int`, :class:`float` or ``None``.  If *skipkeys* is true, such items are simply skipped."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:424
msgid "If *check_circular* is true (the default), then lists, dicts, and custom encoded objects will be checked for circular references during encoding to prevent an infinite recursion (which would cause an :exc:`OverflowError`). Otherwise, no such check takes place."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:429
msgid "If *allow_nan* is true (the default), then ``NaN``, ``Infinity``, and ``-Infinity`` will be encoded as such.  This behavior is not JSON specification compliant, but is consistent with most JavaScript based encoders and decoders.  Otherwise, it will be a :exc:`ValueError` to encode such floats."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:435
msgid "If *sort_keys* is true (default: ``False``), then the output of dictionaries will be sorted by key; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:468
msgid "Implement this method in a subclass such that it returns a serializable object for *o*, or calls the base implementation (to raise a :exc:`TypeError`)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:472
msgid "For example, to support arbitrary iterators, you could implement default like this::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:488
msgid "Return a JSON string representation of a Python data structure, *o*.  For example::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:497
msgid "Encode the given object, *o*, and yield each string representation as available.  For example::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:505
msgid "Exceptions"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:509
msgid "Subclass of :exc:`ValueError` with the following additional attributes:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:513
msgid "The unformatted error message."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:517
msgid "The JSON document being parsed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:521
msgid "The start index of *doc* where parsing failed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:525
msgid "The line corresponding to *pos*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:529
msgid "The column corresponding to *pos*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:535
msgid "Standard Compliance and Interoperability"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:537
msgid "The JSON format is specified by :rfc:`7159` and by `ECMA-404 <http://www.ecma-international.org/publications/standards/Ecma-404.htm>`_. This section details this module's level of compliance with the RFC. For simplicity, :class:`JSONEncoder` and :class:`JSONDecoder` subclasses, and parameters other than those explicitly mentioned, are not considered."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:543
msgid "This module does not comply with the RFC in a strict fashion, implementing some extensions that are valid JavaScript but not valid JSON.  In particular:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:546
msgid "Infinite and NaN number values are accepted and output;"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:547
msgid "Repeated names within an object are accepted, and only the value of the last name-value pair is used."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:550
msgid "Since the RFC permits RFC-compliant parsers to accept input texts that are not RFC-compliant, this module's deserializer is technically RFC-compliant under default settings."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:555
msgid "Character Encodings"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:557
msgid "The RFC requires that JSON be represented using either UTF-8, UTF-16, or UTF-32, with UTF-8 being the recommended default for maximum interoperability."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:560
msgid "As permitted, though not required, by the RFC, this module's serializer sets *ensure_ascii=True* by default, thus escaping the output so that the resulting strings only contain ASCII characters."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:564
msgid "Other than the *ensure_ascii* parameter, this module is defined strictly in terms of conversion between Python objects and :class:`Unicode strings <str>`, and thus does not otherwise directly address the issue of character encodings."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:569
msgid "The RFC prohibits adding a byte order mark (BOM) to the start of a JSON text, and this module's serializer does not add a BOM to its output. The RFC permits, but does not require, JSON deserializers to ignore an initial BOM in their input.  This module's deserializer raises a :exc:`ValueError` when an initial BOM is present."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:575
msgid "The RFC does not explicitly forbid JSON strings which contain byte sequences that don't correspond to valid Unicode characters (e.g. unpaired UTF-16 surrogates), but it does note that they may cause interoperability problems. By default, this module accepts and outputs (when present in the original :class:`str`) code points for such sequences."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:583
msgid "Infinite and NaN Number Values"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:585
msgid "The RFC does not permit the representation of infinite or NaN number values. Despite that, by default, this module accepts and outputs ``Infinity``, ``-Infinity``, and ``NaN`` as if they were valid JSON number literal values::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:600
msgid "In the serializer, the *allow_nan* parameter can be used to alter this behavior.  In the deserializer, the *parse_constant* parameter can be used to alter this behavior."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:606
msgid "Repeated Names Within an Object"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:608
msgid "The RFC specifies that the names within a JSON object should be unique, but does not mandate how repeated names in JSON objects should be handled.  By default, this module does not raise an exception; instead, it ignores all but the last name-value pair for a given name::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:617
msgid "The *object_pairs_hook* parameter can be used to alter this behavior."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:621
msgid "Top-level Non-Object, Non-Array Values"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:623
msgid "The old version of JSON specified by the obsolete :rfc:`4627` required that the top-level value of a JSON text must be either a JSON object or array (Python :class:`dict` or :class:`list`), and could not be a JSON null, boolean, number, or string value.  :rfc:`7159` removed that restriction, and this module does not and has never implemented that restriction in either its serializer or its deserializer."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:630
msgid "Regardless, for maximum interoperability, you may wish to voluntarily adhere to the restriction yourself."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:635
msgid "Implementation Limitations"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:637
msgid "Some JSON deserializer implementations may set limits on:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:639
msgid "the size of accepted JSON texts"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:640
msgid "the maximum level of nesting of JSON objects and arrays"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:641
msgid "the range and precision of JSON numbers"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:642
msgid "the content and maximum length of JSON strings"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:644
msgid "This module does not impose any such limits beyond those of the relevant Python datatypes themselves or the Python interpreter itself."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:647
msgid "When serializing to JSON, beware any such limitations in applications that may consume your JSON.  In particular, it is common for JSON numbers to be deserialized into IEEE 754 double precision numbers and thus subject to that representation's range and precision limitations.  This is especially relevant when serializing Python :class:`int` values of extremely large magnitude, or when serializing instances of \"exotic\" numerical types such as :class:`decimal.Decimal`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:660
msgid "Command Line Interface"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:665
msgid "**Source code:** :source:`Lib/json/tool.py`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:669
msgid "The :mod:`json.tool` module provides a simple command line interface to validate and pretty-print JSON objects."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:672
msgid "If the optional ``infile`` and ``outfile`` arguments are not specified, :attr:`sys.stdin` and :attr:`sys.stdout` will be used respectively:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:684
msgid "The output is now in the same order as the input. Use the :option:`--sort-keys` option to sort the output of dictionaries alphabetically by key."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:691
msgid "Command line options"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:695
msgid "The JSON file to be validated or pretty-printed:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:711
msgid "If *infile* is not specified, read from :attr:`sys.stdin`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:715
msgid "Write the output of the *infile* to the given *outfile*. Otherwise, write it to :attr:`sys.stdout`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:720
msgid "Sort the output of dictionaries alphabetically by key."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:726
msgid "Show the help message."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:730
msgid "Footnotes"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/json.rst:731
msgid "As noted in `the errata for RFC 7159 <https://www.rfc-editor.org/errata_search.php?rfc=7159>`_, JSON permits literal U+2028 (LINE SEPARATOR) and U+2029 (PARAGRAPH SEPARATOR) characters in strings, whereas JavaScript (as of ECMAScript Edition 5.1) does not."
msgstr ""

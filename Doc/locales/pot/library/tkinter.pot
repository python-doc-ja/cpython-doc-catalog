# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/tkinter.rst:2
msgid ":mod:`Tkinter` --- Python interface to Tcl/Tk"
msgstr ""

#: ../../library/tkinter.rst:9
msgid "The :mod:`Tkinter` module (\"Tk interface\") is the standard Python interface to the Tk GUI toolkit.  Both Tk and :mod:`Tkinter` are available on most Unix platforms, as well as on Windows systems.  (Tk itself is not part of Python; it is maintained at ActiveState.)"
msgstr ""

#: ../../library/tkinter.rst:14
msgid "Running ``python -m Tkinter`` from the command line should open a window demonstrating a simple Tk interface, letting you know that :mod:`Tkinter` is properly installed on your system, and also showing what version of Tcl/Tk is installed, so you can read the Tcl/Tk documentation specific to that version."
msgstr ""

#: ../../library/tkinter.rst:21
msgid ":mod:`Tkinter` has been renamed to :mod:`tkinter` in Python 3.  The :term:`2to3` tool will automatically adapt imports when converting your sources to Python 3."
msgstr ""

#: ../../library/tkinter.rst:27
msgid "Tkinter documentation:"
msgstr ""

#: ../../library/tkinter.rst:31
msgid "`Python Tkinter Resources <https://wiki.python.org/moin/TkInter>`_"
msgstr ""

#: ../../library/tkinter.rst:30
msgid "The Python Tkinter Topic Guide provides a great deal of information on using Tk from Python and links to other sources of information on Tk."
msgstr ""

#: ../../library/tkinter.rst:34
msgid "`TKDocs <http://www.tkdocs.com/>`_"
msgstr ""

#: ../../library/tkinter.rst:34
msgid "Extensive tutorial plus friendlier widget pages for some of the widgets."
msgstr ""

#: ../../library/tkinter.rst:37
msgid "`Tkinter 8.5 reference: a GUI for Python <https://web.archive.org/web/20190524140835/https://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html>`_"
msgstr ""

#: ../../library/tkinter.rst:37
msgid "On-line reference material."
msgstr ""

#: ../../library/tkinter.rst:40
msgid "`Tkinter docs from effbot <http://effbot.org/tkinterbook/>`_"
msgstr ""

#: ../../library/tkinter.rst:40
msgid "Online reference for tkinter supported by effbot.org."
msgstr ""

#: ../../library/tkinter.rst:43
msgid "`Programming Python <http://learning-python.com/about-pp4e.html>`_"
msgstr ""

#: ../../library/tkinter.rst:43
msgid "Book by Mark Lutz, has excellent coverage of Tkinter."
msgstr ""

#: ../../library/tkinter.rst:46
msgid "`Modern Tkinter for Busy Python Developers <https://www.amazon.com/Modern-Tkinter-Python-Developers-ebook/dp/B0071QDNLO/>`_"
msgstr ""

#: ../../library/tkinter.rst:46
msgid "Book by Mark Roseman about building attractive and modern graphical user interfaces with Python and Tkinter."
msgstr ""

#: ../../library/tkinter.rst:49
msgid "`Python and Tkinter Programming <https://www.manning.com/books/python-and-tkinter-programming>`_"
msgstr ""

#: ../../library/tkinter.rst:49
msgid "Book by John Grayson (ISBN 1-884777-81-3)."
msgstr ""

#: ../../library/tkinter.rst:51
msgid "Tcl/Tk documentation:"
msgstr ""

#: ../../library/tkinter.rst:55
msgid "`Tk commands <https://www.tcl.tk/man/tcl8.6/TkCmd/contents.htm>`_"
msgstr ""

#: ../../library/tkinter.rst:54
msgid "Most commands are available as :mod:`Tkinter` or :mod:`Tkinter.ttk` classes. Change '8.6' to match the version of your Tcl/Tk installation."
msgstr ""

#: ../../library/tkinter.rst:58
msgid "`Tcl/Tk recent man pages <https://www.tcl.tk/doc/>`_"
msgstr ""

#: ../../library/tkinter.rst:58
msgid "Recent Tcl/Tk manuals on www.tcl.tk."
msgstr ""

#: ../../library/tkinter.rst:61
msgid "`ActiveState Tcl Home Page <http://tcl.activestate.com/>`_"
msgstr ""

#: ../../library/tkinter.rst:61
msgid "The Tk/Tcl development is largely taking place at ActiveState."
msgstr ""

#: ../../library/tkinter.rst:64
msgid "`Tcl and the Tk Toolkit <https://www.amazon.com/exec/obidos/ASIN/020163337X>`_"
msgstr ""

#: ../../library/tkinter.rst:64
msgid "Book by John Ousterhout, the inventor of Tcl."
msgstr ""

#: ../../library/tkinter.rst:66
msgid "`Practical Programming in Tcl and Tk <http://www.beedub.com/book/>`_"
msgstr ""

#: ../../library/tkinter.rst:67
msgid "Brent Welch's encyclopedic book."
msgstr ""

#: ../../library/tkinter.rst:71
msgid "Tkinter Modules"
msgstr ""

#: ../../library/tkinter.rst:73
msgid "Most of the time, the :mod:`Tkinter` module is all you really need, but a number of additional modules are available as well.  The Tk interface is located in a binary module named :mod:`_tkinter`. This module contains the low-level interface to Tk, and should never be used directly by application programmers. It is usually a shared library (or DLL), but might in some cases be statically linked with the Python interpreter."
msgstr ""

#: ../../library/tkinter.rst:80
msgid "In addition to the Tk interface module, :mod:`Tkinter` includes a number of Python modules. The two most important modules are the :mod:`Tkinter` module itself, and a module called :mod:`Tkconstants`. The former automatically imports the latter, so to use Tkinter, all you need to do is to import one module::"
msgstr ""

#: ../../library/tkinter.rst:87
msgid "Or, more often::"
msgstr ""

#: ../../library/tkinter.rst:94
msgid "The :class:`Tk` class is instantiated without arguments. This creates a toplevel widget of Tk which usually is the main window of an application. Each instance has its own associated Tcl interpreter."
msgstr ""

#: ../../library/tkinter.rst:100
msgid "The *useTk* parameter was added."
msgstr ""

#: ../../library/tkinter.rst:106
msgid "The :func:`Tcl` function is a factory function which creates an object much like that created by the :class:`Tk` class, except that it does not initialize the Tk subsystem.  This is most often useful when driving the Tcl interpreter in an environment where one doesn't want to create extraneous toplevel windows, or where one cannot (such as Unix/Linux systems without an X server).  An object created by the :func:`Tcl` object can have a Toplevel window created (and the Tk subsystem initialized) by calling its :meth:`loadtk` method."
msgstr ""

#: ../../library/tkinter.rst:116
msgid "Other modules that provide Tk support include:"
msgstr ""

#: ../../library/tkinter.rst:119
msgid ":mod:`ScrolledText`"
msgstr ""

#: ../../library/tkinter.rst:119
msgid "Text widget with a vertical scroll bar built in."
msgstr ""

#: ../../library/tkinter.rst:122
msgid ":mod:`tkColorChooser`"
msgstr ""

#: ../../library/tkinter.rst:122
msgid "Dialog to let the user choose a color."
msgstr ""

#: ../../library/tkinter.rst:125
msgid ":mod:`tkCommonDialog`"
msgstr ""

#: ../../library/tkinter.rst:125
msgid "Base class for the dialogs defined in the other modules listed here."
msgstr ""

#: ../../library/tkinter.rst:128
msgid ":mod:`tkFileDialog`"
msgstr ""

#: ../../library/tkinter.rst:128
msgid "Common dialogs to allow the user to specify a file to open or save."
msgstr ""

#: ../../library/tkinter.rst:131
msgid ":mod:`tkFont`"
msgstr ""

#: ../../library/tkinter.rst:131
msgid "Utilities to help work with fonts."
msgstr ""

#: ../../library/tkinter.rst:134
msgid ":mod:`tkMessageBox`"
msgstr ""

#: ../../library/tkinter.rst:134
msgid "Access to standard Tk dialog boxes."
msgstr ""

#: ../../library/tkinter.rst:137
msgid ":mod:`tkSimpleDialog`"
msgstr ""

#: ../../library/tkinter.rst:137
msgid "Basic dialogs and convenience functions."
msgstr ""

#: ../../library/tkinter.rst:141
msgid ":mod:`Tkdnd`"
msgstr ""

#: ../../library/tkinter.rst:140
msgid "Drag-and-drop support for :mod:`Tkinter`. This is experimental and should become deprecated when it is replaced  with the Tk DND."
msgstr ""

#: ../../library/tkinter.rst:144
msgid ":mod:`turtle`"
msgstr ""

#: ../../library/tkinter.rst:144
msgid "Turtle graphics in a Tk window."
msgstr ""

#: ../../library/tkinter.rst:146
msgid "These have been renamed as well in Python 3; they were all made submodules of the new ``tkinter`` package."
msgstr ""

#: ../../library/tkinter.rst:151
msgid "Tkinter Life Preserver"
msgstr ""

#: ../../library/tkinter.rst:156
msgid "This section is not designed to be an exhaustive tutorial on either Tk or Tkinter.  Rather, it is intended as a stop gap, providing some introductory orientation on the system."
msgstr ""

#: ../../library/tkinter.rst:160
msgid "Credits:"
msgstr ""

#: ../../library/tkinter.rst:162
msgid "Tkinter was written by Steen Lumholt and Guido van Rossum."
msgstr ""

#: ../../library/tkinter.rst:164
msgid "Tk was written by John Ousterhout while at Berkeley."
msgstr ""

#: ../../library/tkinter.rst:166
msgid "This Life Preserver was written by Matt Conway at the University of Virginia."
msgstr ""

#: ../../library/tkinter.rst:168
msgid "The html rendering, and some liberal editing, was produced from a FrameMaker version by Ken Manheimer."
msgstr ""

#: ../../library/tkinter.rst:171
msgid "Fredrik Lundh elaborated and revised the class interface descriptions, to get them current with Tk 4.2."
msgstr ""

#: ../../library/tkinter.rst:174
msgid "Mike Clarkson converted the documentation to LaTeX, and compiled the  User Interface chapter of the reference manual."
msgstr ""

#: ../../library/tkinter.rst:179
msgid "How To Use This Section"
msgstr ""

#: ../../library/tkinter.rst:181
msgid "This section is designed in two parts: the first half (roughly) covers background material, while the second half can be taken to the keyboard as a handy reference."
msgstr ""

#: ../../library/tkinter.rst:185
msgid "When trying to answer questions of the form \"how do I do blah\", it is often best to find out how to do \"blah\" in straight Tk, and then convert this back into the corresponding :mod:`Tkinter` call. Python programmers can often guess at the correct Python command by looking at the Tk documentation. This means that in order to use Tkinter, you will have to know a little bit about Tk. This document can't fulfill that role, so the best we can do is point you to the best documentation that exists. Here are some hints:"
msgstr ""

#: ../../library/tkinter.rst:193
msgid "The authors strongly suggest getting a copy of the Tk man pages. Specifically, the man pages in the ``mann`` directory are most useful. The ``man3`` man pages describe the C interface to the Tk library and thus are not especially helpful for script writers."
msgstr ""

#: ../../library/tkinter.rst:198
msgid "Addison-Wesley publishes a book called Tcl and the Tk Toolkit by John Ousterhout (ISBN 0-201-63337-X) which is a good introduction to Tcl and Tk for the novice.  The book is not exhaustive, and for many details it defers to the man pages."
msgstr ""

#: ../../library/tkinter.rst:203
msgid ":file:`Tkinter.py` is a last resort for most, but can be a good place to go when nothing else makes sense."
msgstr ""

#: ../../library/tkinter.rst:208
msgid "A Simple Hello World Program"
msgstr ""

#: ../../library/tkinter.rst:244
msgid "A (Very) Quick Look at Tcl/Tk"
msgstr ""

#: ../../library/tkinter.rst:246
msgid "The class hierarchy looks complicated, but in actual practice, application programmers almost always refer to the classes at the very bottom of the hierarchy."
msgstr ""

#: ../../library/tkinter.rst:250
msgid "Notes:"
msgstr ""

#: ../../library/tkinter.rst:252
msgid "These classes are provided for the purposes of organizing certain functions under one namespace. They aren't meant to be instantiated independently."
msgstr ""

#: ../../library/tkinter.rst:255
msgid "The :class:`Tk` class is meant to be instantiated only once in an application. Application programmers need not instantiate one explicitly, the system creates one whenever any of the other classes are instantiated."
msgstr ""

#: ../../library/tkinter.rst:259
msgid "The :class:`Widget` class is not meant to be instantiated, it is meant only for subclassing to make \"real\" widgets (in C++, this is called an 'abstract class')."
msgstr ""

#: ../../library/tkinter.rst:263
msgid "To make use of this reference material, there will be times when you will need to know how to read short passages of Tk and how to identify the various parts of a Tk command.   (See section :ref:`tkinter-basic-mapping` for the :mod:`Tkinter` equivalents of what's below.)"
msgstr ""

#: ../../library/tkinter.rst:268
msgid "Tk scripts are Tcl programs.  Like all Tcl programs, Tk scripts are just lists of tokens separated by spaces.  A Tk widget is just its *class*, the *options* that help configure it, and the *actions* that make it do useful things."
msgstr ""

#: ../../library/tkinter.rst:272
msgid "To make a widget in Tk, the command is always of the form::"
msgstr ""

#: ../../library/tkinter.rst:277
msgid "*classCommand*"
msgstr ""

#: ../../library/tkinter.rst:277
msgid "denotes which kind of widget to make (a button, a label, a menu...)"
msgstr ""

#: ../../library/tkinter.rst:284
msgid "*newPathname*"
msgstr ""

#: ../../library/tkinter.rst:280
msgid "is the new name for this widget.  All names in Tk must be unique.  To help enforce this, widgets in Tk are named with *pathnames*, just like files in a file system.  The top level widget, the *root*, is called ``.`` (period) and children are delimited by more periods.  For example, ``.myApp.controlPanel.okButton`` might be the name of a widget."
msgstr ""

#: ../../library/tkinter.rst:290
msgid "*options*"
msgstr ""

#: ../../library/tkinter.rst:287
msgid "configure the widget's appearance and in some cases, its behavior.  The options come in the form of a list of flags and values. Flags are preceded by a '-', like Unix shell command flags, and values are put in quotes if they are more than one word."
msgstr ""

#: ../../library/tkinter.rst:292
#: ../../library/tkinter.rst:553
#: ../../library/tkinter.rst:729
msgid "For example::"
msgstr ""

#: ../../library/tkinter.rst:300
msgid "Once created, the pathname to the widget becomes a new command.  This new *widget command* is the programmer's handle for getting the new widget to perform some *action*.  In C, you'd express this as someAction(fred, someOptions), in C++, you would express this as fred.someAction(someOptions), and in Tk, you say::"
msgstr ""

#: ../../library/tkinter.rst:308
msgid "Note that the object name, ``.fred``, starts with a dot."
msgstr ""

#: ../../library/tkinter.rst:310
msgid "As you'd expect, the legal values for *someAction* will depend on the widget's class: ``.fred disable`` works if fred is a button (fred gets greyed out), but does not work if fred is a label (disabling of labels is not supported in Tk)."
msgstr ""

#: ../../library/tkinter.rst:314
msgid "The legal values of *someOptions* is action dependent.  Some actions, like ``disable``, require no arguments, others, like a text-entry box's ``delete`` command, would need arguments to specify what range of text to delete."
msgstr ""

#: ../../library/tkinter.rst:322
msgid "Mapping Basic Tk into Tkinter"
msgstr ""

#: ../../library/tkinter.rst:324
msgid "Class commands in Tk correspond to class constructors in Tkinter. ::"
msgstr ""

#: ../../library/tkinter.rst:328
msgid "The master of an object is implicit in the new name given to it at creation time.  In Tkinter, masters are specified explicitly. ::"
msgstr ""

#: ../../library/tkinter.rst:333
msgid "The configuration options in Tk are given in lists of hyphened tags followed by values.  In Tkinter, options are specified as keyword-arguments in the instance constructor, and keyword-args for configure calls or as instance indices, in dictionary style, for established instances.  See section :ref:`tkinter-setting-options` on setting options. ::"
msgstr ""

#: ../../library/tkinter.rst:343
msgid "In Tk, to perform an action on a widget, use the widget name as a command, and follow it with an action name, possibly with arguments (options).  In Tkinter, you call methods on the class instance to invoke actions on the widget.  The actions (methods) that a given widget can perform are listed in the Tkinter.py module. ::"
msgstr ""

#: ../../library/tkinter.rst:351
msgid "To give a widget to the packer (geometry manager), you call pack with optional arguments.  In Tkinter, the Pack class holds all this functionality, and the various forms of the pack command are implemented as methods.  All widgets in :mod:`Tkinter` are subclassed from the Packer, and so inherit all the packing methods. See the :mod:`Tix` module documentation for additional information on the Form geometry manager. ::"
msgstr ""

#: ../../library/tkinter.rst:362
msgid "How Tk and Tkinter are Related"
msgstr ""

#: ../../library/tkinter.rst:364
msgid "From the top down:"
msgstr ""

#: ../../library/tkinter.rst:367
msgid "Your App Here (Python)"
msgstr ""

#: ../../library/tkinter.rst:367
msgid "A Python application makes a :mod:`Tkinter` call."
msgstr ""

#: ../../library/tkinter.rst:373
msgid "Tkinter (Python Module)"
msgstr ""

#: ../../library/tkinter.rst:370
msgid "This call (say, for example, creating a button widget), is implemented in the *Tkinter* module, which is written in Python.  This Python function will parse the commands and the arguments and convert them into a form that makes them look as if they had come from a Tk script instead of a Python script."
msgstr ""

#: ../../library/tkinter.rst:377
msgid "tkinter (C)"
msgstr ""

#: ../../library/tkinter.rst:376
msgid "These commands and their arguments will be passed to a C function in the *tkinter* - note the lowercase - extension module."
msgstr ""

#: ../../library/tkinter.rst:384
msgid "Tk Widgets (C and Tcl)"
msgstr ""

#: ../../library/tkinter.rst:380
msgid "This C function is able to make calls into other C modules, including the C functions that make up the Tk library.  Tk is implemented in C and some Tcl. The Tcl part of the Tk widgets is used to bind certain default behaviors to widgets, and is executed once at the point where the Python :mod:`Tkinter` module is imported. (The user never sees this stage)."
msgstr ""

#: ../../library/tkinter.rst:387
msgid "Tk (C)"
msgstr ""

#: ../../library/tkinter.rst:387
msgid "The Tk part of the Tk Widgets implement the final mapping to ..."
msgstr ""

#: ../../library/tkinter.rst:391
msgid "Xlib (C)"
msgstr ""

#: ../../library/tkinter.rst:390
msgid "the Xlib library to draw graphics on the screen."
msgstr ""

#: ../../library/tkinter.rst:394
msgid "Handy Reference"
msgstr ""

#: ../../library/tkinter.rst:400
msgid "Setting Options"
msgstr ""

#: ../../library/tkinter.rst:402
msgid "Options control things like the color and border width of a widget. Options can be set in three ways:"
msgstr ""

#: ../../library/tkinter.rst:408
msgid "At object creation time, using keyword arguments"
msgstr ""

#: ../../library/tkinter.rst:414
msgid "After object creation, treating the option name like a dictionary index"
msgstr ""

#: ../../library/tkinter.rst:419
msgid "Use the config() method to update multiple attrs subsequent to object creation"
msgstr ""

#: ../../library/tkinter.rst:421
msgid "For a complete explanation of a given option and its behavior, see the Tk man pages for the widget in question."
msgstr ""

#: ../../library/tkinter.rst:424
msgid "Note that the man pages list \"STANDARD OPTIONS\" and \"WIDGET SPECIFIC OPTIONS\" for each widget.  The former is a list of options that are common to many widgets, the latter are the options that are idiosyncratic to that particular widget.  The Standard Options are documented on the :manpage:`options(3)` man page."
msgstr ""

#: ../../library/tkinter.rst:430
msgid "No distinction between standard and widget-specific options is made in this document.  Some options don't apply to some kinds of widgets. Whether a given widget responds to a particular option depends on the class of the widget; buttons have a ``command`` option, labels do not."
msgstr ""

#: ../../library/tkinter.rst:435
msgid "The options supported by a given widget are listed in that widget's man page, or can be queried at runtime by calling the :meth:`config` method without arguments, or by calling the :meth:`keys` method on that widget.  The return value of these calls is a dictionary whose key is the name of the option as a string (for example, ``'relief'``) and whose values are 5-tuples."
msgstr ""

#: ../../library/tkinter.rst:441
msgid "Some options, like ``bg`` are synonyms for common options with long names (``bg`` is shorthand for \"background\"). Passing the ``config()`` method the name of a shorthand option will return a 2-tuple, not 5-tuple. The 2-tuple passed back will contain the name of the synonym and the \"real\" option (such as ``('bg', 'background')``)."
msgstr ""

#: ../../library/tkinter.rst:448
msgid "Index"
msgstr ""

#: ../../library/tkinter.rst:448
msgid "Meaning"
msgstr ""

#: ../../library/tkinter.rst:448
msgid "Example"
msgstr ""

#: ../../library/tkinter.rst:450
msgid "0"
msgstr ""

#: ../../library/tkinter.rst:450
msgid "option name"
msgstr ""

#: ../../library/tkinter.rst:450
#: ../../library/tkinter.rst:452
msgid "``'relief'``"
msgstr ""

#: ../../library/tkinter.rst:452
msgid "1"
msgstr ""

#: ../../library/tkinter.rst:452
msgid "option name for database lookup"
msgstr ""

#: ../../library/tkinter.rst:454
msgid "2"
msgstr ""

#: ../../library/tkinter.rst:454
msgid "option class for database lookup"
msgstr ""

#: ../../library/tkinter.rst:454
msgid "``'Relief'``"
msgstr ""

#: ../../library/tkinter.rst:457
msgid "3"
msgstr ""

#: ../../library/tkinter.rst:457
msgid "default value"
msgstr ""

#: ../../library/tkinter.rst:457
msgid "``'raised'``"
msgstr ""

#: ../../library/tkinter.rst:459
msgid "4"
msgstr ""

#: ../../library/tkinter.rst:459
msgid "current value"
msgstr ""

#: ../../library/tkinter.rst:459
msgid "``'groove'``"
msgstr ""

#: ../../library/tkinter.rst:462
msgid "Example::"
msgstr ""

#: ../../library/tkinter.rst:467
msgid "Of course, the dictionary printed will include all the options available and their values.  This is meant only as an example."
msgstr ""

#: ../../library/tkinter.rst:472
msgid "The Packer"
msgstr ""

#: ../../library/tkinter.rst:476
msgid "The packer is one of Tk's geometry-management mechanisms.    Geometry managers are used to specify the relative positioning of the positioning of widgets within their container - their mutual *master*.  In contrast to the more cumbersome *placer* (which is used less commonly, and we do not cover here), the packer takes qualitative relationship specification - *above*, *to the left of*, *filling*, etc - and works everything out to determine the exact placement coordinates for you."
msgstr ""

#: ../../library/tkinter.rst:484
msgid "The size of any *master* widget is determined by the size of the \"slave widgets\" inside.  The packer is used to control where slave widgets appear inside the master into which they are packed.  You can pack widgets into frames, and frames into other frames, in order to achieve the kind of layout you desire. Additionally, the arrangement is dynamically adjusted to accommodate incremental changes to the configuration, once it is packed."
msgstr ""

#: ../../library/tkinter.rst:491
msgid "Note that widgets do not appear until they have had their geometry specified with a geometry manager.  It's a common early mistake to leave out the geometry specification, and then be surprised when the widget is created but nothing appears.  A widget will appear only after it has had, for example, the packer's :meth:`pack` method applied to it."
msgstr ""

#: ../../library/tkinter.rst:497
msgid "The pack() method can be called with keyword-option/value pairs that control where the widget is to appear within its container, and how it is to behave when the main application window is resized.  Here are some examples::"
msgstr ""

#: ../../library/tkinter.rst:507
msgid "Packer Options"
msgstr ""

#: ../../library/tkinter.rst:509
msgid "For more extensive information on the packer and the options that it can take, see the man pages and page 183 of John Ousterhout's book."
msgstr ""

#: ../../library/tkinter.rst:513
#: ../../library/tkinter.rst:629
msgid "anchor"
msgstr ""

#: ../../library/tkinter.rst:513
msgid "Anchor type.  Denotes where the packer is to place each slave in its parcel."
msgstr ""

#: ../../library/tkinter.rst:516
msgid "expand"
msgstr ""

#: ../../library/tkinter.rst:516
msgid "Boolean, ``0`` or ``1``."
msgstr ""

#: ../../library/tkinter.rst:519
msgid "fill"
msgstr ""

#: ../../library/tkinter.rst:519
msgid "Legal values: ``'x'``, ``'y'``, ``'both'``, ``'none'``."
msgstr ""

#: ../../library/tkinter.rst:522
msgid "ipadx and ipady"
msgstr ""

#: ../../library/tkinter.rst:522
msgid "A distance - designating internal padding on each side of the slave widget."
msgstr ""

#: ../../library/tkinter.rst:525
msgid "padx and pady"
msgstr ""

#: ../../library/tkinter.rst:525
msgid "A distance - designating external padding on each side of the slave widget."
msgstr ""

#: ../../library/tkinter.rst:529
msgid "side"
msgstr ""

#: ../../library/tkinter.rst:528
msgid "Legal values are: ``'left'``, ``'right'``, ``'top'``, ``'bottom'``."
msgstr ""

#: ../../library/tkinter.rst:532
msgid "Coupling Widget Variables"
msgstr ""

#: ../../library/tkinter.rst:534
msgid "The current-value setting of some widgets (like text entry widgets) can be connected directly to application variables by using special options.  These options are ``variable``, ``textvariable``, ``onvalue``, ``offvalue``, and ``value``.  This connection works both ways: if the variable changes for any reason, the widget it's connected to will be updated to reflect the new value."
msgstr ""

#: ../../library/tkinter.rst:540
msgid "Unfortunately, in the current implementation of :mod:`Tkinter` it is not possible to hand over an arbitrary Python variable to a widget through a ``variable`` or ``textvariable`` option.  The only kinds of variables for which this works are variables that are subclassed from a class called Variable, defined in the :mod:`Tkinter` module."
msgstr ""

#: ../../library/tkinter.rst:546
msgid "There are many useful subclasses of Variable already defined: :class:`StringVar`, :class:`IntVar`, :class:`DoubleVar`, and :class:`BooleanVar`.  To read the current value of such a variable, call the :meth:`get` method on it, and to change its value you call the :meth:`!set` method.  If you follow this protocol, the widget will always track the value of the variable, with no further intervention on your part."
msgstr ""

#: ../../library/tkinter.rst:582
msgid "The Window Manager"
msgstr ""

#: ../../library/tkinter.rst:586
msgid "In Tk, there is a utility command, ``wm``, for interacting with the window manager.  Options to the ``wm`` command allow you to control things like titles, placement, icon bitmaps, and the like.  In :mod:`Tkinter`, these commands have been implemented as methods on the :class:`Wm` class.  Toplevel widgets are subclassed from the :class:`Wm` class, and so can call the :class:`Wm` methods directly."
msgstr ""

#: ../../library/tkinter.rst:593
msgid "To get at the toplevel window that contains a given widget, you can often just refer to the widget's master.  Of course if the widget has been packed inside of a frame, the master won't represent a toplevel window.  To get at the toplevel window that contains an arbitrary widget, you can call the :meth:`_root` method. This method begins with an underscore to denote the fact that this function is part of the implementation, and not an interface to Tk functionality."
msgstr ""

#: ../../library/tkinter.rst:600
msgid "Here are some examples of typical usage::"
msgstr ""

#: ../../library/tkinter.rst:623
msgid "Tk Option Data Types"
msgstr ""

#: ../../library/tkinter.rst:628
msgid "Legal values are points of the compass: ``\"n\"``, ``\"ne\"``, ``\"e\"``, ``\"se\"``, ``\"s\"``, ``\"sw\"``, ``\"w\"``, ``\"nw\"``, and also ``\"center\"``."
msgstr ""

#: ../../library/tkinter.rst:635
msgid "bitmap"
msgstr ""

#: ../../library/tkinter.rst:632
msgid "There are eight built-in, named bitmaps: ``'error'``, ``'gray25'``, ``'gray50'``, ``'hourglass'``, ``'info'``, ``'questhead'``, ``'question'``, ``'warning'``.  To specify an X bitmap filename, give the full path to the file, preceded with an ``@``, as in ``\"@/usr/contrib/bitmap/gumby.bit\"``."
msgstr ""

#: ../../library/tkinter.rst:638
msgid "boolean"
msgstr ""

#: ../../library/tkinter.rst:638
msgid "You can pass integers 0 or 1 or the strings ``\"yes\"`` or ``\"no\"``."
msgstr ""

#: ../../library/tkinter.rst:645
msgid "callback"
msgstr ""

#: ../../library/tkinter.rst:641
msgid "This is any Python function that takes no arguments.  For example::"
msgstr ""

#: ../../library/tkinter.rst:651
msgid "color"
msgstr ""

#: ../../library/tkinter.rst:648
msgid "Colors can be given as the names of X colors in the rgb.txt file, or as strings representing RGB values in 4 bit: ``\"#RGB\"``, 8 bit: ``\"#RRGGBB\"``, 12 bit\" ``\"#RRRGGGBBB\"``, or 16 bit ``\"#RRRRGGGGBBBB\"`` ranges, where R,G,B here represent any legal hex digit.  See page 160 of Ousterhout's book for details."
msgstr ""

#: ../../library/tkinter.rst:657
msgid "cursor"
msgstr ""

#: ../../library/tkinter.rst:654
msgid "The standard X cursor names from :file:`cursorfont.h` can be used, without the ``XC_`` prefix.  For example to get a hand cursor (:const:`XC_hand2`), use the string ``\"hand2\"``.  You can also specify a bitmap and mask file of your own. See page 179 of Ousterhout's book."
msgstr ""

#: ../../library/tkinter.rst:664
msgid "distance"
msgstr ""

#: ../../library/tkinter.rst:660
msgid "Screen distances can be specified in either pixels or absolute distances. Pixels are given as numbers and absolute distances as strings, with the trailing character denoting units: ``c`` for centimetres, ``i`` for inches, ``m`` for millimetres, ``p`` for printer's points.  For example, 3.5 inches is expressed as ``\"3.5i\"``."
msgstr ""

#: ../../library/tkinter.rst:669
msgid "font"
msgstr ""

#: ../../library/tkinter.rst:667
msgid "Tk uses a list font name format, such as ``{courier 10 bold}``. Font sizes with positive numbers are measured in points; sizes with negative numbers are measured in pixels."
msgstr ""

#: ../../library/tkinter.rst:674
msgid "geometry"
msgstr ""

#: ../../library/tkinter.rst:672
msgid "This is a string of the form ``widthxheight``, where width and height are measured in pixels for most widgets (in characters for widgets displaying text). For example: ``fred[\"geometry\"] = \"200x100\"``."
msgstr ""

#: ../../library/tkinter.rst:678
msgid "justify"
msgstr ""

#: ../../library/tkinter.rst:677
msgid "Legal values are the strings: ``\"left\"``, ``\"center\"``, ``\"right\"``, and ``\"fill\"``."
msgstr ""

#: ../../library/tkinter.rst:683
msgid "region"
msgstr ""

#: ../../library/tkinter.rst:681
msgid "This is a string with four space-delimited elements, each of which is a legal distance (see above).  For example: ``\"2 3 4 5\"`` and ``\"3i 2i 4.5i 2i\"`` and ``\"3c 2c 4c 10.43c\"``  are all legal regions."
msgstr ""

#: ../../library/tkinter.rst:687
msgid "relief"
msgstr ""

#: ../../library/tkinter.rst:686
msgid "Determines what the border style of a widget will be.  Legal values are: ``\"raised\"``, ``\"sunken\"``, ``\"flat\"``, ``\"groove\"``, and ``\"ridge\"``."
msgstr ""

#: ../../library/tkinter.rst:693
msgid "scrollcommand"
msgstr ""

#: ../../library/tkinter.rst:690
msgid "This is almost always the :meth:`!set` method of some scrollbar widget, but can be any widget method that takes a single argument.   Refer to the file :file:`Demo/tkinter/matt/canvas-with-scrollbars.py` in the Python source distribution for an example."
msgstr ""

#: ../../library/tkinter.rst:697
msgid "wrap:"
msgstr ""

#: ../../library/tkinter.rst:696
msgid "Must be one of: ``\"none\"``, ``\"char\"``, or ``\"word\"``."
msgstr ""

#: ../../library/tkinter.rst:700
msgid "Bindings and Events"
msgstr ""

#: ../../library/tkinter.rst:706
msgid "The bind method from the widget command allows you to watch for certain events and to have a callback function trigger when that event type occurs.  The form of the bind method is::"
msgstr ""

#: ../../library/tkinter.rst:712
msgid "where:"
msgstr ""

#: ../../library/tkinter.rst:716
msgid "sequence"
msgstr ""

#: ../../library/tkinter.rst:715
msgid "is a string that denotes the target kind of event.  (See the bind man page and page 201 of John Ousterhout's book for details)."
msgstr ""

#: ../../library/tkinter.rst:721
msgid "func"
msgstr ""

#: ../../library/tkinter.rst:719
msgid "is a Python function, taking one argument, to be invoked when the event occurs. An Event instance will be passed as the argument. (Functions deployed this way are commonly known as *callbacks*.)"
msgstr ""

#: ../../library/tkinter.rst:727
msgid "add"
msgstr ""

#: ../../library/tkinter.rst:724
msgid "is optional, either ``''`` or ``'+'``.  Passing an empty string denotes that this binding is to replace any other bindings that this event is associated with.  Passing a ``'+'`` means that this function is to be added to the list of functions bound to this event type."
msgstr ""

#: ../../library/tkinter.rst:736
msgid "Notice how the widget field of the event is being accessed in the :meth:`turnRed` callback.  This field contains the widget that caught the X event.  The following table lists the other event fields you can access, and how they are denoted in Tk, which can be useful when referring to the Tk man pages. ::"
msgstr ""

#: ../../library/tkinter.rst:755
msgid "The index Parameter"
msgstr ""

#: ../../library/tkinter.rst:757
msgid "A number of widgets require\"index\" parameters to be passed.  These are used to point at a specific place in a Text widget, or to particular characters in an Entry widget, or to particular menu items in a Menu widget."
msgstr ""

#: ../../library/tkinter.rst:780
msgid "Entry widget indexes (index, view index, etc.)"
msgstr ""

#: ../../library/tkinter.rst:762
msgid "Entry widgets have options that refer to character positions in the text being displayed.  You can use these :mod:`Tkinter` functions to access these special points in text widgets:"
msgstr ""

#: ../../library/tkinter.rst:767
msgid "AtEnd()"
msgstr ""

#: ../../library/tkinter.rst:767
msgid "refers to the last position in the text"
msgstr ""

#: ../../library/tkinter.rst:770
msgid "AtInsert()"
msgstr ""

#: ../../library/tkinter.rst:770
msgid "refers to the point where the text cursor is"
msgstr ""

#: ../../library/tkinter.rst:773
msgid "AtSelFirst()"
msgstr ""

#: ../../library/tkinter.rst:773
msgid "indicates the beginning point of the selected text"
msgstr ""

#: ../../library/tkinter.rst:776
msgid "AtSelLast()"
msgstr ""

#: ../../library/tkinter.rst:776
msgid "denotes the last point of the selected text and finally"
msgstr ""

#: ../../library/tkinter.rst:780
msgid "At(x[, y])"
msgstr ""

#: ../../library/tkinter.rst:779
msgid "refers to the character at pixel location *x*, *y* (with *y* not used in the case of a text entry widget, which contains a single line of text)."
msgstr ""

#: ../../library/tkinter.rst:784
msgid "Text widget indexes"
msgstr ""

#: ../../library/tkinter.rst:783
msgid "The index notation for Text widgets is very rich and is best described in the Tk man pages."
msgstr ""

#: ../../library/tkinter.rst:809
msgid "Menu indexes (menu.invoke(), menu.entryconfig(), etc.)"
msgstr ""

#: ../../library/tkinter.rst:787
msgid "Some options and methods for menus manipulate specific menu entries. Anytime a menu index is needed for an option or a parameter, you may pass in:"
msgstr ""

#: ../../library/tkinter.rst:790
msgid "an integer which refers to the numeric position of the entry in the widget, counted from the top, starting with 0;"
msgstr ""

#: ../../library/tkinter.rst:793
msgid "the string ``'active'``, which refers to the menu position that is currently under the cursor;"
msgstr ""

#: ../../library/tkinter.rst:796
msgid "the string ``\"last\"`` which refers to the last menu item;"
msgstr ""

#: ../../library/tkinter.rst:798
msgid "An integer preceded by ``@``, as in ``@6``, where the integer is interpreted as a y pixel coordinate in the menu's coordinate system;"
msgstr ""

#: ../../library/tkinter.rst:801
msgid "the string ``\"none\"``, which indicates no menu entry at all, most often used with menu.activate() to deactivate all entries, and finally,"
msgstr ""

#: ../../library/tkinter.rst:804
msgid "a text string that is pattern matched against the label of the menu entry, as scanned from the top of the menu to the bottom.  Note that this index type is considered after all the others, which means that matches for menu items labelled ``last``, ``active``, or ``none`` may be interpreted as the above literals, instead."
msgstr ""

#: ../../library/tkinter.rst:812
msgid "Images"
msgstr ""

#: ../../library/tkinter.rst:814
msgid "Images of different formats can be created through the corresponding subclass of :class:`Tkinter.Image`:"
msgstr ""

#: ../../library/tkinter.rst:817
msgid ":class:`BitmapImage` for images in XBM format."
msgstr ""

#: ../../library/tkinter.rst:819
msgid ":class:`PhotoImage` for images in PGM, PPM, GIF and PNG formats. The latter is supported starting with Tk 8.6."
msgstr ""

#: ../../library/tkinter.rst:822
msgid "Either type of image is created through either the ``file`` or the ``data`` option (other options are available as well)."
msgstr ""

#: ../../library/tkinter.rst:825
msgid "The image object can then be used wherever an ``image`` option is supported by some widget (e.g. labels, buttons, menus). In these cases, Tk will not keep a reference to the image. When the last Python reference to the image object is deleted, the image data is deleted as well, and Tk will display an empty box wherever the image was used."
msgstr ""

#: ../../library/tkinter.rst:833
msgid "The `Pillow <http://python-pillow.org/>`_ package adds support for formats such as BMP, JPEG, TIFF, and WebP, among others."
msgstr ""

#: ../../library/tkinter.rst:839
msgid "File Handlers"
msgstr ""

#: ../../library/tkinter.rst:841
msgid "Tk allows you to register and unregister a callback function which will be called from the Tk mainloop when I/O is possible on a file descriptor. Only one handler may be registered per file descriptor. Example code::"
msgstr ""

#: ../../library/tkinter.rst:852
msgid "This feature is not available on Windows."
msgstr ""

#: ../../library/tkinter.rst:854
msgid "Since you don't know how many bytes are available for reading, you may not want to use the :class:`~io.BufferedIOBase` or :class:`~io.TextIOBase` :meth:`~io.BufferedIOBase.read` or :meth:`~io.IOBase.readline` methods, since these will insist on reading a predefined number of bytes. For sockets, the :meth:`~socket.socket.recv` or :meth:`~socket.socket.recvfrom` methods will work fine; for other files, use raw reads or ``os.read(file.fileno(), maxbytecount)``."
msgstr ""

#: ../../library/tkinter.rst:865
msgid "Registers the file handler callback function *func*. The *file* argument may either be an object with a :meth:`~io.IOBase.fileno` method (such as a file or socket object), or an integer file descriptor. The *mask* argument is an ORed combination of any of the three constants below. The callback is called as follows::"
msgstr ""

#: ../../library/tkinter.rst:876
msgid "Unregisters a file handler."
msgstr ""

#: ../../library/tkinter.rst:883
msgid "Constants used in the *mask* arguments."
msgstr ""

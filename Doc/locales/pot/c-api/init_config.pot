# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-27 11:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../c-api/init_config.rst:7
msgid "Python Initialization Configuration"
msgstr ""

#: ../../c-api/init_config.rst:11
msgid "Structures:"
msgstr ""

#: ../../c-api/init_config.rst:13
msgid ":c:type:`PyConfig`"
msgstr ""

#: ../../c-api/init_config.rst:14
msgid ":c:type:`PyPreConfig`"
msgstr ""

#: ../../c-api/init_config.rst:15
msgid ":c:type:`PyStatus`"
msgstr ""

#: ../../c-api/init_config.rst:16
msgid ":c:type:`PyWideStringList`"
msgstr ""

#: ../../c-api/init_config.rst:18
msgid "Functions:"
msgstr ""

#: ../../c-api/init_config.rst:20
msgid ":c:func:`PyConfig_Clear`"
msgstr ""

#: ../../c-api/init_config.rst:21
msgid ":c:func:`PyConfig_InitIsolatedConfig`"
msgstr ""

#: ../../c-api/init_config.rst:22
msgid ":c:func:`PyConfig_InitPythonConfig`"
msgstr ""

#: ../../c-api/init_config.rst:23
msgid ":c:func:`PyConfig_Read`"
msgstr ""

#: ../../c-api/init_config.rst:24
msgid ":c:func:`PyConfig_SetArgv`"
msgstr ""

#: ../../c-api/init_config.rst:25
msgid ":c:func:`PyConfig_SetBytesArgv`"
msgstr ""

#: ../../c-api/init_config.rst:26
msgid ":c:func:`PyConfig_SetBytesString`"
msgstr ""

#: ../../c-api/init_config.rst:27
msgid ":c:func:`PyConfig_SetString`"
msgstr ""

#: ../../c-api/init_config.rst:28
msgid ":c:func:`PyConfig_SetWideStringList`"
msgstr ""

#: ../../c-api/init_config.rst:29
msgid ":c:func:`PyPreConfig_InitIsolatedConfig`"
msgstr ""

#: ../../c-api/init_config.rst:30
msgid ":c:func:`PyPreConfig_InitPythonConfig`"
msgstr ""

#: ../../c-api/init_config.rst:31
msgid ":c:func:`PyStatus_Error`"
msgstr ""

#: ../../c-api/init_config.rst:32
msgid ":c:func:`PyStatus_Exception`"
msgstr ""

#: ../../c-api/init_config.rst:33
msgid ":c:func:`PyStatus_Exit`"
msgstr ""

#: ../../c-api/init_config.rst:34
msgid ":c:func:`PyStatus_IsError`"
msgstr ""

#: ../../c-api/init_config.rst:35
msgid ":c:func:`PyStatus_IsExit`"
msgstr ""

#: ../../c-api/init_config.rst:36
msgid ":c:func:`PyStatus_NoMemory`"
msgstr ""

#: ../../c-api/init_config.rst:37
msgid ":c:func:`PyStatus_Ok`"
msgstr ""

#: ../../c-api/init_config.rst:38
msgid ":c:func:`PyWideStringList_Append`"
msgstr ""

#: ../../c-api/init_config.rst:39
msgid ":c:func:`PyWideStringList_Insert`"
msgstr ""

#: ../../c-api/init_config.rst:40
msgid ":c:func:`Py_ExitStatusException`"
msgstr ""

#: ../../c-api/init_config.rst:41
msgid ":c:func:`Py_InitializeFromConfig`"
msgstr ""

#: ../../c-api/init_config.rst:42
msgid ":c:func:`Py_PreInitialize`"
msgstr ""

#: ../../c-api/init_config.rst:43
msgid ":c:func:`Py_PreInitializeFromArgs`"
msgstr ""

#: ../../c-api/init_config.rst:44
msgid ":c:func:`Py_PreInitializeFromBytesArgs`"
msgstr ""

#: ../../c-api/init_config.rst:45
msgid ":c:func:`Py_RunMain`"
msgstr ""

#: ../../c-api/init_config.rst:47
msgid "The preconfiguration (``PyPreConfig`` type) is stored in ``_PyRuntime.preconfig`` and the configuration (``PyConfig`` type) is stored in ``PyInterpreterState.config``."
msgstr ""

#: ../../c-api/init_config.rst:51
msgid "See also :ref:`Initialization, Finalization, and Threads <initialization>`."
msgstr ""

#: ../../c-api/init_config.rst:54
msgid ":pep:`587` \"Python Initialization Configuration\"."
msgstr ""

#: ../../c-api/init_config.rst:58
msgid "PyWideStringList"
msgstr ""

#: ../../c-api/init_config.rst:62
msgid "List of ``wchar_t*`` strings."
msgstr ""

#: ../../c-api/init_config.rst:64
msgid "If *length* is non-zero, *items* must be non-NULL and all strings must be non-NULL."
msgstr ""

#: ../../c-api/init_config.rst:67
msgid "Methods:"
msgstr ""

#: ../../c-api/init_config.rst:71
msgid "Append *item* to *list*."
msgstr ""

#: ../../c-api/init_config.rst:73
#: ../../c-api/init_config.rst:84
msgid "Python must be preinitialized to call this function."
msgstr ""

#: ../../c-api/init_config.rst:77
msgid "Insert *item* into *list* at *index*."
msgstr ""

#: ../../c-api/init_config.rst:79
msgid "If *index* is greater than or equal to *list* length, append *item* to *list*."
msgstr ""

#: ../../c-api/init_config.rst:82
msgid "*index* must be greater than or equal to 0."
msgstr ""

#: ../../c-api/init_config.rst:86
#: ../../c-api/init_config.rst:106
#: ../../c-api/init_config.rst:209
#: ../../c-api/init_config.rst:415
msgid "Structure fields:"
msgstr ""

#: ../../c-api/init_config.rst:90
msgid "List length."
msgstr ""

#: ../../c-api/init_config.rst:94
msgid "List items."
msgstr ""

#: ../../c-api/init_config.rst:97
msgid "PyStatus"
msgstr ""

#: ../../c-api/init_config.rst:101
msgid "Structure to store an initialization function status: success, error or exit."
msgstr ""

#: ../../c-api/init_config.rst:104
msgid "For an error, it can store the C function name which created the error."
msgstr ""

#: ../../c-api/init_config.rst:110
msgid "Exit code. Argument passed to ``exit()``."
msgstr ""

#: ../../c-api/init_config.rst:114
msgid "Error message."
msgstr ""

#: ../../c-api/init_config.rst:118
msgid "Name of the function which created an error, can be ``NULL``."
msgstr ""

#: ../../c-api/init_config.rst:120
msgid "Functions to create a status:"
msgstr ""

#: ../../c-api/init_config.rst:124
msgid "Success."
msgstr ""

#: ../../c-api/init_config.rst:128
msgid "Initialization error with a message."
msgstr ""

#: ../../c-api/init_config.rst:132
msgid "Memory allocation failure (out of memory)."
msgstr ""

#: ../../c-api/init_config.rst:136
msgid "Exit Python with the specified exit code."
msgstr ""

#: ../../c-api/init_config.rst:138
msgid "Functions to handle a status:"
msgstr ""

#: ../../c-api/init_config.rst:142
msgid "Is the status an error or an exit? If true, the exception must be handled; by calling :c:func:`Py_ExitStatusException` for example."
msgstr ""

#: ../../c-api/init_config.rst:147
msgid "Is the result an error?"
msgstr ""

#: ../../c-api/init_config.rst:151
msgid "Is the result an exit?"
msgstr ""

#: ../../c-api/init_config.rst:155
msgid "Call ``exit(exitcode)`` if *status* is an exit. Print the error message and exit with a non-zero exit code if *status* is an error.  Must only be called if ``PyStatus_Exception(status)`` is non-zero."
msgstr ""

#: ../../c-api/init_config.rst:160
msgid "Internally, Python uses macros which set ``PyStatus.func``, whereas functions to create a status set ``func`` to ``NULL``."
msgstr ""

#: ../../c-api/init_config.rst:163
msgid "Example::"
msgstr ""

#: ../../c-api/init_config.rst:187
msgid "PyPreConfig"
msgstr ""

#: ../../c-api/init_config.rst:191
msgid "Structure used to preinitialize Python:"
msgstr ""

#: ../../c-api/init_config.rst:193
msgid "Set the Python memory allocator"
msgstr ""

#: ../../c-api/init_config.rst:194
msgid "Configure the LC_CTYPE locale"
msgstr ""

#: ../../c-api/init_config.rst:195
msgid "Set the UTF-8 mode"
msgstr ""

#: ../../c-api/init_config.rst:197
msgid "Function to initialize a preconfiguration:"
msgstr ""

#: ../../c-api/init_config.rst:201
msgid "Initialize the preconfiguration with :ref:`Python Configuration <init-python-config>`."
msgstr ""

#: ../../c-api/init_config.rst:206
msgid "Initialize the preconfiguration with :ref:`Isolated Configuration <init-isolated-conf>`."
msgstr ""

#: ../../c-api/init_config.rst:213
msgid "Name of the memory allocator:"
msgstr ""

#: ../../c-api/init_config.rst:215
msgid "``PYMEM_ALLOCATOR_NOT_SET`` (``0``): don't change memory allocators (use defaults)"
msgstr ""

#: ../../c-api/init_config.rst:217
msgid "``PYMEM_ALLOCATOR_DEFAULT`` (``1``): default memory allocators"
msgstr ""

#: ../../c-api/init_config.rst:218
msgid "``PYMEM_ALLOCATOR_DEBUG`` (``2``): default memory allocators with debug hooks"
msgstr ""

#: ../../c-api/init_config.rst:220
msgid "``PYMEM_ALLOCATOR_MALLOC`` (``3``): force usage of ``malloc()``"
msgstr ""

#: ../../c-api/init_config.rst:221
msgid "``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): force usage of ``malloc()`` with debug hooks"
msgstr ""

#: ../../c-api/init_config.rst:223
msgid "``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Python pymalloc memory allocator <pymalloc>`"
msgstr ""

#: ../../c-api/init_config.rst:225
msgid "``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`Python pymalloc memory allocator <pymalloc>` with debug hooks"
msgstr ""

#: ../../c-api/init_config.rst:228
msgid "``PYMEM_ALLOCATOR_PYMALLOC`` and ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` are not supported if Python is configured using ``--without-pymalloc``"
msgstr ""

#: ../../c-api/init_config.rst:231
msgid "See :ref:`Memory Management <memory>`."
msgstr ""

#: ../../c-api/init_config.rst:235
msgid "Set the LC_CTYPE locale to the user preferred locale? If equals to 0, set :c:member:`coerce_c_locale` and :c:member:`coerce_c_locale_warn` to 0."
msgstr ""

#: ../../c-api/init_config.rst:240
msgid "If equals to 2, coerce the C locale; if equals to 1, read the LC_CTYPE locale to decide if it should be coerced."
msgstr ""

#: ../../c-api/init_config.rst:245
msgid "If non-zero, emit a warning if the C locale is coerced."
msgstr ""

#: ../../c-api/init_config.rst:249
msgid "See :c:member:`PyConfig.dev_mode`."
msgstr ""

#: ../../c-api/init_config.rst:253
msgid "See :c:member:`PyConfig.isolated`."
msgstr ""

#: ../../c-api/init_config.rst:257
msgid "If non-zero, disable UTF-8 Mode, set the Python filesystem encoding to ``mbcs``, set the filesystem error handler to ``replace``."
msgstr ""

#: ../../c-api/init_config.rst:260
#: ../../c-api/init_config.rst:545
msgid "Only available on Windows. ``#ifdef MS_WINDOWS`` macro can be used for Windows specific code."
msgstr ""

#: ../../c-api/init_config.rst:265
msgid "If non-zero, :c:func:`Py_PreInitializeFromArgs` and :c:func:`Py_PreInitializeFromBytesArgs` parse their ``argv`` argument the same way the regular Python parses command line arguments: see :ref:`Command Line Arguments <using-on-cmdline>`."
msgstr ""

#: ../../c-api/init_config.rst:272
msgid "See :c:member:`PyConfig.use_environment`."
msgstr ""

#: ../../c-api/init_config.rst:276
msgid "If non-zero, enable the UTF-8 mode."
msgstr ""

#: ../../c-api/init_config.rst:279
msgid "Preinitialization with PyPreConfig"
msgstr ""

#: ../../c-api/init_config.rst:281
msgid "Functions to preinitialize Python:"
msgstr ""

#: ../../c-api/init_config.rst:285
msgid "Preinitialize Python from *preconfig* preconfiguration."
msgstr ""

#: ../../c-api/init_config.rst:289
msgid "Preinitialize Python from *preconfig* preconfiguration and command line arguments (bytes strings)."
msgstr ""

#: ../../c-api/init_config.rst:294
msgid "Preinitialize Python from *preconfig* preconfiguration and command line arguments (wide strings)."
msgstr ""

#: ../../c-api/init_config.rst:297
#: ../../c-api/init_config.rst:708
msgid "The caller is responsible to handle exceptions (error or exit) using :c:func:`PyStatus_Exception` and :c:func:`Py_ExitStatusException`."
msgstr ""

#: ../../c-api/init_config.rst:300
msgid "For :ref:`Python Configuration <init-python-config>` (:c:func:`PyPreConfig_InitPythonConfig`), if Python is initialized with command line arguments, the command line arguments must also be passed to preinitialize Python, since they have an effect on the pre-configuration like encodings. For example, the :option:`-X utf8 <-X>` command line option enables the UTF-8 Mode."
msgstr ""

#: ../../c-api/init_config.rst:307
msgid "``PyMem_SetAllocator()`` can be called after :c:func:`Py_PreInitialize` and before :c:func:`Py_InitializeFromConfig` to install a custom memory allocator. It can be called before :c:func:`Py_PreInitialize` if :c:member:`PyPreConfig.allocator` is set to ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr ""

#: ../../c-api/init_config.rst:312
msgid "Python memory allocation functions like :c:func:`PyMem_RawMalloc` must not be used before Python preinitialization, whereas calling directly ``malloc()`` and ``free()`` is always safe. :c:func:`Py_DecodeLocale` must not be called before the preinitialization."
msgstr ""

#: ../../c-api/init_config.rst:317
msgid "Example using the preinitialization to enable the UTF-8 Mode::"
msgstr ""

#: ../../c-api/init_config.rst:337
msgid "PyConfig"
msgstr ""

#: ../../c-api/init_config.rst:341
msgid "Structure containing most parameters to configure Python."
msgstr ""

#: ../../c-api/init_config.rst:343
msgid "Structure methods:"
msgstr ""

#: ../../c-api/init_config.rst:347
msgid "Initialize configuration with :ref:`Python Configuration <init-python-config>`."
msgstr ""

#: ../../c-api/init_config.rst:352
msgid "Initialize configuration with :ref:`Isolated Configuration <init-isolated-conf>`."
msgstr ""

#: ../../c-api/init_config.rst:357
msgid "Copy the wide character string *str* into ``*config_str``."
msgstr ""

#: ../../c-api/init_config.rst:359
#: ../../c-api/init_config.rst:365
#: ../../c-api/init_config.rst:371
#: ../../c-api/init_config.rst:377
#: ../../c-api/init_config.rst:383
#: ../../c-api/init_config.rst:391
msgid "Preinitialize Python if needed."
msgstr ""

#: ../../c-api/init_config.rst:363
msgid "Decode *str* using ``Py_DecodeLocale()`` and set the result into ``*config_str``."
msgstr ""

#: ../../c-api/init_config.rst:369
msgid "Set command line arguments from wide character strings."
msgstr ""

#: ../../c-api/init_config.rst:375
msgid "Set command line arguments: decode bytes using :c:func:`Py_DecodeLocale`."
msgstr ""

#: ../../c-api/init_config.rst:381
msgid "Set the list of wide strings *list* to *length* and *items*."
msgstr ""

#: ../../c-api/init_config.rst:387
msgid "Read all Python configuration."
msgstr ""

#: ../../c-api/init_config.rst:389
msgid "Fields which are already initialized are left unchanged."
msgstr ""

#: ../../c-api/init_config.rst:395
msgid "Release configuration memory."
msgstr ""

#: ../../c-api/init_config.rst:397
msgid "Most ``PyConfig`` methods preinitialize Python if needed. In that case, the Python preinitialization configuration in based on the :c:type:`PyConfig`. If configuration fields which are in common with :c:type:`PyPreConfig` are tuned, they must be set before calling a :c:type:`PyConfig` method:"
msgstr ""

#: ../../c-api/init_config.rst:402
msgid ":c:member:`~PyConfig.dev_mode`"
msgstr ""

#: ../../c-api/init_config.rst:403
msgid ":c:member:`~PyConfig.isolated`"
msgstr ""

#: ../../c-api/init_config.rst:404
msgid ":c:member:`~PyConfig.parse_argv`"
msgstr ""

#: ../../c-api/init_config.rst:405
msgid ":c:member:`~PyConfig.use_environment`"
msgstr ""

#: ../../c-api/init_config.rst:407
msgid "Moreover, if :c:func:`PyConfig_SetArgv` or :c:func:`PyConfig_SetBytesArgv` is used, this method must be called first, before other methods, since the preinitialization configuration depends on command line arguments (if :c:member:`parse_argv` is non-zero)."
msgstr ""

#: ../../c-api/init_config.rst:412
msgid "The caller of these methods is responsible to handle exceptions (error or exit) using ``PyStatus_Exception()`` and ``Py_ExitStatusException()``."
msgstr ""

#: ../../c-api/init_config.rst:419
msgid "Command line arguments, :data:`sys.argv`. See :c:member:`~PyConfig.parse_argv` to parse :c:member:`~PyConfig.argv` the same way the regular Python parses Python command line arguments. If :c:member:`~PyConfig.argv` is empty, an empty string is added to ensure that :data:`sys.argv` always exists and is never empty."
msgstr ""

#: ../../c-api/init_config.rst:427
msgid ":data:`sys.base_exec_prefix`."
msgstr ""

#: ../../c-api/init_config.rst:431
msgid ":data:`sys._base_executable`: ``__PYVENV_LAUNCHER__`` environment variable value, or copy of :c:member:`PyConfig.executable`."
msgstr ""

#: ../../c-api/init_config.rst:436
msgid ":data:`sys.base_prefix`."
msgstr ""

#: ../../c-api/init_config.rst:440
msgid "If equals to 0, enable unbuffered mode, making the stdout and stderr streams unbuffered."
msgstr ""

#: ../../c-api/init_config.rst:443
msgid "stdin is always opened in buffered mode."
msgstr ""

#: ../../c-api/init_config.rst:447
msgid "If equals to 1, issue a warning when comparing :class:`bytes` or :class:`bytearray` with :class:`str`, or comparing :class:`bytes` with :class:`int`. If equal or greater to 2, raise a :exc:`BytesWarning` exception."
msgstr ""

#: ../../c-api/init_config.rst:454
msgid "Control the validation behavior of hash-based ``.pyc`` files (see :pep:`552`): :option:`--check-hash-based-pycs` command line option value."
msgstr ""

#: ../../c-api/init_config.rst:457
msgid "Valid values: ``always``, ``never`` and ``default``."
msgstr ""

#: ../../c-api/init_config.rst:459
msgid "The default value is: ``default``."
msgstr ""

#: ../../c-api/init_config.rst:463
msgid "If non-zero, configure C standard streams (``stdio``, ``stdout``, ``stdout``). For example, set their mode to ``O_BINARY`` on Windows."
msgstr ""

#: ../../c-api/init_config.rst:468
msgid "Development mode: see :option:`-X dev <-X>`."
msgstr ""

#: ../../c-api/init_config.rst:472
msgid "If non-zero, dump all objects which are still alive at exit."
msgstr ""

#: ../../c-api/init_config.rst:474
msgid "Require a debug build of Python (``Py_REF_DEBUG`` macro must be defined)."
msgstr ""

#: ../../c-api/init_config.rst:478
msgid ":data:`sys.exec_prefix`."
msgstr ""

#: ../../c-api/init_config.rst:482
msgid ":data:`sys.executable`."
msgstr ""

#: ../../c-api/init_config.rst:486
msgid "If non-zero, call :func:`faulthandler.enable` at startup."
msgstr ""

#: ../../c-api/init_config.rst:490
msgid "Filesystem encoding, :func:`sys.getfilesystemencoding`."
msgstr ""

#: ../../c-api/init_config.rst:494
msgid "Filesystem encoding errors, :func:`sys.getfilesystemencodeerrors`."
msgstr ""

#: ../../c-api/init_config.rst:499
msgid "Randomized hash function seed."
msgstr ""

#: ../../c-api/init_config.rst:501
msgid "If :c:member:`~PyConfig.use_hash_seed` is zero, a seed is chosen randomly at Pythonstartup, and :c:member:`~PyConfig.hash_seed` is ignored."
msgstr ""

#: ../../c-api/init_config.rst:506
msgid "Python home directory."
msgstr ""

#: ../../c-api/init_config.rst:508
msgid "Initialized from :envvar:`PYTHONHOME` environment variable value by default."
msgstr ""

#: ../../c-api/init_config.rst:513
msgid "If non-zero, profile import time."
msgstr ""

#: ../../c-api/init_config.rst:517
msgid "Enter interactive mode after executing a script or a command."
msgstr ""

#: ../../c-api/init_config.rst:521
msgid "Install signal handlers?"
msgstr ""

#: ../../c-api/init_config.rst:525
msgid "Interactive mode."
msgstr ""

#: ../../c-api/init_config.rst:529
msgid "If greater than 0, enable isolated mode:"
msgstr ""

#: ../../c-api/init_config.rst:531
msgid ":data:`sys.path` contains neither the script's directory (computed from ``argv[0]`` or the current directory) nor the user's site-packages directory."
msgstr ""

#: ../../c-api/init_config.rst:534
msgid "Python REPL doesn't import :mod:`readline` nor enable default readline configuration on interactive prompts."
msgstr ""

#: ../../c-api/init_config.rst:536
msgid "Set :c:member:`~PyConfig.use_environment` and :c:member:`~PyConfig.user_site_directory` to 0."
msgstr ""

#: ../../c-api/init_config.rst:541
msgid "If non-zero, use :class:`io.FileIO` instead of :class:`io.WindowsConsoleIO` for :data:`sys.stdin`, :data:`sys.stdout` and :data:`sys.stderr`."
msgstr ""

#: ../../c-api/init_config.rst:550
msgid "If non-zero, dump statistics on :ref:`Python pymalloc memory allocator <pymalloc>` at exit."
msgstr ""

#: ../../c-api/init_config.rst:553
msgid "The option is ignored if Python is built using ``--without-pymalloc``."
msgstr ""

#: ../../c-api/init_config.rst:557
msgid "Module search paths as a string separated by ``DELIM`` (:data:`os.path.pathsep`)."
msgstr ""

#: ../../c-api/init_config.rst:560
msgid "Initialized from :envvar:`PYTHONPATH` environment variable value by default."
msgstr ""

#: ../../c-api/init_config.rst:566
msgid ":data:`sys.path`. If :c:member:`~PyConfig.module_search_paths_set` is equal to 0, the :c:member:`~PyConfig.module_search_paths` is overridden by the function calculating the :ref:`Path Configuration <init-path-config>`."
msgstr ""

#: ../../c-api/init_config.rst:573
msgid "Compilation optimization level:"
msgstr ""

#: ../../c-api/init_config.rst:575
msgid "0: Peephole optimizer (and ``__debug__`` is set to ``True``)"
msgstr ""

#: ../../c-api/init_config.rst:576
msgid "1: Remove assertions, set ``__debug__`` to ``False``"
msgstr ""

#: ../../c-api/init_config.rst:577
msgid "2: Strip docstrings"
msgstr ""

#: ../../c-api/init_config.rst:581
msgid "If non-zero, parse :c:member:`~PyConfig.argv` the same way the regular Python command line arguments, and strip Python arguments from :c:member:`~PyConfig.argv`: see :ref:`Command Line Arguments <using-on-cmdline>`."
msgstr ""

#: ../../c-api/init_config.rst:588
msgid "If non-zero, turn on parser debugging output (for expert only, depending on compilation options)."
msgstr ""

#: ../../c-api/init_config.rst:593
msgid "If equal to 0, suppress warnings when calculating the :ref:`Path Configuration <init-path-config>` (Unix only, Windows does not log any warning). Otherwise, warnings are written into ``stderr``."
msgstr ""

#: ../../c-api/init_config.rst:599
msgid ":data:`sys.prefix`."
msgstr ""

#: ../../c-api/init_config.rst:603
msgid "Program name. Used to initialize :c:member:`~PyConfig.executable`, and in early error messages."
msgstr ""

#: ../../c-api/init_config.rst:608
msgid ":data:`sys.pycache_prefix`: ``.pyc`` cache prefix."
msgstr ""

#: ../../c-api/init_config.rst:610
msgid "If NULL, :data:`sys.pycache_prefix` is set to ``None``."
msgstr ""

#: ../../c-api/init_config.rst:614
msgid "Quiet mode. For example, don't display the copyright and version messages in interactive mode."
msgstr ""

#: ../../c-api/init_config.rst:619
msgid "``python3 -c COMMAND`` argument. Used by :c:func:`Py_RunMain`."
msgstr ""

#: ../../c-api/init_config.rst:623
msgid "``python3 FILENAME`` argument. Used by :c:func:`Py_RunMain`."
msgstr ""

#: ../../c-api/init_config.rst:627
msgid "``python3 -m MODULE`` argument. Used by :c:func:`Py_RunMain`."
msgstr ""

#: ../../c-api/init_config.rst:631
msgid "Show allocation counts at exit?"
msgstr ""

#: ../../c-api/init_config.rst:633
msgid "Set to 1 by :option:`-X showalloccount <-X>` command line option."
msgstr ""

#: ../../c-api/init_config.rst:635
msgid "Need a special Python build with ``COUNT_ALLOCS`` macro defined."
msgstr ""

#: ../../c-api/init_config.rst:639
msgid "Show total reference count at exit?"
msgstr ""

#: ../../c-api/init_config.rst:641
msgid "Set to 1 by :option:`-X showrefcount <-X>` command line option."
msgstr ""

#: ../../c-api/init_config.rst:643
msgid "Need a debug build of Python (``Py_REF_DEBUG`` macro must be defined)."
msgstr ""

#: ../../c-api/init_config.rst:647
msgid "Import the :mod:`site` module at startup?"
msgstr ""

#: ../../c-api/init_config.rst:651
msgid "Skip the first line of the source?"
msgstr ""

#: ../../c-api/init_config.rst:656
msgid "Encoding and encoding errors of :data:`sys.stdin`, :data:`sys.stdout` and :data:`sys.stderr`."
msgstr ""

#: ../../c-api/init_config.rst:661
msgid "If non-zero, call :func:`tracemalloc.start` at startup."
msgstr ""

#: ../../c-api/init_config.rst:665
msgid "If greater than 0, use :ref:`environment variables <using-on-envvars>`."
msgstr ""

#: ../../c-api/init_config.rst:669
msgid "If non-zero, add user site directory to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:673
msgid "If non-zero, enable verbose mode."
msgstr ""

#: ../../c-api/init_config.rst:677
msgid "Options of the :mod:`warnings` module to build warnings filters."
msgstr ""

#: ../../c-api/init_config.rst:681
msgid "If non-zero, write ``.pyc`` files."
msgstr ""

#: ../../c-api/init_config.rst:683
msgid ":data:`sys.dont_write_bytecode` is initialized to the inverted value of :c:member:`~PyConfig.write_bytecode`."
msgstr ""

#: ../../c-api/init_config.rst:688
msgid ":data:`sys._xoptions`."
msgstr ""

#: ../../c-api/init_config.rst:690
msgid "If ``parse_argv`` is non-zero, ``argv`` arguments are parsed the same way the regular Python parses command line arguments, and Python arguments are stripped from ``argv``: see :ref:`Command Line Arguments <using-on-cmdline>`."
msgstr ""

#: ../../c-api/init_config.rst:695
msgid "The ``xoptions`` options are parsed to set other options: see :option:`-X` option."
msgstr ""

#: ../../c-api/init_config.rst:700
msgid "Initialization with PyConfig"
msgstr ""

#: ../../c-api/init_config.rst:702
msgid "Function to initialize Python:"
msgstr ""

#: ../../c-api/init_config.rst:706
msgid "Initialize Python from *config* configuration."
msgstr ""

#: ../../c-api/init_config.rst:711
msgid "If ``PyImport_FrozenModules``, ``PyImport_AppendInittab()`` or ``PyImport_ExtendInittab()`` are used, they must be set or called after Python preinitialization and before the Python initialization."
msgstr ""

#: ../../c-api/init_config.rst:715
msgid "Example setting the program name::"
msgstr ""

#: ../../c-api/init_config.rst:746
msgid "More complete example modifying the default configuration, read the configuration, and then override some parameters::"
msgstr ""

#: ../../c-api/init_config.rst:800
msgid "Isolated Configuration"
msgstr ""

#: ../../c-api/init_config.rst:802
msgid ":c:func:`PyPreConfig_InitIsolatedConfig` and :c:func:`PyConfig_InitIsolatedConfig` functions create a configuration to isolate Python from the system. For example, to embed Python into an application."
msgstr ""

#: ../../c-api/init_config.rst:807
msgid "This configuration ignores global configuration variables, environments variables, command line arguments (:c:member:`PyConfig.argv` is not parsed) and user site directory. The C standard streams (ex: ``stdout``) and the LC_CTYPE locale are left unchanged. Signal handlers are not installed."
msgstr ""

#: ../../c-api/init_config.rst:812
msgid "Configuration files are still used with this configuration. Set the :ref:`Path Configuration <init-path-config>` (\"output fields\") to ignore these configuration files and avoid the function computing the default path configuration."
msgstr ""

#: ../../c-api/init_config.rst:821
msgid "Python Configuration"
msgstr ""

#: ../../c-api/init_config.rst:823
msgid ":c:func:`PyPreConfig_InitPythonConfig` and :c:func:`PyConfig_InitPythonConfig` functions create a configuration to build a customized Python which behaves as the regular Python."
msgstr ""

#: ../../c-api/init_config.rst:827
msgid "Environments variables and command line arguments are used to configure Python, whereas global configuration variables are ignored."
msgstr ""

#: ../../c-api/init_config.rst:830
msgid "This function enables C locale coercion (:pep:`538`) and UTF-8 Mode (:pep:`540`) depending on the LC_CTYPE locale, :envvar:`PYTHONUTF8` and :envvar:`PYTHONCOERCECLOCALE` environment variables."
msgstr ""

#: ../../c-api/init_config.rst:834
msgid "Example of customized Python always running in isolated mode::"
msgstr ""

#: ../../c-api/init_config.rst:877
msgid "Path Configuration"
msgstr ""

#: ../../c-api/init_config.rst:879
msgid ":c:type:`PyConfig` contains multiple fields for the path configuration:"
msgstr ""

#: ../../c-api/init_config.rst:881
msgid "Path configuration inputs:"
msgstr ""

#: ../../c-api/init_config.rst:883
msgid ":c:member:`PyConfig.home`"
msgstr ""

#: ../../c-api/init_config.rst:884
msgid ":c:member:`PyConfig.pathconfig_warnings`"
msgstr ""

#: ../../c-api/init_config.rst:885
msgid ":c:member:`PyConfig.program_name`"
msgstr ""

#: ../../c-api/init_config.rst:886
msgid ":c:member:`PyConfig.pythonpath_env`"
msgstr ""

#: ../../c-api/init_config.rst:887
msgid "current working directory: to get absolute paths"
msgstr ""

#: ../../c-api/init_config.rst:888
msgid "``PATH`` environment variable to get the program full path (from :c:member:`PyConfig.program_name`)"
msgstr ""

#: ../../c-api/init_config.rst:890
msgid "``__PYVENV_LAUNCHER__`` environment variable"
msgstr ""

#: ../../c-api/init_config.rst:891
msgid "(Windows only) Application paths in the registry under \"Software\\Python\\PythonCore\\X.Y\\PythonPath\" of HKEY_CURRENT_USER and HKEY_LOCAL_MACHINE (where X.Y is the Python version)."
msgstr ""

#: ../../c-api/init_config.rst:895
msgid "Path configuration output fields:"
msgstr ""

#: ../../c-api/init_config.rst:897
msgid ":c:member:`PyConfig.base_exec_prefix`"
msgstr ""

#: ../../c-api/init_config.rst:898
msgid ":c:member:`PyConfig.base_executable`"
msgstr ""

#: ../../c-api/init_config.rst:899
msgid ":c:member:`PyConfig.base_prefix`"
msgstr ""

#: ../../c-api/init_config.rst:900
msgid ":c:member:`PyConfig.exec_prefix`"
msgstr ""

#: ../../c-api/init_config.rst:901
msgid ":c:member:`PyConfig.executable`"
msgstr ""

#: ../../c-api/init_config.rst:902
msgid ":c:member:`PyConfig.module_search_paths_set`, :c:member:`PyConfig.module_search_paths`"
msgstr ""

#: ../../c-api/init_config.rst:904
msgid ":c:member:`PyConfig.prefix`"
msgstr ""

#: ../../c-api/init_config.rst:906
msgid "If at least one \"output field\" is not set, Python calculates the path configuration to fill unset fields. If :c:member:`~PyConfig.module_search_paths_set` is equal to 0, :c:member:`~PyConfig.module_search_paths` is overridden and :c:member:`~PyConfig.module_search_paths_set` is set to 1."
msgstr ""

#: ../../c-api/init_config.rst:912
msgid "It is possible to completely ignore the function calculating the default path configuration by setting explicitly all path configuration output fields listed above. A string is considered as set even if it is non-empty. ``module_search_paths`` is considered as set if ``module_search_paths_set`` is set to 1. In this case, path configuration input fields are ignored as well."
msgstr ""

#: ../../c-api/init_config.rst:919
msgid "Set :c:member:`~PyConfig.pathconfig_warnings` to 0 to suppress warnings when calculating the path configuration (Unix only, Windows does not log any warning)."
msgstr ""

#: ../../c-api/init_config.rst:922
msgid "If :c:member:`~PyConfig.base_prefix` or :c:member:`~PyConfig.base_exec_prefix` fields are not set, they inherit their value from :c:member:`~PyConfig.prefix` and :c:member:`~PyConfig.exec_prefix` respectively."
msgstr ""

#: ../../c-api/init_config.rst:926
msgid ":c:func:`Py_RunMain` and :c:func:`Py_Main` modify :data:`sys.path`:"
msgstr ""

#: ../../c-api/init_config.rst:928
msgid "If :c:member:`~PyConfig.run_filename` is set and is a directory which contains a ``__main__.py`` script, prepend :c:member:`~PyConfig.run_filename` to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:931
msgid "If :c:member:`~PyConfig.isolated` is zero:"
msgstr ""

#: ../../c-api/init_config.rst:933
msgid "If :c:member:`~PyConfig.run_module` is set, prepend the current directory to :data:`sys.path`. Do nothing if the current directory cannot be read."
msgstr ""

#: ../../c-api/init_config.rst:935
msgid "If :c:member:`~PyConfig.run_filename` is set, prepend the directory of the filename to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:937
msgid "Otherwise, prepend an empty string to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:939
msgid "If :c:member:`~PyConfig.site_import` is non-zero, :data:`sys.path` can be modified by the :mod:`site` module. If :c:member:`~PyConfig.user_site_directory` is non-zero and the user's site-package directory exists, the :mod:`site` module appends the user's site-package directory to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:945
msgid "The following configuration files are used by the path configuration:"
msgstr ""

#: ../../c-api/init_config.rst:947
msgid "``pyvenv.cfg``"
msgstr ""

#: ../../c-api/init_config.rst:948
msgid "``python._pth`` (Windows only)"
msgstr ""

#: ../../c-api/init_config.rst:949
msgid "``pybuilddir.txt`` (Unix only)"
msgstr ""

#: ../../c-api/init_config.rst:951
msgid "The ``__PYVENV_LAUNCHER__`` environment variable is used to set :c:member:`PyConfig.base_executable`"
msgstr ""

#: ../../c-api/init_config.rst:956
msgid "Py_RunMain()"
msgstr ""

#: ../../c-api/init_config.rst:960
msgid "Execute the command (:c:member:`PyConfig.run_command`), the script (:c:member:`PyConfig.run_filename`) or the module (:c:member:`PyConfig.run_module`) specified on the command line or in the configuration."
msgstr ""

#: ../../c-api/init_config.rst:965
msgid "By default and when if :option:`-i` option is used, run the REPL."
msgstr ""

#: ../../c-api/init_config.rst:967
msgid "Finally, finalizes Python and returns an exit status that can be passed to the ``exit()`` function."
msgstr ""

#: ../../c-api/init_config.rst:970
msgid "See :ref:`Python Configuration <init-python-config>` for an example of customized Python always running in isolated mode using :c:func:`Py_RunMain`."
msgstr ""

#: ../../c-api/init_config.rst:976
msgid "Multi-Phase Initialization Private Provisional API"
msgstr ""

#: ../../c-api/init_config.rst:978
msgid "This section is a private provisional API introducing multi-phase initialization, the core feature of the :pep:`432`:"
msgstr ""

#: ../../c-api/init_config.rst:981
msgid "\"Core\" initialization phase, \"bare minimum Python\":"
msgstr ""

#: ../../c-api/init_config.rst:983
msgid "Builtin types;"
msgstr ""

#: ../../c-api/init_config.rst:984
msgid "Builtin exceptions;"
msgstr ""

#: ../../c-api/init_config.rst:985
msgid "Builtin and frozen modules;"
msgstr ""

#: ../../c-api/init_config.rst:986
msgid "The :mod:`sys` module is only partially initialized (ex: :data:`sys.path` doesn't exist yet)."
msgstr ""

#: ../../c-api/init_config.rst:989
msgid "\"Main\" initialization phase, Python is fully initialized:"
msgstr ""

#: ../../c-api/init_config.rst:991
msgid "Install and configure :mod:`importlib`;"
msgstr ""

#: ../../c-api/init_config.rst:992
msgid "Apply the :ref:`Path Configuration <init-path-config>`;"
msgstr ""

#: ../../c-api/init_config.rst:993
msgid "Install signal handlers;"
msgstr ""

#: ../../c-api/init_config.rst:994
msgid "Finish :mod:`sys` module initialization (ex: create :data:`sys.stdout` and :data:`sys.path`);"
msgstr ""

#: ../../c-api/init_config.rst:996
msgid "Enable optional features like :mod:`faulthandler` and :mod:`tracemalloc`;"
msgstr ""

#: ../../c-api/init_config.rst:997
msgid "Import the :mod:`site` module;"
msgstr ""

#: ../../c-api/init_config.rst:998
msgid "etc."
msgstr ""

#: ../../c-api/init_config.rst:1000
msgid "Private provisional API:"
msgstr ""

#: ../../c-api/init_config.rst:1002
msgid ":c:member:`PyConfig._init_main`: if set to 0, :c:func:`Py_InitializeFromConfig` stops at the \"Core\" initialization phase."
msgstr ""

#: ../../c-api/init_config.rst:1007
msgid "Move to the \"Main\" initialization phase, finish the Python initialization."
msgstr ""

#: ../../c-api/init_config.rst:1009
msgid "No module is imported during the \"Core\" phase and the ``importlib`` module is not configured: the :ref:`Path Configuration <init-path-config>` is only applied during the \"Main\" phase. It may allow to customize Python in Python to override or tune the :ref:`Path Configuration <init-path-config>`, maybe install a custom :data:`sys.meta_path` importer or an import hook, etc."
msgstr ""

#: ../../c-api/init_config.rst:1015
msgid "It may become possible to calculatin the :ref:`Path Configuration <init-path-config>` in Python, after the Core phase and before the Main phase, which is one of the :pep:`432` motivation."
msgstr ""

#: ../../c-api/init_config.rst:1019
msgid "The \"Core\" phase is not properly defined: what should be and what should not be available at this phase is not specified yet. The API is marked as private and provisional: the API can be modified or even be removed anytime until a proper public API is designed."
msgstr ""

#: ../../c-api/init_config.rst:1024
msgid "Example running Python code between \"Core\" and \"Main\" initialization phases::"
msgstr ""


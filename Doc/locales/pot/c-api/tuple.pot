# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-10-27 17:55+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../c-api/tuple.rst:6
msgid "Tuple Objects"
msgstr ""

#: ../../c-api/tuple.rst:13
msgid "This subtype of :c:type:`PyObject` represents a Python tuple object."
msgstr ""

#: ../../c-api/tuple.rst:20
msgid "This instance of :c:type:`PyTypeObject` represents the Python tuple type; it is the same object as ``tuple`` and ``types.TupleType`` in the Python layer.."
msgstr ""

#: ../../c-api/tuple.rst:26
msgid "Return true if *p* is a tuple object or an instance of a subtype of the tuple type."
msgstr ""

#: ../../c-api/tuple.rst:29
msgid "Allowed subtypes to be accepted."
msgstr ""

#: ../../c-api/tuple.rst:35
msgid "Return true if *p* is a tuple object, but not an instance of a subtype of the tuple type."
msgstr ""

#: ../../c-api/tuple.rst:43
msgid "Return a new tuple object of size *len*, or *NULL* on failure."
msgstr ""

#: ../../c-api/tuple.rst:45
msgid "This function used an :c:type:`int` type for *len*. This might require changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/tuple.rst:52
msgid "Return a new tuple object of size *n*, or *NULL* on failure. The tuple values are initialized to the subsequent *n* C arguments pointing to Python objects. ``PyTuple_Pack(2, a, b)`` is equivalent to ``Py_BuildValue(\"(OO)\", a, b)``."
msgstr ""

#: ../../c-api/tuple.rst:58
msgid "This function used an :c:type:`int` type for *n*. This might require changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/tuple.rst:65
msgid "Take a pointer to a tuple object, and return the size of that tuple."
msgstr ""

#: ../../c-api/tuple.rst:67
#: ../../c-api/tuple.rst:77
msgid "This function returned an :c:type:`int` type. This might require changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/tuple.rst:74
msgid "Return the size of the tuple *p*, which must be non-*NULL* and point to a tuple; no error checking is performed."
msgstr ""

#: ../../c-api/tuple.rst:84
msgid "Return the object at position *pos* in the tuple pointed to by *p*.  If *pos* is out of bounds, return *NULL* and set an :exc:`IndexError` exception."
msgstr ""

#: ../../c-api/tuple.rst:87
#: ../../c-api/tuple.rst:96
#: ../../c-api/tuple.rst:123
#: ../../c-api/tuple.rst:140
msgid "This function used an :c:type:`int` type for *pos*. This might require changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/tuple.rst:94
msgid "Like :c:func:`PyTuple_GetItem`, but does no checking of its arguments."
msgstr ""

#: ../../c-api/tuple.rst:103
msgid "Return the slice of the tuple pointed to by *p* between *low* and *high*, or *NULL* on failure.  This is the equivalent of the Python expression ``p[low:high]``.  Indexing from the end of the list is not supported."
msgstr ""

#: ../../c-api/tuple.rst:107
msgid "This function used an :c:type:`int` type for *low* and *high*. This might require changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/tuple.rst:114
msgid "Insert a reference to object *o* at position *pos* of the tuple pointed to by *p*.  Return ``0`` on success.  If *pos* is out of bounds, return ``-1`` and set an :exc:`IndexError` exception."
msgstr ""

#: ../../c-api/tuple.rst:120
msgid "This function \"steals\" a reference to *o* and discards a reference to an item already in the tuple at the affected position."
msgstr ""

#: ../../c-api/tuple.rst:130
msgid "Like :c:func:`PyTuple_SetItem`, but does no error checking, and should *only* be used to fill in brand new tuples."
msgstr ""

#: ../../c-api/tuple.rst:135
msgid "This macro \"steals\" a reference to *o*, and, unlike :c:func:`PyTuple_SetItem`, does *not* discard a reference to any item that is being replaced; any reference in the tuple at position *pos* will be leaked."
msgstr ""

#: ../../c-api/tuple.rst:147
msgid "Can be used to resize a tuple.  *newsize* will be the new length of the tuple. Because tuples are *supposed* to be immutable, this should only be used if there is only one reference to the object.  Do *not* use this if the tuple may already be known to some other part of the code.  The tuple will always grow or shrink at the end.  Think of this as destroying the old tuple and creating a new one, only more efficiently.  Returns ``0`` on success. Client code should never assume that the resulting value of ``*p`` will be the same as before calling this function. If the object referenced by ``*p`` is replaced, the original ``*p`` is destroyed.  On failure, returns ``-1`` and sets ``*p`` to *NULL*, and raises :exc:`MemoryError` or :exc:`SystemError`."
msgstr ""

#: ../../c-api/tuple.rst:158
msgid "Removed unused third parameter, *last_is_sticky*."
msgstr ""

#: ../../c-api/tuple.rst:161
msgid "This function used an :c:type:`int` type for *newsize*. This might require changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/tuple.rst:168
msgid "Clear the free list. Return the total number of freed items."
msgstr ""


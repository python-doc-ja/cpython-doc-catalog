# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../c-api/string.rst:6
msgid "String/Bytes Objects"
msgstr ""

#: ../../c-api/string.rst:8
msgid "These functions raise :exc:`TypeError` when expecting a string parameter and are called with a non-string parameter."
msgstr ""

#: ../../c-api/string.rst:13
msgid "These functions have been renamed to PyBytes_* in Python 3.x. Unless otherwise noted, the PyBytes functions available in 3.x are aliased to their PyString_* equivalents to help porting."
msgstr ""

#: ../../c-api/string.rst:22
msgid "This subtype of :c:type:`PyObject` represents a Python string object."
msgstr ""

#: ../../c-api/string.rst:29
msgid "This instance of :c:type:`PyTypeObject` represents the Python string type; it is the same object as ``str`` and ``types.StringType`` in the Python layer. ."
msgstr ""

#: ../../c-api/string.rst:35
msgid "Return true if the object *o* is a string object or an instance of a subtype of the string type."
msgstr ""

#: ../../c-api/string.rst:38
msgid "Allowed subtypes to be accepted."
msgstr ""

#: ../../c-api/string.rst:44
msgid "Return true if the object *o* is a string object, but not an instance of a subtype of the string type."
msgstr ""

#: ../../c-api/string.rst:52
msgid "Return a new string object with a copy of the string *v* as value on success, and *NULL* on failure.  The parameter *v* must not be *NULL*; it will not be checked."
msgstr ""

#: ../../c-api/string.rst:59
msgid "Return a new string object with a copy of the string *v* as value and length *len* on success, and *NULL* on failure.  If *v* is *NULL*, the contents of the string are uninitialized."
msgstr ""

#: ../../c-api/string.rst:63
msgid "This function used an :c:type:`int` type for *len*. This might require changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/string.rst:70
msgid "Take a C :c:func:`printf`\\ -style *format* string and a variable number of arguments, calculate the size of the resulting Python string and return a string with the values formatted into it.  The variable arguments must be C types and must correspond exactly to the format characters in the *format* string.  The following format characters are allowed:"
msgstr ""

#: ../../c-api/string.rst:86
msgid "Format Characters"
msgstr ""

#: ../../c-api/string.rst:86
msgid "Type"
msgstr ""

#: ../../c-api/string.rst:86
msgid "Comment"
msgstr ""

#: ../../c-api/string.rst:88
msgid ":attr:`%%`"
msgstr ""

#: ../../c-api/string.rst:88
msgid "*n/a*"
msgstr ""

#: ../../c-api/string.rst:88
msgid "The literal % character."
msgstr ""

#: ../../c-api/string.rst:90
msgid ":attr:`%c`"
msgstr ""

#: ../../c-api/string.rst:90
#: ../../c-api/string.rst:93
#: ../../c-api/string.rst:117
#: ../../c-api/string.rst:120
msgid "int"
msgstr ""

#: ../../c-api/string.rst:90
msgid "A single character, represented as a C int."
msgstr ""

#: ../../c-api/string.rst:93
msgid ":attr:`%d`"
msgstr ""

#: ../../c-api/string.rst:93
msgid "Exactly equivalent to ``printf(\"%d\")``."
msgstr ""

#: ../../c-api/string.rst:96
msgid ":attr:`%u`"
msgstr ""

#: ../../c-api/string.rst:96
msgid "unsigned int"
msgstr ""

#: ../../c-api/string.rst:96
msgid "Exactly equivalent to ``printf(\"%u\")``."
msgstr ""

#: ../../c-api/string.rst:99
msgid ":attr:`%ld`"
msgstr ""

#: ../../c-api/string.rst:99
msgid "long"
msgstr ""

#: ../../c-api/string.rst:99
msgid "Exactly equivalent to ``printf(\"%ld\")``."
msgstr ""

#: ../../c-api/string.rst:102
msgid ":attr:`%lu`"
msgstr ""

#: ../../c-api/string.rst:102
msgid "unsigned long"
msgstr ""

#: ../../c-api/string.rst:102
msgid "Exactly equivalent to ``printf(\"%lu\")``."
msgstr ""

#: ../../c-api/string.rst:105
msgid ":attr:`%lld`"
msgstr ""

#: ../../c-api/string.rst:105
msgid "long long"
msgstr ""

#: ../../c-api/string.rst:105
msgid "Exactly equivalent to ``printf(\"%lld\")``."
msgstr ""

#: ../../c-api/string.rst:108
msgid ":attr:`%llu`"
msgstr ""

#: ../../c-api/string.rst:108
msgid "unsigned long long"
msgstr ""

#: ../../c-api/string.rst:108
msgid "Exactly equivalent to ``printf(\"%llu\")``."
msgstr ""

#: ../../c-api/string.rst:111
msgid ":attr:`%zd`"
msgstr ""

#: ../../c-api/string.rst:111
msgid "Py_ssize_t"
msgstr ""

#: ../../c-api/string.rst:111
msgid "Exactly equivalent to ``printf(\"%zd\")``."
msgstr ""

#: ../../c-api/string.rst:114
msgid ":attr:`%zu`"
msgstr ""

#: ../../c-api/string.rst:114
msgid "size_t"
msgstr ""

#: ../../c-api/string.rst:114
msgid "Exactly equivalent to ``printf(\"%zu\")``."
msgstr ""

#: ../../c-api/string.rst:117
msgid ":attr:`%i`"
msgstr ""

#: ../../c-api/string.rst:117
msgid "Exactly equivalent to ``printf(\"%i\")``."
msgstr ""

#: ../../c-api/string.rst:120
msgid ":attr:`%x`"
msgstr ""

#: ../../c-api/string.rst:120
msgid "Exactly equivalent to ``printf(\"%x\")``."
msgstr ""

#: ../../c-api/string.rst:123
msgid ":attr:`%s`"
msgstr ""

#: ../../c-api/string.rst:123
msgid "char\\*"
msgstr ""

#: ../../c-api/string.rst:123
msgid "A null-terminated C character array."
msgstr ""

#: ../../c-api/string.rst:126
msgid ":attr:`%p`"
msgstr ""

#: ../../c-api/string.rst:126
msgid "void\\*"
msgstr ""

#: ../../c-api/string.rst:126
msgid "The hex representation of a C pointer. Mostly equivalent to ``printf(\"%p\")`` except that it is guaranteed to start with the literal ``0x`` regardless of what the platform's ``printf`` yields."
msgstr ""

#: ../../c-api/string.rst:135
msgid "An unrecognized format character causes all the rest of the format string to be copied as-is to the result string, and any extra arguments discarded."
msgstr ""

#: ../../c-api/string.rst:140
msgid "The `\"%lld\"` and `\"%llu\"` format specifiers are only available when :const:`HAVE_LONG_LONG` is defined."
msgstr ""

#: ../../c-api/string.rst:143
msgid "Support for `\"%lld\"` and `\"%llu\"` added."
msgstr ""

#: ../../c-api/string.rst:149
msgid "Identical to :c:func:`PyString_FromFormat` except that it takes exactly two arguments."
msgstr ""

#: ../../c-api/string.rst:155
msgid "Return the length of the string in string object *string*."
msgstr ""

#: ../../c-api/string.rst:157
msgid "This function returned an :c:type:`int` type. This might require changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/string.rst:164
msgid "Macro form of :c:func:`PyString_Size` but without error checking."
msgstr ""

#: ../../c-api/string.rst:166
msgid "This macro returned an :c:type:`int` type. This might require changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/string.rst:173
msgid "Return a NUL-terminated representation of the contents of *string*.  The pointer refers to the internal buffer of *string*, not a copy.  The data must not be modified in any way, unless the string was just created using ``PyString_FromStringAndSize(NULL, size)``. It must not be deallocated.  If *string* is a Unicode object, this function computes the default encoding of *string* and operates on that.  If *string* is not a string object at all, :c:func:`PyString_AsString` returns *NULL* and raises :exc:`TypeError`."
msgstr ""

#: ../../c-api/string.rst:184
msgid "Macro form of :c:func:`PyString_AsString` but without error checking.  Only string objects are supported; no Unicode objects should be passed."
msgstr ""

#: ../../c-api/string.rst:190
msgid "Return a NUL-terminated representation of the contents of the object *obj* through the output variables *buffer* and *length*."
msgstr ""

#: ../../c-api/string.rst:193
msgid "The function accepts both string and Unicode objects as input. For Unicode objects it returns the default encoded version of the object.  If *length* is *NULL*, the resulting buffer may not contain NUL characters; if it does, the function returns ``-1`` and a :exc:`TypeError` is raised."
msgstr ""

#: ../../c-api/string.rst:198
msgid "The buffer refers to an internal string buffer of *obj*, not a copy. The data must not be modified in any way, unless the string was just created using ``PyString_FromStringAndSize(NULL, size)``.  It must not be deallocated.  If *string* is a Unicode object, this function computes the default encoding of *string* and operates on that.  If *string* is not a string object at all, :c:func:`PyString_AsStringAndSize` returns ``-1`` and raises :exc:`TypeError`."
msgstr ""

#: ../../c-api/string.rst:205
msgid "This function used an :c:type:`int *` type for *length*. This might require changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/string.rst:212
msgid "Create a new string object in *\\*string* containing the contents of *newpart* appended to *string*; the caller will own the new reference.  The reference to the old value of *string* will be stolen.  If the new string cannot be created, the old reference to *string* will still be discarded and the value of *\\*string* will be set to *NULL*; the appropriate exception will be set."
msgstr ""

#: ../../c-api/string.rst:221
msgid "Create a new string object in *\\*string* containing the contents of *newpart* appended to *string*.  This version decrements the reference count of *newpart*."
msgstr ""

#: ../../c-api/string.rst:227
msgid "A way to resize a string object even though it is \"immutable\". Only use this to build up a brand new string object; don't use this if the string may already be known in other parts of the code.  It is an error to call this function if the refcount on the input string object is not one. Pass the address of an existing string object as an lvalue (it may be written into), and the new size desired. On success, *\\*string* holds the resized string object and ``0`` is returned; the address in *\\*string* may differ from its input value.  If the reallocation fails, the original string object at *\\*string* is deallocated, *\\*string* is set to *NULL*, a memory exception is set, and ``-1`` is returned."
msgstr ""

#: ../../c-api/string.rst:237
msgid "This function used an :c:type:`int` type for *newsize*. This might require changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/string.rst:243
msgid "Return a new string object from *format* and *args*. Analogous to ``format % args``.  The *args* argument must be a tuple or dict."
msgstr ""

#: ../../c-api/string.rst:249
msgid "Intern the argument *\\*string* in place.  The argument must be the address of a pointer variable pointing to a Python string object.  If there is an existing interned string that is the same as *\\*string*, it sets *\\*string* to it (decrementing the reference count of the old string object and incrementing the reference count of the interned string object), otherwise it leaves *\\*string* alone and interns it (incrementing its reference count).  (Clarification: even though there is a lot of talk about reference counts, think of this function as reference-count-neutral; you own the object after the call if and only if you owned it before the call.)"
msgstr ""

#: ../../c-api/string.rst:261
#: ../../c-api/string.rst:273
#: ../../c-api/string.rst:286
#: ../../c-api/string.rst:303
#: ../../c-api/string.rst:316
#: ../../c-api/string.rst:333
msgid "This function is not available in 3.x and does not have a PyBytes alias."
msgstr ""

#: ../../c-api/string.rst:266
msgid "A combination of :c:func:`PyString_FromString` and :c:func:`PyString_InternInPlace`, returning either a new string object that has been interned, or a new (\"owned\") reference to an earlier interned string object with the same value."
msgstr ""

#: ../../c-api/string.rst:278
msgid "Create an object by decoding *size* bytes of the encoded buffer *s* using the codec registered for *encoding*.  *encoding* and *errors* have the same meaning as the parameters of the same name in the :func:`unicode` built-in function. The codec to be used is looked up using the Python codec registry.  Return *NULL* if an exception was raised by the codec."
msgstr ""

#: ../../c-api/string.rst:288
#: ../../c-api/string.rst:318
msgid "This function used an :c:type:`int` type for *size*. This might require changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/string.rst:295
msgid "Decode a string object by passing it to the codec registered for *encoding* and return the result as Python object. *encoding* and *errors* have the same meaning as the parameters of the same name in the string :meth:`encode` method. The codec to be used is looked up using the Python codec registry. Return *NULL* if an exception was raised by the codec."
msgstr ""

#: ../../c-api/string.rst:308
msgid "Encode the :c:type:`char` buffer of the given size by passing it to the codec registered for *encoding* and return a Python object. *encoding* and *errors* have the same meaning as the parameters of the same name in the string :meth:`encode` method. The codec to be used is looked up using the Python codec registry.  Return *NULL* if an exception was raised by the codec."
msgstr ""

#: ../../c-api/string.rst:325
msgid "Encode a string object using the codec registered for *encoding* and return the result as Python object. *encoding* and *errors* have the same meaning as the parameters of the same name in the string :meth:`encode` method. The codec to be used is looked up using the Python codec registry. Return *NULL* if an exception was raised by the codec."
msgstr ""

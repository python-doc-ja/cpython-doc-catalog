# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-26 12:43+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../c-api/sequence.rst:6
msgid "Sequence Protocol"
msgstr ""

#: ../../c-api/sequence.rst:11
msgid "Return ``1`` if the object provides sequence protocol, and ``0`` otherwise. This function always succeeds."
msgstr ""

#: ../../c-api/sequence.rst:20
msgid "Returns the number of objects in sequence *o* on success, and ``-1`` on failure.  This is equivalent to the Python expression ``len(o)``."
msgstr ""

#: ../../c-api/sequence.rst:23
msgid "These functions returned an :c:type:`int` type. This might require changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/sequence.rst:30
msgid "Return the concatenation of *o1* and *o2* on success, and *NULL* on failure. This is the equivalent of the Python expression ``o1 + o2``."
msgstr ""

#: ../../c-api/sequence.rst:36
msgid "Return the result of repeating sequence object *o* *count* times, or *NULL* on failure.  This is the equivalent of the Python expression ``o * count``."
msgstr ""

#: ../../c-api/sequence.rst:39
#: ../../c-api/sequence.rst:57
msgid "This function used an :c:type:`int` type for *count*. This might require changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/sequence.rst:46
msgid "Return the concatenation of *o1* and *o2* on success, and *NULL* on failure. The operation is done *in-place* when *o1* supports it.  This is the equivalent of the Python expression ``o1 += o2``."
msgstr ""

#: ../../c-api/sequence.rst:53
msgid "Return the result of repeating sequence object *o* *count* times, or *NULL* on failure.  The operation is done *in-place* when *o* supports it.  This is the equivalent of the Python expression ``o *= count``."
msgstr ""

#: ../../c-api/sequence.rst:64
msgid "Return the *i*\\ th element of *o*, or *NULL* on failure. This is the equivalent of the Python expression ``o[i]``."
msgstr ""

#: ../../c-api/sequence.rst:67
#: ../../c-api/sequence.rst:92
#: ../../c-api/sequence.rst:102
#: ../../c-api/sequence.rst:188
#: ../../c-api/sequence.rst:214
msgid "This function used an :c:type:`int` type for *i*. This might require changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/sequence.rst:74
msgid "Return the slice of sequence object *o* between *i1* and *i2*, or *NULL* on failure. This is the equivalent of the Python expression ``o[i1:i2]``."
msgstr ""

#: ../../c-api/sequence.rst:77
#: ../../c-api/sequence.rst:116
#: ../../c-api/sequence.rst:126
msgid "This function used an :c:type:`int` type for *i1* and *i2*. This might require changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/sequence.rst:84
msgid "Assign object *v* to the *i*\\ th element of *o*.  Raise an exception and return ``-1`` on failure; return ``0`` on success.  This is the equivalent of the Python statement ``o[i] = v``.  This function *does not* steal a reference to *v*."
msgstr ""

#: ../../c-api/sequence.rst:89
msgid "If *v* is *NULL*, the element is deleted, however this feature is deprecated in favour of using :c:func:`PySequence_DelItem`."
msgstr ""

#: ../../c-api/sequence.rst:99
msgid "Delete the *i*\\ th element of object *o*.  Returns ``-1`` on failure.  This is the equivalent of the Python statement ``del o[i]``."
msgstr ""

#: ../../c-api/sequence.rst:109
msgid "Assign the sequence object *v* to the slice in sequence object *o* from *i1* to *i2*.  Raise an exception and return ``-1`` on failure; return ``0`` on success. This is the equivalent of the Python statement ``o[i1:i2] = v``."
msgstr ""

#: ../../c-api/sequence.rst:113
msgid "If *v* is *NULL*, the slice is deleted, however this feature is deprecated in favour of using :c:func:`PySequence_DelSlice`."
msgstr ""

#: ../../c-api/sequence.rst:123
msgid "Delete the slice in sequence object *o* from *i1* to *i2*.  Returns ``-1`` on failure.  This is the equivalent of the Python statement ``del o[i1:i2]``."
msgstr ""

#: ../../c-api/sequence.rst:133
msgid "Return the number of occurrences of *value* in *o*, that is, return the number of keys for which ``o[key] == value``.  On failure, return ``-1``.  This is equivalent to the Python expression ``o.count(value)``."
msgstr ""

#: ../../c-api/sequence.rst:137
#: ../../c-api/sequence.rst:154
msgid "This function returned an :c:type:`int` type. This might require changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/sequence.rst:144
msgid "Determine if *o* contains *value*.  If an item in *o* is equal to *value*, return ``1``, otherwise return ``0``. On error, return ``-1``.  This is equivalent to the Python expression ``value in o``."
msgstr ""

#: ../../c-api/sequence.rst:151
msgid "Return the first index *i* for which ``o[i] == value``.  On error, return ``-1``.    This is equivalent to the Python expression ``o.index(value)``."
msgstr ""

#: ../../c-api/sequence.rst:161
msgid "Return a list object with the same contents as the arbitrary sequence *o*.  The returned list is guaranteed to be new."
msgstr ""

#: ../../c-api/sequence.rst:169
msgid "Return a tuple object with the same contents as the arbitrary sequence *o* or *NULL* on failure.  If *o* is a tuple, a new reference will be returned, otherwise a tuple will be constructed with the appropriate contents.  This is equivalent to the Python expression ``tuple(o)``."
msgstr ""

#: ../../c-api/sequence.rst:177
msgid "Return the sequence *o* as a list, unless it is already a tuple or list, in which case *o* is returned.  Use :c:func:`PySequence_Fast_GET_ITEM` to access the members of the result.  Returns *NULL* on failure.  If the object is not a sequence, raises :exc:`TypeError` with *m* as the message text."
msgstr ""

#: ../../c-api/sequence.rst:185
msgid "Return the *i*\\ th element of *o*, assuming that *o* was returned by :c:func:`PySequence_Fast`, *o* is not *NULL*, and that *i* is within bounds."
msgstr ""

#: ../../c-api/sequence.rst:195
msgid "Return the underlying array of PyObject pointers.  Assumes that *o* was returned by :c:func:`PySequence_Fast` and *o* is not *NULL*."
msgstr ""

#: ../../c-api/sequence.rst:198
msgid "Note, if a list gets resized, the reallocation may relocate the items array. So, only use the underlying array pointer in contexts where the sequence cannot change."
msgstr ""

#: ../../c-api/sequence.rst:207
msgid "Return the *i*\\ th element of *o* or *NULL* on failure. Macro form of :c:func:`PySequence_GetItem` but without checking that :c:func:`PySequence_Check` on *o* is true and without adjustment for negative indices."
msgstr ""

#: ../../c-api/sequence.rst:221
msgid "Returns the length of *o*, assuming that *o* was returned by :c:func:`PySequence_Fast` and that *o* is not *NULL*.  The size can also be gotten by calling :c:func:`PySequence_Size` on *o*, but :c:func:`PySequence_Fast_GET_SIZE` is faster because it can assume *o* is a list or tuple."
msgstr ""


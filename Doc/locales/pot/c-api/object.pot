# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-16 18:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:6
msgid "Object Protocol"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:11
msgid "Print an object *o*, on file *fp*.  Returns ``-1`` on error.  The flags argument is used to enable certain printing options.  The only option currently supported is :const:`Py_PRINT_RAW`; if given, the :func:`str` of the object is written instead of the :func:`repr`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:19
#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:26
msgid "Returns ``1`` if *o* has the attribute *attr_name*, and ``0`` otherwise.  This is equivalent to the Python expression ``hasattr(o, attr_name)``.  This function always succeeds."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:33
msgid "Retrieve an attribute named *attr_name* from object *o*. Returns the attribute value on success, or *NULL* on failure.  This is the equivalent of the Python expression ``o.attr_name``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:40
msgid "Retrieve an attribute named *attr_name* from object *o*. Returns the attribute value on success, or *NULL* on failure. This is the equivalent of the Python expression ``o.attr_name``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:47
msgid "Generic attribute getter function that is meant to be put into a type object's ``tp_getattro`` slot.  It looks for a descriptor in the dictionary of classes in the object's MRO as well as an attribute in the object's :attr:`~object.__dict__` (if present).  As outlined in :ref:`descriptors`, data descriptors take preference over instance attributes, while non-data descriptors don't.  Otherwise, an :exc:`AttributeError` is raised."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:57
#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:68
msgid "Set the value of the attribute named *attr_name*, for object *o*, to the value *v*. Raise an exception and return ``-1`` on failure; return ``0`` on success.  This is the equivalent of the Python statement ``o.attr_name = v``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:62
msgid "If *v* is *NULL*, the attribute is deleted, however this feature is deprecated in favour of using :c:func:`PyObject_DelAttr`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:73
msgid "If *v* is *NULL*, the attribute is deleted, however this feature is deprecated in favour of using :c:func:`PyObject_DelAttrString`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:79
msgid "Generic attribute setter and deleter function that is meant to be put into a type object's :c:member:`~PyTypeObject.tp_setattro` slot.  It looks for a data descriptor in the dictionary of classes in the object's MRO, and if found it takes preference over setting or deleting the attribute in the instance dictionary. Otherwise, the attribute is set or deleted in the object's :attr:`~object.__dict__` (if present). On success, ``0`` is returned, otherwise an :exc:`AttributeError` is raised and ``-1`` is returned."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:91
#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:97
msgid "Delete attribute named *attr_name*, for object *o*. Returns ``-1`` on failure. This is the equivalent of the Python statement ``del o.attr_name``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:103
msgid "Compare the values of *o1* and *o2* using the operation specified by *opid*, which must be one of :const:`Py_LT`, :const:`Py_LE`, :const:`Py_EQ`, :const:`Py_NE`, :const:`Py_GT`, or :const:`Py_GE`, corresponding to ``<``, ``<=``, ``==``, ``!=``, ``>``, or ``>=`` respectively. This is the equivalent of the Python expression ``o1 op o2``, where ``op`` is the operator corresponding to *opid*. Returns the value of the comparison on success, or *NULL* on failure."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:113
msgid "Compare the values of *o1* and *o2* using the operation specified by *opid*, which must be one of :const:`Py_LT`, :const:`Py_LE`, :const:`Py_EQ`, :const:`Py_NE`, :const:`Py_GT`, or :const:`Py_GE`, corresponding to ``<``, ``<=``, ``==``, ``!=``, ``>``, or ``>=`` respectively. Returns ``-1`` on error, ``0`` if the result is false, ``1`` otherwise. This is the equivalent of the Python expression ``o1 op o2``, where ``op`` is the operator corresponding to *opid*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:122
msgid "If *o1* and *o2* are the same object, :c:func:`PyObject_RichCompareBool` will always return ``1`` for :const:`Py_EQ` and ``0`` for :const:`Py_NE`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:129
msgid "Compare the values of *o1* and *o2* using a routine provided by *o1*, if one exists, otherwise with a routine provided by *o2*.  The result of the comparison is returned in *result*.  Returns ``-1`` on failure.  This is the equivalent of the Python statement ``result = cmp(o1, o2)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:139
msgid "Compare the values of *o1* and *o2* using a routine provided by *o1*, if one exists, otherwise with a routine provided by *o2*.  Returns the result of the comparison on success.  On error, the value returned is undefined; use :c:func:`PyErr_Occurred` to detect an error.  This is equivalent to the Python expression ``cmp(o1, o2)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:150
msgid "Compute a string representation of object *o*.  Returns the string representation on success, *NULL* on failure.  This is the equivalent of the Python expression ``repr(o)``.  Called by the :func:`repr` built-in function and by reverse quotes."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:160
msgid "Compute a string representation of object *o*.  Returns the string representation on success, *NULL* on failure.  This is the equivalent of the Python expression ``str(o)``.  Called by the :func:`str` built-in function and by the :keyword:`print` statement."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:170
msgid "Compute a bytes representation of object *o*.  In 2.x, this is just an alias for :c:func:`PyObject_Str`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:178
msgid "Compute a Unicode string representation of object *o*.  Returns the Unicode string representation on success, *NULL* on failure. This is the equivalent of the Python expression ``unicode(o)``.  Called by the :func:`unicode` built-in function."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:186
msgid "Returns ``1`` if *inst* is an instance of the class *cls* or a subclass of *cls*, or ``0`` if not.  On error, returns ``-1`` and sets an exception.  If *cls* is a type object rather than a class object, :c:func:`PyObject_IsInstance` returns ``1`` if *inst* is of type *cls*.  If *cls* is a tuple, the check will be done against every entry in *cls*. The result will be ``1`` when at least one of the checks returns ``1``, otherwise it will be ``0``. If *inst* is not a class instance and *cls* is neither a type object, nor a class object, nor a tuple, *inst* must have a :attr:`~instance.__class__` attribute --- the class relationship of the value of that attribute with *cls* will be used to determine the result of this function."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:199
msgid "Support for a tuple as the second argument added."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:202
msgid "Subclass determination is done in a fairly straightforward way, but includes a wrinkle that implementors of extensions to the class system may want to be aware of.  If :class:`A` and :class:`B` are class objects, :class:`B` is a subclass of :class:`A` if it inherits from :class:`A` either directly or indirectly.  If either is not a class object, a more general mechanism is used to determine the class relationship of the two objects.  When testing if *B* is a subclass of *A*, if *A* is *B*, :c:func:`PyObject_IsSubclass` returns true.  If *A* and *B* are different objects, *B*'s :attr:`~class.__bases__` attribute is searched in a depth-first fashion for *A* --- the presence of the :attr:`~class.__bases__` attribute is considered sufficient for this determination."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:216
msgid "Returns ``1`` if the class *derived* is identical to or derived from the class *cls*, otherwise returns ``0``.  In case of an error, returns ``-1``. If *cls* is a tuple, the check will be done against every entry in *cls*. The result will be ``1`` when at least one of the checks returns ``1``, otherwise it will be ``0``. If either *derived* or *cls* is not an actual class object (or tuple), this function uses the generic algorithm described above."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:225
msgid "Older versions of Python did not support a tuple as the second argument."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:231
msgid "Determine if the object *o* is callable.  Return ``1`` if the object is callable and ``0`` otherwise.  This function always succeeds."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:239
msgid "Call a callable Python object *callable_object*, with arguments given by the tuple *args*, and named arguments given by the dictionary *kw*. If no named arguments are needed, *kw* may be *NULL*. *args* must not be *NULL*, use an empty tuple if no arguments are needed. Returns the result of the call on success, or *NULL* on failure.  This is the equivalent of the Python expression ``apply(callable_object, args, kw)`` or ``callable_object(*args, **kw)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:253
msgid "Call a callable Python object *callable_object*, with arguments given by the tuple *args*.  If no arguments are needed, then *args* may be *NULL*.  Returns the result of the call on success, or *NULL* on failure.  This is the equivalent of the Python expression ``apply(callable_object, args)`` or ``callable_object(*args)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:264
msgid "Call a callable Python object *callable*, with a variable number of C arguments. The C arguments are described using a :c:func:`Py_BuildValue` style format string.  The format may be *NULL*, indicating that no arguments are provided. Returns the result of the call on success, or *NULL* on failure.  This is the equivalent of the Python expression ``apply(callable, args)`` or ``callable(*args)``. Note that if you only pass :c:type:`PyObject \\*` args, :c:func:`PyObject_CallFunctionObjArgs` is a faster alternative."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:275
msgid "Call the method named *method* of object *o* with a variable number of C arguments.  The C arguments are described by a :c:func:`Py_BuildValue` format string that should  produce a tuple.  The format may be *NULL*, indicating that no arguments are provided. Returns the result of the call on success, or *NULL* on failure.  This is the equivalent of the Python expression ``o.method(args)``. Note that if you only pass :c:type:`PyObject \\*` args, :c:func:`PyObject_CallMethodObjArgs` is a faster alternative."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:286
msgid "Call a callable Python object *callable*, with a variable number of :c:type:`PyObject\\*` arguments.  The arguments are provided as a variable number of parameters followed by *NULL*. Returns the result of the call on success, or *NULL* on failure."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:296
msgid "Calls a method of the object *o*, where the name of the method is given as a Python string object in *name*.  It is called with a variable number of :c:type:`PyObject\\*` arguments.  The arguments are provided as a variable number of parameters followed by *NULL*. Returns the result of the call on success, or *NULL* on failure."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:309
msgid "Compute and return the hash value of an object *o*.  On failure, return ``-1``. This is the equivalent of the Python expression ``hash(o)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:315
msgid "Set a :exc:`TypeError` indicating that ``type(o)`` is not hashable and return ``-1``. This function receives special treatment when stored in a ``tp_hash`` slot, allowing a type to explicitly indicate to the interpreter that it is not hashable."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:325
msgid "Returns ``1`` if the object *o* is considered to be true, and ``0`` otherwise. This is equivalent to the Python expression ``not not o``.  On failure, return ``-1``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:332
msgid "Returns ``0`` if the object *o* is considered to be true, and ``1`` otherwise. This is equivalent to the Python expression ``not o``.  On failure, return ``-1``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:341
msgid "When *o* is non-*NULL*, returns a type object corresponding to the object type of object *o*. On failure, raises :exc:`SystemError` and returns *NULL*.  This is equivalent to the Python expression ``type(o)``. This function increments the reference count of the return value. There's really no reason to use this function instead of the common expression ``o->ob_type``, which returns a pointer of type :c:type:`PyTypeObject\\*`, except when the incremented reference count is needed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:352
msgid "Return true if the object *o* is of type *type* or a subtype of *type*.  Both parameters must be non-*NULL*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:363
msgid "Return the length of object *o*.  If the object *o* provides either the sequence and mapping protocols, the sequence length is returned.  On error, ``-1`` is returned.  This is the equivalent to the Python expression ``len(o)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:367
msgid "These functions returned an :c:type:`int` type. This might require changes in your code for properly supporting 64-bit systems."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:374
msgid "Return element of *o* corresponding to the object *key* or *NULL* on failure. This is the equivalent of the Python expression ``o[key]``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:380
msgid "Map the object *key* to the value *v*.  Raise an exception and return ``-1`` on failure; return ``0`` on success.  This is the equivalent of the Python statement ``o[key] = v``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:387
msgid "Delete the mapping for *key* from *o*.  Returns ``-1`` on failure. This is the equivalent of the Python statement ``del o[key]``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:393
msgid "Derives a file descriptor from a Python object.  If the object is an integer or long integer, its value is returned.  If not, the object's :meth:`fileno` method is called if it exists; the method must return an integer or long integer, which is returned as the file descriptor value.  Returns ``-1`` on failure."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:401
msgid "This is equivalent to the Python expression ``dir(o)``, returning a (possibly empty) list of strings appropriate for the object argument, or *NULL* if there was an error.  If the argument is *NULL*, this is like the Python ``dir()``, returning the names of the current locals; in this case, if no execution frame is active then *NULL* is returned but :c:func:`PyErr_Occurred` will return false."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/c-api/object.rst:410
msgid "This is equivalent to the Python expression ``iter(o)``. It returns a new iterator for the object argument, or the object  itself if the object is already an iterator.  Raises :exc:`TypeError` and returns *NULL* if the object cannot be iterated."
msgstr ""

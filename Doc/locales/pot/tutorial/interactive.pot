# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-01 15:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../tutorial/interactive.rst:5
msgid "Interactive Input Editing and History Substitution"
msgstr ""

#: ../../tutorial/interactive.rst:7
msgid "Some versions of the Python interpreter support editing of the current input line and history substitution, similar to facilities found in the Korn shell and the GNU Bash shell.  This is implemented using the `GNU Readline`_ library, which supports Emacs-style and vi-style editing.  This library has its own documentation which I won't duplicate here; however, the basics are easily explained.  The interactive editing and history described here are optionally available in the Unix and Cygwin versions of the interpreter."
msgstr ""

#: ../../tutorial/interactive.rst:15
msgid "This chapter does *not* document the editing facilities of Mark Hammond's PythonWin package or the Tk-based environment, IDLE, distributed with Python. The command line history recall which operates within DOS boxes on NT and some other DOS and Windows flavors  is yet another beast."
msgstr ""

#: ../../tutorial/interactive.rst:24
msgid "Line Editing"
msgstr ""

#: ../../tutorial/interactive.rst:26
msgid "If supported, input line editing is active whenever the interpreter prints a primary or secondary prompt.  The current line can be edited using the conventional Emacs control characters.  The most important of these are: :kbd:`C-A` (Control-A) moves the cursor to the beginning of the line, :kbd:`C-E` to the end, :kbd:`C-B` moves it one position to the left, :kbd:`C-F` to the right.  Backspace erases the character to the left of the cursor, :kbd:`C-D` the character to its right. :kbd:`C-K` kills (erases) the rest of the line to the right of the cursor, :kbd:`C-Y` yanks back the last killed string. :kbd:`C-underscore` undoes the last change you made; it can be repeated for cumulative effect."
msgstr ""

#: ../../tutorial/interactive.rst:41
msgid "History Substitution"
msgstr ""

#: ../../tutorial/interactive.rst:43
msgid "History substitution works as follows.  All non-empty input lines issued are saved in a history buffer, and when a new prompt is given you are positioned on a new line at the bottom of this buffer. :kbd:`C-P` moves one line up (back) in the history buffer, :kbd:`C-N` moves one down.  Any line in the history buffer can be edited; an asterisk appears in front of the prompt to mark a line as modified.  Pressing the :kbd:`Return` key passes the current line to the interpreter.  :kbd:`C-R` starts an incremental reverse search; :kbd:`C-S` starts a forward search."
msgstr ""

#: ../../tutorial/interactive.rst:56
msgid "Key Bindings"
msgstr ""

#: ../../tutorial/interactive.rst:58
msgid "The key bindings and some other parameters of the Readline library can be customized by placing commands in an initialization file called :file:`~/.inputrc`.  Key bindings have the form ::"
msgstr ""

#: ../../tutorial/interactive.rst:64
msgid "or ::"
msgstr ""

#: ../../tutorial/interactive.rst:68
msgid "and options can be set with ::"
msgstr ""

#: ../../tutorial/interactive.rst:72
msgid "For example::"
msgstr ""

#: ../../tutorial/interactive.rst:85
msgid "Note that the default binding for :kbd:`Tab` in Python is to insert a :kbd:`Tab` character instead of Readline's default filename completion function.  If you insist, you can override this by putting ::"
msgstr ""

#: ../../tutorial/interactive.rst:91
msgid "in your :file:`~/.inputrc`.  (Of course, this makes it harder to type indented continuation lines if you're accustomed to using :kbd:`Tab` for that purpose.)"
msgstr ""

#: ../../tutorial/interactive.rst:98
msgid "Automatic completion of variable and module names is optionally available.  To enable it in the interpreter's interactive mode, add the following to your startup file: [#]_  ::"
msgstr ""

#: ../../tutorial/interactive.rst:105
msgid "This binds the :kbd:`Tab` key to the completion function, so hitting the :kbd:`Tab` key twice suggests completions; it looks at Python statement names, the current local variables, and the available module names.  For dotted expressions such as ``string.a``, it will evaluate the expression up to the final ``'.'`` and then suggest completions from the attributes of the resulting object.  Note that this may execute application-defined code if an object with a :meth:`__getattr__` method is part of the expression."
msgstr ""

#: ../../tutorial/interactive.rst:113
msgid "A more capable startup file might look like this example.  Note that this deletes the names it creates once they are no longer needed; this is done since the startup file is executed in the same namespace as the interactive commands, and removing the names avoids creating side effects in the interactive environment.  You may find it convenient to keep some of the imported modules, such as :mod:`os`, which turn out to be needed in most sessions with the interpreter. ::"
msgstr ""

#: ../../tutorial/interactive.rst:149
msgid "Alternatives to the Interactive Interpreter"
msgstr ""

#: ../../tutorial/interactive.rst:151
msgid "This facility is an enormous step forward compared to earlier versions of the interpreter; however, some wishes are left: It would be nice if the proper indentation were suggested on continuation lines (the parser knows if an indent token is required next).  The completion mechanism might use the interpreter's symbol table.  A command to check (or even suggest) matching parentheses, quotes, etc., would also be useful."
msgstr ""

#: ../../tutorial/interactive.rst:158
msgid "One alternative enhanced interactive interpreter that has been around for quite some time is IPython_, which features tab completion, object exploration and advanced history management.  It can also be thoroughly customized and embedded into other applications.  Another similar enhanced interactive environment is bpython_."
msgstr ""

#: ../../tutorial/interactive.rst:166
msgid "Footnotes"
msgstr ""

#: ../../tutorial/interactive.rst:167
msgid "Python will execute the contents of a file identified by the :envvar:`PYTHONSTARTUP` environment variable when you start an interactive interpreter.  To customize Python even for non-interactive mode, see :ref:`tut-customize`."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../tutorial/introduction.rst:5
msgid "An Informal Introduction to Python"
msgstr ""

#: ../../tutorial/introduction.rst:7
msgid "In the following examples, input and output are distinguished by the presence or absence of prompts (:term:`>>>` and :term:`...`): to repeat the example, you must type everything after the prompt, when the prompt appears; lines that do not begin with a prompt are output from the interpreter. Note that a secondary prompt on a line by itself in an example means you must type a blank line; this is used to end a multi-line command."
msgstr ""

#: ../../tutorial/introduction.rst:14
msgid "Many of the examples in this manual, even those entered at the interactive prompt, include comments.  Comments in Python start with the hash character, ``#``, and extend to the end of the physical line.  A comment may appear at the start of a line or following whitespace or code, but not within a string literal.  A hash character within a string literal is just a hash character. Since comments are to clarify code and are not interpreted by Python, they may be omitted when typing in examples."
msgstr ""

#: ../../tutorial/introduction.rst:22
msgid "Some examples::"
msgstr ""

#: ../../tutorial/introduction.rst:33
msgid "Using Python as a Calculator"
msgstr ""

#: ../../tutorial/introduction.rst:35
msgid "Let's try some simple Python commands.  Start the interpreter and wait for the primary prompt, ``>>>``.  (It shouldn't take long.)"
msgstr ""

#: ../../tutorial/introduction.rst:42
msgid "Numbers"
msgstr ""

#: ../../tutorial/introduction.rst:44
msgid "The interpreter acts as a simple calculator: you can type an expression at it and it will write the value.  Expression syntax is straightforward: the operators ``+``, ``-``, ``*`` and ``/`` work just like in most other languages (for example, Pascal or C); parentheses (``()``) can be used for grouping. For example::"
msgstr ""

#: ../../tutorial/introduction.rst:59
msgid "The integer numbers (e.g. ``2``, ``4``, ``20``) have type :class:`int`, the ones with a fractional part (e.g. ``5.0``, ``1.6``) have type :class:`float`.  We will see more about numeric types later in the tutorial."
msgstr ""

#: ../../tutorial/introduction.rst:63
msgid "The return type of a division (``/``) operation depends on its operands.  If both operands are of type :class:`int`, :term:`floor division` is performed and an :class:`int` is returned.  If either operand is a :class:`float`, classic division is performed and a :class:`float` is returned.  The ``//`` operator is also provided for doing floor division no matter what the operands are.  The remainder can be calculated with the ``%`` operator::"
msgstr ""

#: ../../tutorial/introduction.rst:81
msgid "With Python, it is possible to use the ``**`` operator to calculate powers [#]_::"
msgstr ""

#: ../../tutorial/introduction.rst:88
msgid "The equal sign (``=``) is used to assign a value to a variable. Afterwards, no result is displayed before the next interactive prompt::"
msgstr ""

#: ../../tutorial/introduction.rst:96
msgid "If a variable is not \"defined\" (assigned a value), trying to use it will give you an error::"
msgstr ""

#: ../../tutorial/introduction.rst:104
msgid "There is full support for floating point; operators with mixed type operands convert the integer operand to floating point::"
msgstr ""

#: ../../tutorial/introduction.rst:112
msgid "In interactive mode, the last printed expression is assigned to the variable ``_``.  This means that when you are using Python as a desk calculator, it is somewhat easier to continue calculations, for example::"
msgstr ""

#: ../../tutorial/introduction.rst:125
msgid "This variable should be treated as read-only by the user.  Don't explicitly assign a value to it --- you would create an independent local variable with the same name masking the built-in variable with its magic behavior."
msgstr ""

#: ../../tutorial/introduction.rst:129
msgid "In addition to :class:`int` and :class:`float`, Python supports other types of numbers, such as :class:`~decimal.Decimal` and :class:`~fractions.Fraction`. Python also has built-in support for :ref:`complex numbers <typesnumeric>`, and uses the ``j`` or ``J`` suffix to indicate the imaginary part (e.g. ``3+5j``)."
msgstr ""

#: ../../tutorial/introduction.rst:139
msgid "Strings"
msgstr ""

#: ../../tutorial/introduction.rst:141
msgid "Besides numbers, Python can also manipulate strings, which can be expressed in several ways.  They can be enclosed in single quotes (``'...'``) or double quotes (``\"...\"``) with the same result [#]_.  ``\\`` can be used to escape quotes::"
msgstr ""

#: ../../tutorial/introduction.rst:159
msgid "In the interactive interpreter, the output string is enclosed in quotes and special characters are escaped with backslashes.  While this might sometimes look different from the input (the enclosing quotes could change), the two strings are equivalent.  The string is enclosed in double quotes if the string contains a single quote and no double quotes, otherwise it is enclosed in single quotes.  The :keyword:`print` statement produces a more readable output, by omitting the enclosing quotes and by printing escaped and special characters::"
msgstr ""

#: ../../tutorial/introduction.rst:179
msgid "If you don't want characters prefaced by ``\\`` to be interpreted as special characters, you can use *raw strings* by adding an ``r`` before the first quote::"
msgstr ""

#: ../../tutorial/introduction.rst:189
msgid "String literals can span multiple lines.  One way is using triple-quotes: ``\"\"\"...\"\"\"`` or ``'''...'''``.  End of lines are automatically included in the string, but it's possible to prevent this by adding a ``\\`` at the end of the line.  The following example::"
msgstr ""

#: ../../tutorial/introduction.rst:200
msgid "produces the following output (note that the initial newline is not included):"
msgstr ""

#: ../../tutorial/introduction.rst:208
msgid "Strings can be concatenated (glued together) with the ``+`` operator, and repeated with ``*``::"
msgstr ""

#: ../../tutorial/introduction.rst:215
msgid "Two or more *string literals* (i.e. the ones enclosed between quotes) next to each other are automatically concatenated. ::"
msgstr ""

#: ../../tutorial/introduction.rst:221
msgid "This feature is particularly useful when you want to break long strings::"
msgstr ""

#: ../../tutorial/introduction.rst:228
msgid "This only works with two literals though, not with variables or expressions::"
msgstr ""

#: ../../tutorial/introduction.rst:238
msgid "If you want to concatenate variables or a variable and a literal, use ``+``::"
msgstr ""

#: ../../tutorial/introduction.rst:243
msgid "Strings can be *indexed* (subscripted), with the first character having index 0. There is no separate character type; a character is simply a string of size one::"
msgstr ""

#: ../../tutorial/introduction.rst:253
msgid "Indices may also be negative numbers, to start counting from the right::"
msgstr ""

#: ../../tutorial/introduction.rst:262
msgid "Note that since -0 is the same as 0, negative indices start from -1."
msgstr ""

#: ../../tutorial/introduction.rst:264
msgid "In addition to indexing, *slicing* is also supported.  While indexing is used to obtain individual characters, *slicing* allows you to obtain a substring::"
msgstr ""

#: ../../tutorial/introduction.rst:272
msgid "Note how the start is always included, and the end always excluded.  This makes sure that ``s[:i] + s[i:]`` is always equal to ``s``::"
msgstr ""

#: ../../tutorial/introduction.rst:280
msgid "Slice indices have useful defaults; an omitted first index defaults to zero, an omitted second index defaults to the size of the string being sliced. ::"
msgstr ""

#: ../../tutorial/introduction.rst:290
msgid "One way to remember how slices work is to think of the indices as pointing *between* characters, with the left edge of the first character numbered 0. Then the right edge of the last character of a string of *n* characters has index *n*, for example::"
msgstr ""

#: ../../tutorial/introduction.rst:301
msgid "The first row of numbers gives the position of the indices 0...6 in the string; the second row gives the corresponding negative indices. The slice from *i* to *j* consists of all characters between the edges labeled *i* and *j*, respectively."
msgstr ""

#: ../../tutorial/introduction.rst:306
msgid "For non-negative indices, the length of a slice is the difference of the indices, if both are within bounds.  For example, the length of ``word[1:3]`` is 2."
msgstr ""

#: ../../tutorial/introduction.rst:310
msgid "Attempting to use an index that is too large will result in an error::"
msgstr ""

#: ../../tutorial/introduction.rst:317
msgid "However, out of range slice indexes are handled gracefully when used for slicing::"
msgstr ""

#: ../../tutorial/introduction.rst:325
msgid "Python strings cannot be changed --- they are :term:`immutable`. Therefore, assigning to an indexed position in the string results in an error::"
msgstr ""

#: ../../tutorial/introduction.rst:335
msgid "If you need a different string, you should create a new one::"
msgstr ""

#: ../../tutorial/introduction.rst:342
msgid "The built-in function :func:`len` returns the length of a string::"
msgstr ""

#: ../../tutorial/introduction.rst:354
msgid ":ref:`typesseq`"
msgstr ""

#: ../../tutorial/introduction.rst:352
msgid "Strings, and the Unicode strings described in the next section, are examples of *sequence types*, and support the common operations supported by such types."
msgstr ""

#: ../../tutorial/introduction.rst:358
msgid ":ref:`string-methods`"
msgstr ""

#: ../../tutorial/introduction.rst:357
msgid "Both strings and Unicode strings support a large number of methods for basic transformations and searching."
msgstr ""

#: ../../tutorial/introduction.rst:361
msgid ":ref:`formatstrings`"
msgstr ""

#: ../../tutorial/introduction.rst:361
msgid "Information about string formatting with :meth:`str.format`."
msgstr ""

#: ../../tutorial/introduction.rst:364
msgid ":ref:`string-formatting`"
msgstr ""

#: ../../tutorial/introduction.rst:364
msgid "The old formatting operations invoked when strings and Unicode strings are the left operand of the ``%`` operator are described in more detail here."
msgstr ""

#: ../../tutorial/introduction.rst:371
msgid "Unicode Strings"
msgstr ""

#: ../../tutorial/introduction.rst:376
msgid "Starting with Python 2.0 a new data type for storing text data is available to the programmer: the Unicode object. It can be used to store and manipulate Unicode data (see http://www.unicode.org/) and integrates well with the existing string objects, providing auto-conversions where necessary."
msgstr ""

#: ../../tutorial/introduction.rst:381
msgid "Unicode has the advantage of providing one ordinal for every character in every script used in modern and ancient texts. Previously, there were only 256 possible ordinals for script characters. Texts were typically bound to a code page which mapped the ordinals to script characters. This lead to very much confusion especially with respect to internationalization (usually written as ``i18n`` --- ``'i'`` + 18 characters + ``'n'``) of software.  Unicode solves these problems by defining one code page for all scripts."
msgstr ""

#: ../../tutorial/introduction.rst:389
msgid "Creating Unicode strings in Python is just as simple as creating normal strings::"
msgstr ""

#: ../../tutorial/introduction.rst:395
msgid "The small ``'u'`` in front of the quote indicates that a Unicode string is supposed to be created. If you want to include special characters in the string, you can do so by using the Python *Unicode-Escape* encoding. The following example shows how::"
msgstr ""

#: ../../tutorial/introduction.rst:403
msgid "The escape sequence ``\\u0020`` indicates to insert the Unicode character with the ordinal value 0x0020 (the space character) at the given position."
msgstr ""

#: ../../tutorial/introduction.rst:406
msgid "Other characters are interpreted by using their respective ordinal values directly as Unicode ordinals.  If you have literal strings in the standard Latin-1 encoding that is used in many Western countries, you will find it convenient that the lower 256 characters of Unicode are the same as the 256 characters of Latin-1."
msgstr ""

#: ../../tutorial/introduction.rst:412
msgid "For experts, there is also a raw mode just like the one for normal strings. You have to prefix the opening quote with 'ur' to have Python use the *Raw-Unicode-Escape* encoding. It will only apply the above ``\\uXXXX`` conversion if there is an uneven number of backslashes in front of the small 'u'. ::"
msgstr ""

#: ../../tutorial/introduction.rst:423
msgid "The raw mode is most useful when you have to enter lots of backslashes, as can be necessary in regular expressions."
msgstr ""

#: ../../tutorial/introduction.rst:426
msgid "Apart from these standard encodings, Python provides a whole set of other ways of creating Unicode strings on the basis of a known encoding."
msgstr ""

#: ../../tutorial/introduction.rst:431
msgid "The built-in function :func:`unicode` provides access to all registered Unicode codecs (COders and DECoders). Some of the more well known encodings which these codecs can convert are *Latin-1*, *ASCII*, *UTF-8*, and *UTF-16*. The latter two are variable-length encodings that store each Unicode character in one or more bytes. The default encoding is normally set to ASCII, which passes through characters in the range 0 to 127 and rejects any other characters with an error. When a Unicode string is printed, written to a file, or converted with :func:`str`, conversion takes place using this default encoding. ::"
msgstr ""

#: ../../tutorial/introduction.rst:451
msgid "To convert a Unicode string into an 8-bit string using a specific encoding, Unicode objects provide an :func:`encode` method that takes one argument, the name of the encoding.  Lowercase names for encodings are preferred. ::"
msgstr ""

#: ../../tutorial/introduction.rst:458
msgid "If you have data in a specific encoding and want to produce a corresponding Unicode string from it, you can use the :func:`unicode` function with the encoding name as the second argument. ::"
msgstr ""

#: ../../tutorial/introduction.rst:469
msgid "Lists"
msgstr ""

#: ../../tutorial/introduction.rst:471
msgid "Python knows a number of *compound* data types, used to group together other values.  The most versatile is the *list*, which can be written as a list of comma-separated values (items) between square brackets.  Lists might contain items of different types, but usually the items all have the same type. ::"
msgstr ""

#: ../../tutorial/introduction.rst:480
msgid "Like strings (and all other built-in :term:`sequence` type), lists can be indexed and sliced::"
msgstr ""

#: ../../tutorial/introduction.rst:490
msgid "All slice operations return a new list containing the requested elements.  This means that the following slice returns a new (shallow) copy of the list::"
msgstr ""

#: ../../tutorial/introduction.rst:496
msgid "Lists also supports operations like concatenation::"
msgstr ""

#: ../../tutorial/introduction.rst:501
msgid "Unlike strings, which are :term:`immutable`, lists are a :term:`mutable` type, i.e. it is possible to change their content::"
msgstr ""

#: ../../tutorial/introduction.rst:511
msgid "You can also add new items at the end of the list, by using the :meth:`~list.append` *method* (we will see more about methods later)::"
msgstr ""

#: ../../tutorial/introduction.rst:519
msgid "Assignment to slices is also possible, and this can even change the size of the list or clear it entirely::"
msgstr ""

#: ../../tutorial/introduction.rst:538
msgid "The built-in function :func:`len` also applies to lists::"
msgstr ""

#: ../../tutorial/introduction.rst:544
msgid "It is possible to nest lists (create lists containing other lists), for example::"
msgstr ""

#: ../../tutorial/introduction.rst:560
msgid "First Steps Towards Programming"
msgstr ""

#: ../../tutorial/introduction.rst:562
msgid "Of course, we can use Python for more complicated tasks than adding two and two together.  For instance, we can write an initial sub-sequence of the *Fibonacci* series as follows::"
msgstr ""

#: ../../tutorial/introduction.rst:580
msgid "This example introduces several new features."
msgstr ""

#: ../../tutorial/introduction.rst:582
msgid "The first line contains a *multiple assignment*: the variables ``a`` and ``b`` simultaneously get the new values 0 and 1.  On the last line this is used again, demonstrating that the expressions on the right-hand side are all evaluated first before any of the assignments take place.  The right-hand side expressions are evaluated  from the left to the right."
msgstr ""

#: ../../tutorial/introduction.rst:588
msgid "The :keyword:`while` loop executes as long as the condition (here: ``b < 10``) remains true.  In Python, like in C, any non-zero integer value is true; zero is false.  The condition may also be a string or list value, in fact any sequence; anything with a non-zero length is true, empty sequences are false.  The test used in the example is a simple comparison.  The standard comparison operators are written the same as in C: ``<`` (less than), ``>`` (greater than), ``==`` (equal to), ``<=`` (less than or equal to), ``>=`` (greater than or equal to) and ``!=`` (not equal to)."
msgstr ""

#: ../../tutorial/introduction.rst:597
msgid "The *body* of the loop is *indented*: indentation is Python's way of grouping statements.  At the interactive prompt, you have to type a tab or space(s) for each indented line.  In practice you will prepare more complicated input for Python with a text editor; all decent text editors have an auto-indent facility.  When a compound statement is entered interactively, it must be followed by a blank line to indicate completion (since the parser cannot guess when you have typed the last line).  Note that each line within a basic block must be indented by the same amount."
msgstr ""

#: ../../tutorial/introduction.rst:606
msgid "The :keyword:`print` statement writes the value of the expression(s) it is given.  It differs from just writing the expression you want to write (as we did earlier in the calculator examples) in the way it handles multiple expressions and strings.  Strings are printed without quotes, and a space is inserted between items, so you can format things nicely, like this::"
msgstr ""

#: ../../tutorial/introduction.rst:616
msgid "A trailing comma avoids the newline after the output::"
msgstr ""

#: ../../tutorial/introduction.rst:625
msgid "Note that the interpreter inserts a newline before it prints the next prompt if the last line was not completed."
msgstr ""

#: ../../tutorial/introduction.rst:629
msgid "Footnotes"
msgstr ""

#: ../../tutorial/introduction.rst:630
msgid "Since ``**`` has higher precedence than ``-``, ``-3**2`` will be interpreted as ``-(3**2)`` and thus result in ``-9``.  To avoid this and get ``9``, you can use ``(-3)**2``."
msgstr ""

#: ../../tutorial/introduction.rst:634
msgid "Unlike other languages, special characters such as ``\\n`` have the same meaning with both single (``'...'``) and double (``\"...\"``) quotes. The only difference between the two is that within single quotes you don't need to escape ``\"`` (but you have to escape ``\\'``) and vice versa."
msgstr ""

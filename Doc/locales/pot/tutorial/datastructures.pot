# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-16 18:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:5
msgid "Data Structures"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:7
msgid "This chapter describes some things you've learned about already in more detail, and adds some new things as well."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:14
msgid "More on Lists"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:16
msgid "The list data type has some more methods.  Here are all of the methods of list objects:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:23
msgid "Add an item to the end of the list; equivalent to ``a[len(a):] = [x]``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:29
msgid "Extend the list by appending all the items in the given list; equivalent to ``a[len(a):] = L``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:36
msgid "Insert an item at a given position.  The first argument is the index of the element before which to insert, so ``a.insert(0, x)`` inserts at the front of the list, and ``a.insert(len(a), x)`` is equivalent to ``a.append(x)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:44
msgid "Remove the first item from the list whose value is *x*. It is an error if there is no such item."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:51
msgid "Remove the item at the given position in the list, and return it.  If no index is specified, ``a.pop()`` removes and returns the last item in the list.  (The square brackets around the *i* in the method signature denote that the parameter is optional, not that you should type square brackets at that position.  You will see this notation frequently in the Python Library Reference.)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:61
msgid "Return the index in the list of the first item whose value is *x*. It is an error if there is no such item."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:68
msgid "Return the number of times *x* appears in the list."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:74
msgid "Sort the items of the list in place (the arguments can be used for sort customization, see :func:`sorted` for their explanation)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:81
msgid "Reverse the elements of the list, in place."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:83
msgid "An example that uses most of the list methods::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:108
msgid "You might have noticed that methods like ``insert``, ``remove`` or ``sort`` that only modify the list have no return value printed -- they return the default ``None``.  This is a design principle for all mutable data structures in Python."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:117
msgid "Using Lists as Stacks"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:122
msgid "The list methods make it very easy to use a list as a stack, where the last element added is the first element retrieved (\"last-in, first-out\").  To add an item to the top of the stack, use :meth:`append`.  To retrieve an item from the top of the stack, use :meth:`pop` without an explicit index.  For example::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:147
msgid "Using Lists as Queues"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:151
msgid "It is also possible to use a list as a queue, where the first element added is the first element retrieved (\"first-in, first-out\"); however, lists are not efficient for this purpose.  While appends and pops from the end of list are fast, doing inserts or pops from the beginning of a list is slow (because all of the other elements have to be shifted by one)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:157
msgid "To implement a queue, use :class:`collections.deque` which was designed to have fast appends and pops from both ends.  For example::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:175
msgid "Functional Programming Tools"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:177
msgid "There are three built-in functions that are very useful when used with lists: :func:`filter`, :func:`map`, and :func:`reduce`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:180
msgid "``filter(function, sequence)`` returns a sequence consisting of those items from the sequence for which ``function(item)`` is true. If *sequence* is a :class:`str`, :class:`unicode` or :class:`tuple`, the result will be of the same type; otherwise, it is always a :class:`list`.  For example, to compute a sequence of numbers divisible by 3 or 5::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:191
msgid "``map(function, sequence)`` calls ``function(item)`` for each of the sequence's items and returns a list of the return values.  For example, to compute some cubes::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:200
msgid "More than one sequence may be passed; the function must then have as many arguments as there are sequences and is called with the corresponding item from each sequence (or ``None`` if some sequence is shorter than another).  For example::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:211
msgid "``reduce(function, sequence)`` returns a single value constructed by calling the binary function *function* on the first two items of the sequence, then on the result and the next item, and so on.  For example, to compute the sum of the numbers 1 through 10::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:221
msgid "If there's only one item in the sequence, its value is returned; if the sequence is empty, an exception is raised."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:224
msgid "A third argument can be passed to indicate the starting value.  In this case the starting value is returned for an empty sequence, and the function is first applied to the starting value and the first sequence item, then to the result and the next item, and so on.  For example, ::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:238
msgid "Don't use this example's definition of :func:`sum`: since summing numbers is such a common need, a built-in function ``sum(sequence)`` is already provided, and works exactly like this."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:245
msgid "List Comprehensions"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:247
msgid "List comprehensions provide a concise way to create lists. Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain condition."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:252
msgid "For example, assume we want to create a list of squares, like::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:261
msgid "We can obtain the same result with::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:265
msgid "This is also equivalent to ``squares = map(lambda x: x**2, range(10))``, but it's more concise and readable."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:268
msgid "A list comprehension consists of brackets containing an expression followed by a :keyword:`for` clause, then zero or more :keyword:`for` or :keyword:`if` clauses.  The result will be a new list resulting from evaluating the expression in the context of the :keyword:`for` and :keyword:`if` clauses which follow it. For example, this listcomp combines the elements of two lists if they are not equal::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:278
msgid "and it's equivalent to:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:289
msgid "Note how the order of the :keyword:`for` and :keyword:`if` statements is the same in both these snippets."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:292
msgid "If the expression is a tuple (e.g. the ``(x, y)`` in the previous example), it must be parenthesized. ::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:323
msgid "List comprehensions can contain complex expressions and nested functions::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:331
msgid "Nested List Comprehensions"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:333
msgid "The initial expression in a list comprehension can be any arbitrary expression, including another list comprehension."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:336
msgid "Consider the following example of a 3x4 matrix implemented as a list of 3 lists of length 4::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:345
msgid "The following list comprehension will transpose rows and columns::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:350
msgid "As we saw in the previous section, the nested listcomp is evaluated in the context of the :keyword:`for` that follows it, so this example is equivalent to::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:361
msgid "which, in turn, is the same as::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:375
msgid "In the real world, you should prefer built-in functions to complex flow statements. The :func:`zip` function would do a great job for this use case::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:381
msgid "See :ref:`tut-unpacking-arguments` for details on the asterisk in this line."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:386
msgid "The :keyword:`del` statement"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:388
msgid "There is a way to remove an item from a list given its index instead of its value: the :keyword:`del` statement.  This differs from the :meth:`pop` method which returns a value.  The :keyword:`del` statement can also be used to remove slices from a list or clear the entire list (which we did earlier by assignment of an empty list to the slice).  For example::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:405
msgid ":keyword:`del` can also be used to delete entire variables::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:409
msgid "Referencing the name ``a`` hereafter is an error (at least until another value is assigned to it).  We'll find other uses for :keyword:`del` later."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:416
msgid "Tuples and Sequences"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:418
msgid "We saw that lists and strings have many common properties, such as indexing and slicing operations.  They are two examples of *sequence* data types (see :ref:`typesseq`).  Since Python is an evolving language, other sequence data types may be added.  There is also another standard sequence data type: the *tuple*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:424
msgid "A tuple consists of a number of values separated by commas, for instance::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:446
msgid "As you see, on output tuples are always enclosed in parentheses, so that nested tuples are interpreted correctly; they may be input with or without surrounding parentheses, although often parentheses are necessary anyway (if the tuple is part of a larger expression).  It is not possible to assign to the individual items of a tuple, however it is possible to create tuples which contain mutable objects, such as lists."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:453
msgid "Though tuples may seem similar to lists, they are often used in different situations and for different purposes. Tuples are :term:`immutable`, and usually contain a heterogeneous sequence of elements that are accessed via unpacking (see later in this section) or indexing (or even by attribute in the case of :func:`namedtuples <collections.namedtuple>`). Lists are :term:`mutable`, and their elements are usually homogeneous and are accessed by iterating over the list."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:461
msgid "A special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra quirks to accommodate these.  Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is constructed by following a value with a comma (it is not sufficient to enclose a single value in parentheses). Ugly, but effective.  For example::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:476
msgid "The statement ``t = 12345, 54321, 'hello!'`` is an example of *tuple packing*: the values ``12345``, ``54321`` and ``'hello!'`` are packed together in a tuple. The reverse operation is also possible::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:482
msgid "This is called, appropriately enough, *sequence unpacking* and works for any sequence on the right-hand side.  Sequence unpacking requires the list of variables on the left to have the same number of elements as the length of the sequence.  Note that multiple assignment is really just a combination of tuple packing and sequence unpacking."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:492
msgid "Sets"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:494
msgid "Python also includes a data type for *sets*.  A set is an unordered collection with no duplicate elements.  Basic uses include membership testing and eliminating duplicate entries.  Set objects also support mathematical operations like union, intersection, difference, and symmetric difference."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:499
msgid "Curly braces or the :func:`set` function can be used to create sets.  Note: to create an empty set you have to use ``set()``, not ``{}``; the latter creates an empty dictionary, a data structure that we discuss in the next section."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:503
msgid "Here is a brief demonstration::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:529
msgid "Similarly to :ref:`list comprehensions <tut-listcomps>`, set comprehensions are also supported::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:540
msgid "Dictionaries"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:542
msgid "Another useful data type built into Python is the *dictionary* (see :ref:`typesmapping`). Dictionaries are sometimes found in other languages as \"associative memories\" or \"associative arrays\".  Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by *keys*, which can be any immutable type; strings and numbers can always be keys.  Tuples can be used as keys if they contain only strings, numbers, or tuples; if a tuple contains any mutable object either directly or indirectly, it cannot be used as a key. You can't use lists as keys, since lists can be modified in place using index assignments, slice assignments, or methods like :meth:`append` and :meth:`extend`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:553
msgid "It is best to think of a dictionary as an unordered set of *key: value* pairs, with the requirement that the keys are unique (within one dictionary). A pair of braces creates an empty dictionary: ``{}``. Placing a comma-separated list of key:value pairs within the braces adds initial key:value pairs to the dictionary; this is also the way dictionaries are written on output."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:559
msgid "The main operations on a dictionary are storing a value with some key and extracting the value given the key.  It is also possible to delete a key:value pair with ``del``. If you store using a key that is already in use, the old value associated with that key is forgotten.  It is an error to extract a value using a non-existent key."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:565
msgid "The :meth:`keys` method of a dictionary object returns a list of all the keys used in the dictionary, in arbitrary order (if you want it sorted, just apply the :func:`sorted` function to it).  To check whether a single key is in the dictionary, use the :keyword:`in` keyword."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:570
msgid "Here is a small example using a dictionary::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:587
msgid "The :func:`dict` constructor builds dictionaries directly from sequences of key-value pairs::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:593
msgid "In addition, dict comprehensions can be used to create dictionaries from arbitrary key and value expressions::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:599
msgid "When the keys are simple strings, it is sometimes easier to specify pairs using keyword arguments::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:609
msgid "Looping Techniques"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:611
msgid "When looping through a sequence, the position index and corresponding value can be retrieved at the same time using the :func:`enumerate` function. ::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:621
msgid "To loop over two or more sequences at the same time, the entries can be paired with the :func:`zip` function. ::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:633
msgid "To loop over a sequence in reverse, first specify the sequence in a forward direction and then call the :func:`reversed` function. ::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:645
msgid "To loop over a sequence in sorted order, use the :func:`sorted` function which returns a new sorted list while leaving the source unaltered. ::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:657
msgid "When looping through dictionaries, the key and corresponding value can be retrieved at the same time using the :meth:`iteritems` method. ::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:667
msgid "It is sometimes tempting to change a list while you are looping over it; however, it is often simpler and safer to create a new list instead. ::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:684
msgid "More on Conditions"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:686
msgid "The conditions used in ``while`` and ``if`` statements can contain any operators, not just comparisons."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:689
msgid "The comparison operators ``in`` and ``not in`` check whether a value occurs (does not occur) in a sequence.  The operators ``is`` and ``is not`` compare whether two objects are really the same object; this only matters for mutable objects like lists.  All comparison operators have the same priority, which is lower than that of all numerical operators."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:695
msgid "Comparisons can be chained.  For example, ``a < b == c`` tests whether ``a`` is less than ``b`` and moreover ``b`` equals ``c``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:698
msgid "Comparisons may be combined using the Boolean operators ``and`` and ``or``, and the outcome of a comparison (or of any other Boolean expression) may be negated with ``not``.  These have lower priorities than comparison operators; between them, ``not`` has the highest priority and ``or`` the lowest, so that ``A and not B or C`` is equivalent to ``(A and (not B)) or C``. As always, parentheses can be used to express the desired composition."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:705
msgid "The Boolean operators ``and`` and ``or`` are so-called *short-circuit* operators: their arguments are evaluated from left to right, and evaluation stops as soon as the outcome is determined.  For example, if ``A`` and ``C`` are true but ``B`` is false, ``A and B and C`` does not evaluate the expression ``C``.  When used as a general value and not as a Boolean, the return value of a short-circuit operator is the last evaluated argument."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:712
msgid "It is possible to assign the result of a comparison or other Boolean expression to a variable.  For example, ::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:720
msgid "Note that in Python, unlike C, assignment cannot occur inside expressions. C programmers may grumble about this, but it avoids a common class of problems encountered in C programs: typing ``=`` in an expression when ``==`` was intended."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:729
msgid "Comparing Sequences and Other Types"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:731
msgid "Sequence objects may be compared to other objects with the same sequence type. The comparison uses *lexicographical* ordering: first the first two items are compared, and if they differ this determines the outcome of the comparison; if they are equal, the next two items are compared, and so on, until either sequence is exhausted. If two items to be compared are themselves sequences of the same type, the lexicographical comparison is carried out recursively.  If all items of two sequences compare equal, the sequences are considered equal. If one sequence is an initial sub-sequence of the other, the shorter sequence is the smaller (lesser) one.  Lexicographical ordering for strings uses the ASCII ordering for individual characters.  Some examples of comparisons between sequences of the same type::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:751
msgid "Note that comparing objects of different types is legal.  The outcome is deterministic but arbitrary: the types are ordered by their name. Thus, a list is always smaller than a string, a string is always smaller than a tuple, etc. [#]_ Mixed numeric types are compared according to their numeric value, so 0 equals 0.0, etc."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:759
msgid "Footnotes"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/tutorial/datastructures.rst:760
msgid "The rules for comparing objects of different types should not be relied upon; they may change in a future version of the language."
msgstr ""
